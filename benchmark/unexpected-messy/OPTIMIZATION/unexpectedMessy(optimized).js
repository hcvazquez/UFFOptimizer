(function (f) {
    if (typeof exports === 'object' && typeof module !== 'undefined') {
        module.exports = f();
    } else if (typeof define === 'function' && define.amd) {
        define([], f);
    } else {
        var g;
        if (typeof window !== 'undefined') {
            g = window;
        } else if (typeof global !== 'undefined') {
            g = global;
        } else if (typeof self !== 'undefined') {
            g = self;
        } else {
            g = this;
        }
        g.unexpectedMessy = f();
    }
}(function () {
    var define, module, exports;
    return function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = typeof require == 'function' && require;
                    if (!u && a)
                        return a(o, !0);
                    if (i)
                        return i(o, !0);
                    var f = new Error('Cannot find module \'' + o + '\'');
                    throw f.code = 'MODULE_NOT_FOUND', f;
                }
                var l = n[o] = { exports: {} };
                t[o][0].call(l.exports, function (e) {
                    var n = t[o][1][e];
                    return s(n ? n : e);
                }, l, l.exports, e, t, n, r);
            }
            return n[o].exports;
        }
        var i = typeof require == 'function' && require;
        for (var o = 0; o < r.length; o++)
            s(r[o]);
        return s;
    }({
        1: [
            function (require, module, exports) {
                module.exports = function isRegExp(re) {
                    var s;
                    try {
                        s = '' + re;
                    } catch (e) {
                        return false;
                    }
                    return re instanceof RegExp || // easy case
                    // duck-type for context-switching evalcx case
                    typeof re === 'function' && re.constructor.name === 'RegExp' && re.compile && re.test && re.exec && s.match(/^\/.*\/[gim]{0,3}$/);
                };
            },
            {}
        ],
        2: [
            function (require, module, exports) {
                (function (Buffer) {
                    var messy = require(56), _ = require(80), isRegExp = require(1), statusMessageByStatusCode = {
                            100: 'Continue',
                            101: 'Switching Protocols',
                            102: 'Processing',
                            200: 'OK',
                            201: 'Created',
                            202: 'Accepted',
                            203: 'Non-Authoritative Information',
                            204: 'No Content',
                            205: 'Reset Content',
                            206: 'Partial Content',
                            207: 'Multi-Status',
                            300: 'Multiple Choices',
                            301: 'Moved Permanently',
                            302: 'Moved Temporarily',
                            303: 'See Other',
                            304: 'Not Modified',
                            305: 'Use Proxy',
                            307: 'Temporary Redirect',
                            400: 'Bad Request',
                            401: 'Unauthorized',
                            402: 'Payment Required',
                            403: 'Forbidden',
                            404: 'Not Found',
                            405: 'Method Not Allowed',
                            406: 'Not Acceptable',
                            407: 'Proxy Authentication Required',
                            408: 'Request Time-out',
                            409: 'Conflict',
                            410: 'Gone',
                            411: 'Length Required',
                            412: 'Precondition Failed',
                            413: 'Request Entity Too Large',
                            414: 'Request-URI Too Large',
                            415: 'Unsupported Media Type',
                            416: 'Requested Range Not Satisfiable',
                            417: 'Expectation Failed',
                            418: 'I\'m a teapot',
                            422: 'Unprocessable Entity',
                            423: 'Locked',
                            424: 'Failed Dependency',
                            425: 'Unordered Collection',
                            426: 'Upgrade Required',
                            428: 'Precondition Required',
                            429: 'Too Many Requests',
                            431: 'Request Header Fields Too Large',
                            500: 'Internal Server Error',
                            501: 'Not Implemented',
                            502: 'Bad Gateway',
                            503: 'Service Unavailable',
                            504: 'Gateway Time-out',
                            505: 'HTTP Version Not Supported',
                            506: 'Variant Also Negotiates',
                            507: 'Insufficient Storage',
                            509: 'Bandwidth Limit Exceeded',
                            510: 'Not Extended',
                            511: 'Network Authentication Required'
                        };
                    function omitUndefinedProperties(obj) {
                        var result = {};
                        Object.keys(obj).forEach(function (key) {
                            if (typeof obj[key] !== 'undefined') {
                                result[key] = obj[key];
                            }
                        });
                        return result;
                    }
                    function sanitizeContentType(contentType) {
                        return contentType && contentType.trim().replace(/\s*;.*$/, '');    // Strip charset etc.
                    }
                    function convertSatisfySpecToInstance(obj, Constructor) {
                        var satisfySpec = {}, instance;
                        if (obj instanceof Constructor) {
                            instance = obj;
                        } else if (!obj || typeof obj !== 'object') {
                            instance = new Constructor(obj);
                        } else {
                            instance = new Constructor(function traverse(obj, path) {
                                if (Array.isArray(obj)) {
                                    return obj.map(function (item, i) {
                                        return traverse(item, path.concat(i));
                                    });
                                } else if (obj && typeof obj === 'object' && !obj.isMessyHeaders && Object.prototype.toString.call(obj) !== '[object RegExp]') {
                                    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(obj)) {
                                        return obj;
                                    }
                                    if (obj.toJSON) {
                                        obj = obj.toJSON();
                                    }
                                    var result = {};
                                    Object.keys(obj).forEach(function (key) {
                                        var val = traverse(obj[key], path.concat(key));
                                        if (typeof val !== 'undefined') {
                                            result[key] = val;
                                        }
                                    });
                                    return result;
                                } else if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {
                                    return obj;
                                } else {
                                    var satisfySpecCursor = satisfySpec;
                                    for (var i = 0; i < path.length - 1; i += 1) {
                                        satisfySpecCursor = satisfySpecCursor[path[i]] = satisfySpecCursor[path[i]] || {};
                                    }
                                    satisfySpecCursor[path[path.length - 1]] = obj;
                                    return '';
                                }
                            }(obj, []));
                        }
                        return {
                            instance: instance,
                            satisfySpec: satisfySpec
                        };
                    }
                    module.exports = {
                        name: 'unexpected-messy',
                        version: require(81).version,
                        installInto: function unexpectedMessy(expect) {
                            var topLevelExpect = expect;
                            expect.installPlugin(require(36));
                            expect.addStyle('messyHeaderValue', function (value) {
                                if (typeof value === 'string') {
                                    this.text(value, 'cyan');
                                } else {
                                    this.append(expect.inspect(value, null, this.clone()));
                                }
                            });
                            expect.addStyle('messyHeader', function (name, value) {
                                this.text(messy.formatHeaderName(name) + ':', 'gray').text(' ').messyHeaderValue(value);
                            });
                            expect.addStyle('messyMessageBody', function (message, depth) {
                                var upgradedBody = message.body;
                                var contentType = message.headers.get('Content-Type');
                                if (message.isMultipart && Array.isArray(message.parts)) {
                                    message.parts.forEach(function (part) {
                                        this.text('--' + message.boundary, 'green').nl().appendInspected(part, depth).nl();
                                    }, this);
                                    this.text('--' + message.boundary + '--', 'green');
                                } else if (typeof upgradedBody === 'string') {
                                    if (contentType) {
                                        this.code(upgradedBody, sanitizeContentType(contentType));
                                    } else {
                                        this.text(upgradedBody);
                                    }
                                } else {
                                    // Buffer instance or parsed JSON
                                    var majorContentType = contentType && contentType.replace(/\/.*/, '');
                                    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(upgradedBody) && /^(?:audio|video|image)$/.test(majorContentType)) {
                                        this.media(upgradedBody, {
                                            contentType: sanitizeContentType(contentType),
                                            link: true
                                        });
                                    } else {
                                        this.appendInspected(upgradedBody, depth);
                                    }
                                }
                            });
                            expect.addType({
                                name: 'messyHeaders',
                                base: 'object',
                                identify: function (obj) {
                                    return obj && obj.isMessyHeaders;
                                },
                                equal: function (headers1, headers2) {
                                    return headers1.equals(headers2);
                                },
                                inspect: function (headers, depth, output, inspect) {
                                    output.block(function () {
                                        var isFirst = true;
                                        headers.getNames().forEach(function (headerName) {
                                            headers.valuesByName[headerName].forEach(function (headerValue) {
                                                if (isFirst) {
                                                    isFirst = false;
                                                } else {
                                                    this.nl();
                                                }
                                                this.text(messy.formatHeaderName(headerName) + ':', 'gray').sp().text(headerValue, 'cyan');
                                            }, this);
                                        }, this);
                                    });
                                },
                                diff: function (actual, expected, output, diff, inspect, equal) {
                                    output.block(function (output) {
                                        var isFirstHeader = true;
                                        function outputHeader(name, value, suppressLeadingNewline) {
                                            output.nl(isFirstHeader || suppressLeadingNewline ? 0 : 1).messyHeader(name, value);
                                            isFirstHeader = false;
                                            return output;
                                        }
                                        var remainingExpectedHeaders = expected.clone(), remainingActualHeaders = actual.clone();
                                        actual.getNames().forEach(function (headerName) {
                                            // First pass: Find exact matches
                                            var actualHeaderValues = actual.getAll(headerName), actualHeaderValue, i;
                                            for (i = 0; i < actualHeaderValues.length; i += 1) {
                                                actualHeaderValue = actualHeaderValues[i];
                                                if (remainingExpectedHeaders.remove(headerName, actualHeaderValue)) {
                                                    remainingActualHeaders.remove(headerName, actualHeaderValue);
                                                    outputHeader(headerName, actualHeaderValue);
                                                }
                                            }
                                            // Second pass: Find changed headers
                                            actualHeaderValues = remainingActualHeaders.getAll(headerName);
                                            if (actualHeaderValues) {
                                                for (i = 0; i < actualHeaderValues.length; i += 1) {
                                                    actualHeaderValue = actualHeaderValues[i];
                                                    outputHeader(headerName, actualHeaderValue);
                                                    if (remainingExpectedHeaders.has(headerName)) {
                                                        var expectedHeaderValue = remainingExpectedHeaders.get(headerName);
                                                        output.sp(actualHeaderValue === '' ? 0 : 1).error('// should be ').text(expectedHeaderValue);
                                                        remainingExpectedHeaders.remove(headerName, expectedHeaderValue);
                                                    } else {
                                                        output.sp(actualHeaderValue === '' ? 0 : 1).error('// should be removed');
                                                    }
                                                }
                                            }
                                        });
                                        // All the headers remaining in remainingExpectedHeaders are missing:
                                        remainingExpectedHeaders.getNames().forEach(function (headerName) {
                                            remainingExpectedHeaders.getAll(headerName).forEach(function (headerValue) {
                                                output.nl(isFirstHeader ? 0 : 1).error('// missing ');
                                                isFirstHeader = false;
                                                outputHeader(headerName, headerValue, true);
                                            });
                                        });
                                    });
                                    return output;
                                }
                            });
                            expect.addAssertion('<messyHeaders> to [exhaustively] satisfy <regexp>', function (expect, subject, value) {
                                return expect(subject.toString(), 'to match', value);
                            });
                            expect.addAssertion('<messyHeaders> to [exhaustively] satisfy <any>', function (expect, subject, value) {
                                var expectedHeaders = value && value.isMessyHeaders ? value : new messy.Headers(value, true), promiseByKey = {
                                        headersPresent: expect.promise(function () {
                                            if (value && typeof value === 'object') {
                                                (value.isMessyHeaders ? value.getNames() : Object.keys(value)).forEach(function (headerName) {
                                                    if (!value.isMessyHeaders && typeof value[headerName] === 'undefined') {
                                                        expect(subject.has(headerName), 'to be false');
                                                    } else {
                                                        expect(subject.has(headerName), 'to be true');
                                                    }
                                                });
                                            }
                                            if (expect.flags.exhaustively) {
                                                subject.getNames().forEach(function (headerName) {
                                                    expect(expectedHeaders.has(headerName), 'to be true');
                                                });
                                            }
                                        }),
                                        headers: {}
                                    }, promisesByHeaderNameAndValue = {};
                                subject.getNames().forEach(function (headerName) {
                                    var satisfySpecs = expectedHeaders.getAll(headerName);
                                    if (!satisfySpecs || satisfySpecs.length === 0) {
                                        return;
                                    }
                                    satisfySpecs = satisfySpecs.map(function (satisfySpec) {
                                        if (typeof satisfySpec !== 'undefined' && typeof satisfySpec !== 'object' && typeof satisfySpec !== 'function') {
                                            return String(satisfySpec);
                                        } else {
                                            return satisfySpec;
                                        }
                                    });
                                    var promisesByHeaderValue = promisesByHeaderNameAndValue[headerName] = {};
                                    subject.getAll(headerName).forEach(function (headerValue) {
                                        if (promisesByHeaderValue[headerValue]) {
                                            // Duplicate value
                                            return;
                                        } else {
                                            promisesByHeaderValue[headerValue] = satisfySpecs.map(function (satisfySpec) {
                                                return expect.promise(function () {
                                                    return expect(headerValue, 'to satisfy', satisfySpec);
                                                });
                                            });
                                        }
                                    });
                                    if (expect.flags.exhaustively) {
                                        promiseByKey.headers[headerName] = expect.promise.all(Object.keys(promisesByHeaderValue).map(function (headerValue) {
                                            return expect.promise.any(promisesByHeaderValue[headerValue]);
                                        }));
                                    } else {
                                        promiseByKey.headers[headerName] = expect.promise.all(satisfySpecs.map(function (satisfySpec, i) {
                                            return expect.promise.any(Object.keys(promisesByHeaderValue).map(function (headerValue) {
                                                return promisesByHeaderValue[headerValue][i];
                                            }));
                                        }));
                                    }
                                });
                                return expect.promise.all(promiseByKey).caught(function () {
                                    return expect.promise.settle(promiseByKey).then(function (promises) {
                                        expect.fail({
                                            diff: function (output, diff, inspect, equal) {
                                                var remainingSatisfySpecPromisesByHeaderNameAndValue = {};
                                                Object.keys(promisesByHeaderNameAndValue).forEach(function (headerName) {
                                                    remainingSatisfySpecPromisesByHeaderNameAndValue[headerName] = {};
                                                    Object.keys(promisesByHeaderNameAndValue[headerName]).forEach(function (headerValue) {
                                                        remainingSatisfySpecPromisesByHeaderNameAndValue[headerName][headerValue] = [].concat(promisesByHeaderNameAndValue[headerName][headerValue]);
                                                    });
                                                });
                                                output.block(function (output) {
                                                    var isFirstHeader = true;
                                                    function outputHeader(name, value, suppressLeadingNewline) {
                                                        output.nl(isFirstHeader || suppressLeadingNewline ? 0 : 1).messyHeader(name, value);
                                                        isFirstHeader = false;
                                                        return output;
                                                    }
                                                    var remainingExpectedHeaders = value && value.isMessyHeaders ? value.clone() : new messy.Headers(value, true), remainingSubjectHeaders = subject.clone();
                                                    subject.getNames().forEach(function (headerName) {
                                                        // First pass: Find exact matches
                                                        var subjectHeaderValues = subject.getAll(headerName), subjectHeaderValue, i;
                                                        for (i = 0; i < subjectHeaderValues.length; i += 1) {
                                                            subjectHeaderValue = subjectHeaderValues[i];
                                                            if (remainingExpectedHeaders.has(headerName)) {
                                                                for (var j = 0; j < remainingExpectedHeaders.valuesByName[headerName].length; j += 1) {
                                                                    if (remainingSatisfySpecPromisesByHeaderNameAndValue[headerName][subjectHeaderValue][j].isFulfilled()) {
                                                                        outputHeader(headerName, subjectHeaderValue);
                                                                        remainingSubjectHeaders.remove(headerName, i);
                                                                        remainingExpectedHeaders.remove(headerName, j);
                                                                        remainingSatisfySpecPromisesByHeaderNameAndValue[headerName][subjectHeaderValue].splice(j, 1);
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        // Second pass: Find changed headers
                                                        subjectHeaderValues = remainingSubjectHeaders.getAll(headerName);
                                                        if (subjectHeaderValues) {
                                                            for (i = 0; i < subjectHeaderValues.length; i += 1) {
                                                                subjectHeaderValue = subjectHeaderValues[i];
                                                                outputHeader(headerName, subjectHeaderValue);
                                                                if (remainingExpectedHeaders.has(headerName)) {
                                                                    var expectedHeaderValue = remainingExpectedHeaders.get(headerName);
                                                                    // Will be the first if multiple
                                                                    if (typeof expectedHeaderValue === 'undefined') {
                                                                        output.sp(subjectHeaderValue === '' ? 0 : 1).error('// should be removed');
                                                                    } else {
                                                                        var promise = remainingSatisfySpecPromisesByHeaderNameAndValue[headerName][subjectHeaderValue][i];
                                                                        if (promise.isRejected()) {
                                                                            var e = promise.reason();
                                                                            output.sp(subjectHeaderValue === '' ? 0 : 1).annotationBlock(function () {
                                                                                this.error((e.getLabel() || 'should satisfy') + ' ').messyHeaderValue(expectedHeaderValue);
                                                                                var diff = e.getDiff(output);
                                                                                if (diff) {
                                                                                    this.nl(2).block(diff);
                                                                                }
                                                                            });
                                                                        }
                                                                        remainingExpectedHeaders.remove(headerName, 0);
                                                                        remainingSatisfySpecPromisesByHeaderNameAndValue[headerName][subjectHeaderValue].shift();
                                                                    }
                                                                } else if (expect.flags.exhaustively) {
                                                                    output.sp(subjectHeaderValue === '' ? 0 : 1).error('// should be removed');
                                                                }
                                                            }
                                                        }
                                                    });
                                                    // All the headers remaining in remainingExpectedHeaders are missing,
                                                    // except the ones with a value of undefined:
                                                    remainingExpectedHeaders.getNames().forEach(function (headerName) {
                                                        remainingExpectedHeaders.getAll(headerName).forEach(function (headerValue) {
                                                            if (typeof headerValue !== 'undefined') {
                                                                output.nl(isFirstHeader ? 0 : 1).error('// missing ');
                                                                outputHeader(headerName, headerValue, true);
                                                                isFirstHeader = false;
                                                            }
                                                        });
                                                    });
                                                });
                                                return output;
                                            }
                                        });
                                    });
                                });
                            });
                            expect.addType({
                                name: 'messyMessage',
                                base: 'object',
                                identify: function (obj) {
                                    return obj && obj.isMessyMessage;
                                },
                                equal: function (message1, message2) {
                                    return message1.equals(message2);
                                },
                                inspect: function (message, depth, output, inspect) {
                                    return output.block(function () {
                                        this.append(inspect(message.headers, depth));
                                        if (!message.hasEmptyBody()) {
                                            if (message.headers.getNames().length > 0) {
                                                this.nl(2);
                                            }
                                            this.messyMessageBody(message, depth);
                                        }
                                    });
                                },
                                diff: function (actual, expected, output, diff, inspect, equal) {
                                    output.block(function (output) {
                                        output.append(diff(actual.headers, expected.headers));
                                        if (!actual.hasEmptyBody() || !expected.hasEmptyBody()) {
                                            output.nl(2);
                                            var bodyDiff = diff(actual.body, expected.body);
                                            if (bodyDiff) {
                                                output.append(bodyDiff);
                                            } else {
                                                output.messyMessageBody(actual);
                                            }
                                        }
                                    });
                                    return output;
                                }
                            });
                            expect.addAssertion('<messyMessage> to [exhaustively] satisfy <undefined>', function (expect, subject, value) {
                                return expect(subject, 'to [exhaustively] satisfy', {});
                            });
                            expect.addAssertion('<messyMessage> to [exhaustively] satisfy <string|Buffer>', function (expect, subject, value) {
                                return expect(subject, 'to [exhaustively] satisfy', new messy.Message(value));
                            });
                            expect.addAssertion('<messyMessage> to [exhaustively] satisfy <object>', function (expect, subject, value) {
                                var promiseByKey = {
                                    headers: expect.promise(function () {
                                        if ('headers' in value) {
                                            return expect(subject.headers, 'to [exhaustively] satisfy', value.headers);
                                        }
                                    }),
                                    body: expect.promise(function () {
                                        if ('body' in value) {
                                            return expect(subject.body, 'to satisfy', value.body);
                                        } else if (expect.flags.exhaustively) {
                                            expect(subject.hasEmptyBody(), 'to be true');
                                        }
                                    })
                                };
                                if (value && typeof value === 'object' && !value.isMessyMessage) {
                                    var unsupportedKeys = Object.keys(value).filter(function (key) {
                                        return messy.Message.propertyNames.indexOf(key) === -1;    //key !== 'body' && key !== 'fileName' && key !== 'rawBody' && key !== 'unchunkedBody' && key !== 'text' && key !== 'headers' && key !== 'parts';
                                    });
                                    if (unsupportedKeys.length > 0) {
                                        throw new Error('messy.Message to satisfy: Unsupported keys: ' + unsupportedKeys.join(', '));
                                    }
                                    promiseByKey.fileName = expect.promise(function () {
                                        if ('fileName' in value) {
                                            return expect(subject, 'to have file name satisfying', value.fileName);
                                        }
                                    });
                                    promiseByKey.rawBody = expect.promise(function () {
                                        if ('rawBody' in value) {
                                            return expect(subject, 'to have raw body satisfying', value.rawBody);
                                        }
                                    });
                                    promiseByKey.unchunkedBody = expect.promise(function () {
                                        if ('unchunkedBody' in value) {
                                            return expect(subject, 'to have unchunked body satisfying', value.unchunkedBody);
                                        }
                                    });
                                    promiseByKey.text = expect.promise(function () {
                                        if ('text' in value) {
                                            return expect(subject.toString(), 'to equal', value.text);
                                        }
                                    });
                                    if (typeof value.parts !== 'undefined' && typeof value.parts !== 'function') {
                                        Object.keys(value.parts).forEach(function (key) {
                                            promiseByKey[key] = expect.promise(function () {
                                                return expect(subject.parts[key], 'to satisfy', value.parts[key]);
                                            });
                                        });
                                    }
                                    promiseByKey.parts = expect.promise(function () {
                                        if (typeof value.parts !== 'undefined') {
                                            expect(subject, 'to be a multipart message');
                                            expect(subject.parts, 'to be an array');
                                            if (typeof value.parts === 'function') {
                                                return expect(subject.parts, 'to satisfy', value.parts);
                                            } else if (Array.isArray(value.parts)) {
                                                expect(subject, 'to have number of parts', value.parts.length);
                                                return expect(subject.parts, 'to satisfy', value.parts);
                                            } else if (value.parts && typeof value.parts === 'object') {
                                                Object.keys(value.parts).forEach(function (key) {
                                                    expect(key, 'to match', /^\d+/);
                                                });
                                            }
                                        }
                                    });
                                }
                                return expect.promise.all(promiseByKey).caught(function () {
                                    return expect.promise.settle(promiseByKey).then(function () {
                                        expect.fail({
                                            diff: function (output, diff, inspect, equal) {
                                                output.block(function (output) {
                                                    if (promiseByKey.headers.isRejected()) {
                                                        var comparison = promiseByKey.headers.reason().getDiff(output);
                                                        if (comparison) {
                                                            output.append(comparison);
                                                        }
                                                    } else {
                                                        output.append(inspect(subject.headers));
                                                    }
                                                    var bodySatisfyError = promiseByKey.body.isRejected() && promiseByKey.body.reason(), bodyDiff = bodySatisfyError && bodySatisfyError.getDiff(output);
                                                    if (bodyDiff) {
                                                        output.nl(2).append(bodyDiff);
                                                    } else if (!subject.hasEmptyBody()) {
                                                        output.nl(2);
                                                        if (subject.isMultipart) {
                                                            subject.parts.forEach(function (part, i) {
                                                                output.text('--' + subject.boundary, 'green').nl();
                                                                var partSatisfyError = promiseByKey[i] && promiseByKey[i].isRejected() && promiseByKey[i].reason(), partSatisfyDiff = partSatisfyError && partSatisfyError.getDiff(output);
                                                                if (typeof value.parts !== 'function' && i in value.parts) {
                                                                    if (partSatisfyDiff) {
                                                                        output.append(partSatisfyDiff);
                                                                    } else {
                                                                        output.append(inspect(part));
                                                                        if (partSatisfyError) {
                                                                            output.sp().error('// ' + (partSatisfyError.getLabel() || 'should satisfy') + ' ').append(inspect(value.parts[i]));
                                                                        }
                                                                    }
                                                                } else {
                                                                    output.append(inspect(part));
                                                                }
                                                                output.nl();
                                                            });
                                                            output.text('--' + subject.boundary + '--', 'green');
                                                        } else {
                                                            output.messyMessageBody(subject);
                                                        }
                                                        if (bodySatisfyError) {
                                                            output.sp().error('// ' + (bodySatisfyError.getLabel() || 'should satisfy') + ' ').append(inspect(value.body));
                                                        }
                                                    } else if (bodySatisfyError) {
                                                        output.nl(2).error('// ' + (bodySatisfyError.getLabel() || 'should satisfy') + ' ').append(inspect(value.body));
                                                    } else if (expect.flags.exhaustively && !subject.hasEmptyBody()) {
                                                        this.messyMessageBody(subject);
                                                        output.sp().error('// should be removed');
                                                    }
                                                    if (promiseByKey.fileName && promiseByKey.fileName.isRejected()) {
                                                        var fileNameError = promiseByKey.fileName.reason();
                                                        output.nl().error('// should have file name satisfying').sp().append(inspect(value.fileName));
                                                        var fileNameDiff = fileNameError.getDiff(output);
                                                        if (fileNameDiff) {
                                                            output.nl().append(fileNameDiff);
                                                        }
                                                    }
                                                    if (promiseByKey.text && promiseByKey.text.isRejected()) {
                                                        var textError = promiseByKey.text.reason();
                                                        output.nl().annotationBlock(function () {
                                                            this.error('should have text satisfying').sp().append(inspect(value.text));
                                                            var textDiff = textError.getDiff(output);
                                                            if (textDiff) {
                                                                output.nl().append(textDiff);
                                                            }
                                                        });
                                                    }
                                                    if (promiseByKey.rawBody && promiseByKey.rawBody.isRejected()) {
                                                        var rawBodyError = promiseByKey.rawBody.reason();
                                                        output.nl().annotationBlock(function () {
                                                            this.error('should have raw body satisfying').sp().append(inspect(value.rawBody));
                                                            var rawBodyDiff = rawBodyError.getDiff(output);
                                                            if (rawBodyDiff) {
                                                                this.nl().append(rawBodyDiff);
                                                            }
                                                        });
                                                    }
                                                    if (promiseByKey.unchunkedBody && promiseByKey.unchunkedBody.isRejected()) {
                                                        var unchunkedBodyError = promiseByKey.unchunkedBody.reason();
                                                        output.nl().annotationBlock(function () {
                                                            this.error('should have unchunked body satisfying').sp().append(inspect(value.unchunkedBody));
                                                            var unchunkedBodyDiff = unchunkedBodyError.getDiff(output);
                                                            if (unchunkedBodyDiff) {
                                                                this.nl().append(unchunkedBodyDiff);
                                                            }
                                                        });
                                                    }
                                                    if (typeof value.parts !== 'undefined') {
                                                        if (!subject.isMultipart) {
                                                            output.nl().annotationBlock(function () {
                                                                this.error('should be a multipart message');
                                                            });
                                                        }
                                                        if (Array.isArray(value.parts)) {
                                                            if (value.parts.length !== subject.parts.length) {
                                                                output.nl().annotationBlock(function () {
                                                                    this.error('should have number of parts').sp().jsNumber(value.parts.length);
                                                                });
                                                            }
                                                        } else if (typeof value.parts === 'function') {
                                                            if (promiseByKey.parts.isRejected()) {
                                                                var partsError = promiseByKey.parts.reason();
                                                                output.nl().annotationBlock(partsError.getDiffMessage(output));
                                                            }
                                                        } else if (value.parts && typeof value.parts === 'object') {
                                                            var nonNumericPartIds = Object.keys(value.parts).filter(function (partId) {
                                                                return !/^\d+/.test(partId);
                                                            });
                                                            if (nonNumericPartIds.length > 0) {
                                                                output.nl().annotationBlock(function () {
                                                                    this.error('invalid part specifier(s):').sp();
                                                                    nonNumericPartIds.forEach(function (partId, i) {
                                                                        if (i > 0) {
                                                                            output.text(',').sp();
                                                                        }
                                                                        this.append(inspect(partId));
                                                                    }, this);
                                                                });
                                                            }
                                                        }
                                                    }
                                                });
                                                return output;
                                            }
                                        });
                                    });
                                });
                            });
                            expect.addAssertion('<messyMessage> to have raw body satisfying <any>', function (expect, subject, value) {
                                expect(subject.rawBody, 'to satisfy', value);
                            });
                            expect.addAssertion('<messyMessage> to have unchunked body satisfying <any>', function (expect, subject, value) {
                                expect(subject.unchunkedBody, 'to satisfy', value);
                            });
                            expect.addAssertion('<messyMessage> to have file name satisfying <any>', function (expect, subject, value) {
                                expect(subject.fileName, 'to satisfy', value);
                            });
                            expect.addAssertion('<messyMessage> to have text satisfying <any>', function (expect, subject, value) {
                                expect(subject.toString(), 'to satisfy', value);
                            });
                            expect.addAssertion('<messyMessage> [not] to be a multipart message', function (expect, subject) {
                                expect(subject.isMultipart, '[not] to be truthy');
                            });
                            expect.addAssertion('<messyMessage> [not] to have number of parts <number>', function (expect, subject, value) {
                                expect(subject.parts, '[not] to have length', value);
                            });
                            expect.addType({
                                name: 'messyRequestLine',
                                base: 'object',
                                identify: function (obj) {
                                    return obj && obj.isMessyRequestLine;
                                },
                                equal: function (requestLine1, requestLine2) {
                                    return requestLine1.equals(requestLine2);
                                },
                                inspect: function (requestLine, depth, output, inspect) {
                                    var isFirstFragment = true;
                                    if (requestLine.method) {
                                        isFirstFragment = false;
                                        output.text(requestLine.method, 'blue');
                                    }
                                    if (requestLine.url) {
                                        output.sp(isFirstFragment ? 0 : 1).text(requestLine.url, 'gray');
                                        isFirstFragment = false;
                                    }
                                    if (typeof requestLine.protocolName !== 'undefined' || typeof requestLine.protocolVersion !== 'undefined') {
                                        output.sp(isFirstFragment ? 0 : 1);
                                        if (typeof requestLine.protocolName !== 'undefined') {
                                            output.text(requestLine.protocolName, 'blue');
                                        }
                                        if (typeof requestLine.protocolVersion !== 'undefined') {
                                            output.text('/' + requestLine.protocolVersion, 'cyan');
                                        }
                                    }
                                    return output;
                                },
                                diff: function (actual, expected, output, diff, inspect, equal) {
                                    output.append(inspect(actual));
                                    if (!equal(actual, expected)) {
                                        var shouldBeFragments = [];
                                        [
                                            'method',
                                            'url',
                                            'protocol'
                                        ].forEach(function (propertyName) {
                                            if (shouldBeFragments.length > 0 || actual[propertyName] !== expected[propertyName]) {
                                                shouldBeFragments.push(expected[propertyName]);
                                            }
                                        });
                                        output.sp().annotationBlock(function () {
                                            this.error('should be').sp().text(shouldBeFragments.join(' ')).nl(2).append(diff(actual.toString(), expected.toString()));
                                        });
                                    }
                                    return output;
                                }
                            });
                            expect.addAssertion('<messyRequestLine> to satisfy <undefined>', function (expect, subject, value) {
                                return expect(subject, 'to [exhaustively] satisfy', {});
                            });
                            expect.addAssertion('<messyRequestLine> to satisfy <string>', function (expect, subject, value) {
                                return expect(subject, 'to [exhaustively] satisfy', omitUndefinedProperties(_.pick(new messy.RequestLine(value), messy.RequestLine.propertyNames)));
                            });
                            expect.addAssertion('<messyRequestLine> to satisfy <object>', function (expect, subject, value) {
                                return expect.promise(function () {
                                    return expect(_.pick(subject, messy.RequestLine.propertyNames), 'to satisfy', value);
                                }).caught(function (err) {
                                    expect.fail({
                                        diff: function (output, diff, inspect, equal) {
                                            if (typeof value !== 'object') {
                                                value = new messy.RequestLine(value);
                                            }
                                            output.append(inspect(subject)).sp();
                                            if (messy.RequestLine.propertyNames.some(function (propertyName) {
                                                    return typeof value[propertyName] === 'function' || isRegExp(value[propertyName]);
                                                })) {
                                                output.annotationBlock(function () {
                                                    this.error('should satisfy').sp().append(inspect(value));
                                                });
                                            } else {
                                                var shouldBeRequestLine = new messy.RequestLine(value);
                                                output.annotationBlock(function () {
                                                    this.error('should be').sp().append(inspect(shouldBeRequestLine)).nl(2).append(diff(subject.toString(), _.defaults(shouldBeRequestLine.clone(), _.pick(subject, messy.RequestLine.nonComputedPropertyNames)).toString()));
                                                });
                                            }
                                            return output;
                                        }
                                    });
                                });
                            });
                            expect.addType({
                                name: 'messyHttpRequest',
                                base: 'messyMessage',
                                identify: function (obj) {
                                    return obj && obj.isMessyHttpRequest;
                                },
                                equal: function (httpRequest1, httpRequest2) {
                                    return httpRequest1.equals(httpRequest2);
                                },
                                inspect: function (httpRequest, depth, output, inspect) {
                                    var baseType = this.baseType;
                                    return output.block(function () {
                                        this.append(inspect(httpRequest.requestLine, depth));
                                        if (httpRequest.headers.getNames().length > 0) {
                                            this.nl();
                                        } else if (!httpRequest.hasEmptyBody()) {
                                            this.nl(2);
                                        }
                                        this.append(baseType.inspect(httpRequest, depth, output.clone(), inspect));
                                    });
                                },
                                diff: function (actual, expected, output, diff, inspect, equal) {
                                    var baseType = this.baseType;
                                    output.block(function () {
                                        this.append(diff(actual.requestLine, expected.requestLine)).nl().append(baseType.diff(actual, expected, output.clone(), diff, inspect, equal));
                                        var actualMetadata = _.pick(actual, messy.HttpRequest.metadataPropertyNames), expectedMetadata = _.pick(expected, messy.HttpRequest.metadataPropertyNames);
                                        if (!equal(actualMetadata, expectedMetadata)) {
                                            this.nl().text('Metadata:').sp().append(diff(actualMetadata, expectedMetadata));
                                        }
                                    });
                                    return output;
                                }
                            });
                            expect.addAssertion('<messyHttpRequest> to [exhaustively] satisfy <undefined>', function (expect, subject, value) {
                                return expect(subject, 'to [exhaustively] satisfy', {});
                            });
                            expect.addAssertion('<messyHttpRequest> to [exhaustively] satisfy <string|Buffer>', function (expect, subject, value) {
                                return expect(subject, 'to [exhaustively] satisfy', omitUndefinedProperties(_.pick(new messy.HttpRequest(value), messy.HttpRequest.propertyNames)));
                            });
                            expect.addAssertion('<messyHttpRequest> to [exhaustively] satisfy <object>', function (expect, subject, value) {
                                var requestLineSpec = _.pick(value, messy.RequestLine.propertyNames), messageValue = _.extend({}, value);
                                delete messageValue.requestLine;
                                messy.HttpRequest.metadataPropertyNames.forEach(function (metadataPropertyName) {
                                    delete messageValue[metadataPropertyName];
                                });
                                Object.keys(requestLineSpec).forEach(function (requestLineKey) {
                                    delete messageValue[requestLineKey];
                                });
                                var promiseByKey = {
                                    message: expect.promise(function () {
                                        return expect(Object.create(subject, { isMessyHttpRequest: { value: false } }), 'to [exhaustively] satisfy', messageValue);
                                    }),
                                    requestLine: expect.promise(function () {
                                        if ('requestLine' in value) {
                                            return expect(subject.requestLine, 'to satisfy', value.requestLine);
                                        }
                                    }),
                                    requestLineSpec: expect.promise(function () {
                                        // Make the RequestLine properties available for matching:
                                        return expect(subject.requestLine, 'to satisfy', requestLineSpec);
                                    })
                                };
                                messy.HttpRequest.metadataPropertyNames.forEach(function (metadataPropertyName) {
                                    promiseByKey[metadataPropertyName] = expect.promise(function () {
                                        if (metadataPropertyName in value) {
                                            return topLevelExpect(subject[metadataPropertyName], 'to satisfy', value[metadataPropertyName]);
                                        }
                                    });
                                });
                                return expect.promise.all(promiseByKey).caught(function () {
                                    return expect.promise.settle(promiseByKey).then(function () {
                                        expect.fail({
                                            diff: function (output, diff, inspect, equal) {
                                                output.block(function (output) {
                                                    var requestLineDiff;
                                                    if (promiseByKey.requestLine.isRejected()) {
                                                        var requestLineError = promiseByKey.requestLine.reason();
                                                        requestLineDiff = requestLineError.getDiff(output);
                                                        if (requestLineDiff) {
                                                            output.append(requestLineDiff);
                                                        } else {
                                                            output.annotationBlock(requestLineError.getErrorMessage(output));
                                                        }
                                                    } else if (promiseByKey.requestLineSpec.isRejected()) {
                                                        var requestLineSpecError = promiseByKey.requestLineSpec.reason();
                                                        requestLineDiff = requestLineSpecError.getDiff(output);
                                                        if (requestLineDiff) {
                                                            output.append(requestLineDiff);
                                                        } else {
                                                            output.annotationBlock(requestLineSpecError.getErrorMessage(output));
                                                        }
                                                    } else {
                                                        output.append(inspect(subject.requestLine));
                                                    }
                                                    output.nl();
                                                    if (promiseByKey.message.isRejected()) {
                                                        var messageError = promiseByKey.message.reason();
                                                        requestLineDiff = messageError.getDiff(output);
                                                        if (requestLineDiff) {
                                                            output.append(requestLineDiff);
                                                        } else {
                                                            output.annotationBlock(messageError.getErrorMessage(output));
                                                        }
                                                    } else {
                                                        output.append(expect.findTypeOf(new messy.Message()).inspect(subject, 3, output.clone(), inspect, equal));
                                                    }
                                                    messy.HttpRequest.metadataPropertyNames.forEach(function (metadataPropertyName) {
                                                        var metadataPropertyError = promiseByKey[metadataPropertyName].isRejected() && promiseByKey[metadataPropertyName].reason();
                                                        if (metadataPropertyError) {
                                                            if (metadataPropertyName === 'encrypted' && value.encrypted === true) {
                                                                output.nl().error('// expected an encrypted request');
                                                            } else if (metadataPropertyName === 'encrypted' && value.encrypted === false) {
                                                                output.nl().error('// expected an unencrypted request');
                                                            } else {
                                                                output.nl().annotationBlock(function () {
                                                                    this.text(metadataPropertyName).text(':').sp().append(metadataPropertyError.getErrorMessage(output));
                                                                });
                                                            }
                                                        }
                                                    });
                                                });
                                                return output;
                                            }
                                        });
                                    });
                                });
                            });
                            expect.addType({
                                name: 'messyStatusLine',
                                base: 'object',
                                identify: function (obj) {
                                    return obj && obj.isMessyStatusLine;
                                },
                                equal: function (statusLine1, statusLine2) {
                                    return statusLine1.equals(statusLine2);
                                },
                                inspect: function (statusLine, depth, output, inspect) {
                                    var isFirstFragment = true;
                                    if (typeof statusLine.protocolName !== 'undefined' || typeof statusLine.protocolVersion !== 'undefined') {
                                        if (typeof statusLine.protocolName !== 'undefined') {
                                            output.text(statusLine.protocolName, 'blue');
                                        }
                                        if (typeof statusLine.protocolVersion !== 'undefined') {
                                            output.text('/' + statusLine.protocolVersion, 'cyan');
                                        }
                                        isFirstFragment = false;
                                    }
                                    if (statusLine.statusCode) {
                                        output.sp(isFirstFragment ? 0 : 1).text(statusLine.statusCode, 'cyan');
                                        isFirstFragment = false;
                                    }
                                    if (typeof statusLine.statusMessage !== 'undefined') {
                                        output.sp(isFirstFragment ? 0 : 1).text(statusLine.statusMessage, 'yellow');
                                    }
                                    return output;
                                },
                                diff: function (actual, expected, output, diff, inspect, equal) {
                                    output.append(inspect(actual));
                                    if (!equal(actual, expected)) {
                                        var shouldBeFragments = [];
                                        [
                                            'protocol',
                                            'statusCode',
                                            'statusMessage'
                                        ].forEach(function (propertyName) {
                                            if (typeof expected[propertyName] !== 'undefined' && (shouldBeFragments.length > 0 || actual[propertyName] !== expected[propertyName])) {
                                                shouldBeFragments.push(expected[propertyName]);
                                            }
                                        });
                                        output.sp().annotationBlock(function () {
                                            this.error('should be').sp().text(shouldBeFragments.join(' ')).nl(2).append(diff(actual.toString(), expected.toString()));
                                        });
                                    }
                                    return output;
                                }
                            });
                            expect.addAssertion('<messyStatusLine> to [exhaustively] satisfy <undefined>', function (expect, subject, value) {
                                return expect(subject, 'to [exhaustively] satisfy', {});
                            });
                            expect.addAssertion('<messyStatusLine> to [exhaustively] satisfy <string>', function (expect, subject, value) {
                                return expect(subject, 'to [exhaustively] satisfy', omitUndefinedProperties(_.pick(new messy.StatusLine(value), messy.StatusLine.propertyNames)));
                            });
                            expect.addAssertion('<messyStatusLine> to [exhaustively] satisfy <number>', function (expect, subject, value) {
                                if (subject.statusCode !== value) {
                                    expect.fail({
                                        diff: function (output, diff, inspect, equal) {
                                            return output.append(inspect(subject)).sp().annotationBlock(function () {
                                                this.error('should be').sp().append(inspect(value));
                                                if (statusMessageByStatusCode[value]) {
                                                    this.sp().text(statusMessageByStatusCode[value]);
                                                }
                                            });
                                        }
                                    });
                                }
                            });
                            expect.addAssertion('<messyStatusLine> to [exhaustively] satisfy <function|object>', function (expect, subject, value) {
                                return expect.withError(function () {
                                    if (typeof value === 'function') {
                                        return expect(subject.statusCode, 'to satisfy', value);
                                    } else if (value && typeof value === 'object') {
                                        return expect(_.pick(subject, messy.StatusLine.propertyNames), 'to satisfy', value);
                                    } else {
                                        return expect(subject.toString(), 'to satisfy', value);
                                    }
                                }, function (err) {
                                    expect.fail({
                                        diff: function (output, diff, inspect, equal) {
                                            output.append(inspect(subject)).sp();
                                            if (typeof value === 'number' || typeof value === 'function') {
                                                if (value._expectIt) {
                                                    var comparison = err.getDiff(output);
                                                    if (comparison) {
                                                        output.annotationBlock(comparison);
                                                    }
                                                } else {
                                                    output.annotationBlock(function () {
                                                        this.error(err.getLabel() || 'should satisfy').sp().append(inspect(value));
                                                    });
                                                }
                                            } else if (messy.StatusLine.propertyNames.some(function (propertyName) {
                                                    return typeof value[propertyName] === 'function' || isRegExp(value[propertyName]);
                                                })) {
                                                output.annotationBlock(function () {
                                                    this.error('should satisfy').sp().append(inspect(value));
                                                });
                                            } else {
                                                var expectedStatusLine = new messy.StatusLine(value);
                                                if (typeof expectedStatusLine.statusMessage === 'undefined' && typeof subject.statusMessage !== 'undefined') {
                                                    expectedStatusLine.statusMessage = statusMessageByStatusCode[expectedStatusLine.statusCode];
                                                }
                                                output.annotationBlock(function () {
                                                    this.error('should be').sp().append(inspect(expectedStatusLine)).nl(2).append(diff(subject.toString(), _.defaults(expectedStatusLine.clone(), _.pick(subject, messy.StatusLine.nonComputedPropertyNames)).toString()));
                                                });
                                            }
                                            return output;
                                        }
                                    });
                                });
                            });
                            expect.addType({
                                name: 'messyHttpResponse',
                                base: 'messyMessage',
                                equal: function (httpResponse1, httpResponse2) {
                                    return httpResponse1.equals(httpResponse2);
                                },
                                identify: function (obj) {
                                    return obj && obj.isMessyHttpResponse;
                                },
                                inspect: function (httpResponse, depth, output, inspect) {
                                    var baseType = this.baseType;
                                    return output.block(function () {
                                        this.append(inspect(httpResponse.statusLine, depth));
                                        if (httpResponse.headers.getNames().length > 0) {
                                            this.nl();
                                        } else if (!httpResponse.hasEmptyBody()) {
                                            this.nl(2);
                                        }
                                        this.append(baseType.inspect(httpResponse, depth, output.clone(), inspect));
                                    });
                                },
                                diff: function (actual, expected, output, diff, inspect, equal) {
                                    var baseType = this.baseType;
                                    output.block(function (output) {
                                        output.append(diff(actual.statusLine, expected.statusLine));
                                        var messageDiff = baseType.diff(actual, expected, output.clone(), diff, inspect, equal);
                                        if (messageDiff && !messageDiff.isEmpty()) {
                                            output.nl().append(messageDiff);
                                        }
                                    });
                                    return output;
                                }
                            });
                            expect.addAssertion('<messyHttpResponse> to [exhaustively] satisfy <undefined>', function (expect, subject, value) {
                                return expect(subject, 'to [exhaustively] satisfy', {});
                            });
                            expect.addAssertion('<messyHttpResponse> to [exhaustively] satisfy <string|Buffer>', function (expect, subject, value) {
                                return expect(subject, 'to [exhaustively] satisfy', omitUndefinedProperties(_.pick(new messy.HttpResponse(value), messy.HttpResponse.propertyNames)));
                            });
                            expect.addAssertion('<messyHttpResponse> to [exhaustively] satisfy <object>', function (expect, subject, value) {
                                var statusLineSpec = _.pick(value, messy.StatusLine.propertyNames), messageValue = _.extend({}, value);
                                delete messageValue.statusLine;
                                Object.keys(statusLineSpec).forEach(function (statusLineKey) {
                                    delete messageValue[statusLineKey];
                                });
                                var promiseByKey = {
                                    statusLine: expect.promise(function () {
                                        if ('statusLine' in value) {
                                            return expect(subject.statusLine, 'to satisfy', value.statusLine);
                                        }
                                    }),
                                    statusLineSpec: expect.promise(function () {
                                        // Make the StatusLine properties available for matching:
                                        return expect(subject.statusLine, 'to satisfy', statusLineSpec);
                                    }),
                                    message: expect.promise(function () {
                                        return expect(Object.create(subject, { isMessyHttpResponse: { value: false } }), 'to [exhaustively] satisfy', messageValue);
                                    })
                                };
                                return expect.promise.all(promiseByKey).caught(function () {
                                    return expect.promise.settle(promiseByKey).then(function () {
                                        expect.fail({
                                            diff: function (output, diff, inspect, equal) {
                                                output.block(function (output) {
                                                    var statusLineDiff;
                                                    if (promiseByKey.statusLine.isRejected()) {
                                                        var statusLineError = promiseByKey.statusLine.reason();
                                                        statusLineDiff = statusLineError.getDiff(output);
                                                        if (statusLineDiff) {
                                                            output.append(statusLineDiff);
                                                        } else {
                                                            output.annotationBlock(statusLineError.getErrorMessage(output));
                                                        }
                                                    } else if (promiseByKey.statusLineSpec.isRejected()) {
                                                        var statusLineSpecError = promiseByKey.statusLineSpec.reason();
                                                        statusLineDiff = statusLineSpecError.getDiff(output);
                                                        if (statusLineDiff) {
                                                            output.append(statusLineDiff);
                                                        } else {
                                                            output.annotationBlock(statusLineSpecError.getErrorMessage(output));
                                                        }
                                                    } else {
                                                        output.append(inspect(subject.statusLine));
                                                    }
                                                    output.nl();
                                                    if (promiseByKey.message.isRejected()) {
                                                        var messageError = promiseByKey.message.reason();
                                                        var messageDiff = messageError.getDiff(output);
                                                        if (messageDiff) {
                                                            output.append(messageDiff);
                                                        } else {
                                                            output.annotationBlock(messageError.getErrorMessage(output));
                                                        }
                                                    } else {
                                                        output.append(expect.findTypeOf(new messy.Message()).inspect(subject, 3, output.clone(), inspect, equal));
                                                    }
                                                });
                                                return output;
                                            }
                                        });
                                    });
                                });
                            });
                            expect.addType({
                                name: 'messyHttpExchange',
                                base: 'object',
                                equal: function (httpExchange1, httpExchange2) {
                                    return httpExchange1.equals(httpExchange2);
                                },
                                identify: function (obj) {
                                    return obj && obj.isMessyHttpExchange;
                                },
                                inspect: function (httpExchange, depth, output, inspect) {
                                    return output.block(function () {
                                        if (httpExchange.request) {
                                            this.append(inspect(httpExchange.request, depth));
                                        } else {
                                            this.text('<no request>', 'yellow');
                                        }
                                        this.nl(2);
                                        if (httpExchange.response) {
                                            this.append(inspect(httpExchange.response, depth));
                                        } else {
                                            this.text('<no response>', 'yellow');
                                        }
                                    });
                                },
                                diff: function (actual, expected, output, diff, inspect, equal) {
                                    output.block(function () {
                                        this.append(diff(actual.request, expected.request)).nl(2).append(diff(actual.response, expected.response));
                                    });
                                    return output;
                                }
                            });
                            expect.addAssertion('<messyHttpExchange> to [exhaustively] satisfy <undefined>', function (expect, subject, value) {
                                return expect(subject, 'to [exhaustively] satisfy', {});
                            });
                            expect.addAssertion('<messyHttpExchange> to [exhaustively] satisfy <object>', function (expect, subject, value) {
                                var promiseByKey = {
                                    request: expect.promise(function () {
                                        if ('request' in value) {
                                            return expect(subject.request, 'to [exhaustively] satisfy', value.request);
                                        } else {
                                            expect(expect.flags.exhaustively, 'to be false');
                                        }
                                    }),
                                    response: expect.promise(function () {
                                        if ('response' in value) {
                                            return expect(subject.response, 'to [exhaustively] satisfy', value.response);
                                        } else {
                                            expect(expect.flags.exhaustively, 'to be false');
                                        }
                                    })
                                };
                                return expect.promise.all(promiseByKey).caught(function () {
                                    return expect.promise.settle(promiseByKey).then(function () {
                                        expect.fail({
                                            diff: function (output, diff, inspect, equal) {
                                                output.block(function (output) {
                                                    if (promiseByKey.request.isRejected()) {
                                                        var requestError = promiseByKey.request.reason();
                                                        var requestDiff = requestError.getDiff(output);
                                                        if (requestDiff) {
                                                            output.append(requestDiff);
                                                        } else {
                                                            output.annotationBlock(requestError.getErrorMessage(output));
                                                        }
                                                    } else if (subject.request) {
                                                        output.append(inspect(subject.request));
                                                    } else {
                                                        output.text('<no request>', 'yellow');
                                                    }
                                                    output.nl(2);
                                                    if (promiseByKey.response.isRejected()) {
                                                        var responseError = promiseByKey.response.reason();
                                                        var responseDiff = responseError.getDiff(output);
                                                        if (responseDiff) {
                                                            output.append(responseDiff);
                                                        } else {
                                                            output.annotationBlock(responseError.getErrorMessage(output));
                                                        }
                                                    } else if (subject.response) {
                                                        output.append(inspect(subject.response));
                                                    } else {
                                                        output.text('<no response>', 'yellow');
                                                    }
                                                });
                                                return output;
                                            }
                                        });
                                    });
                                });
                            });
                            expect.addType({
                                name: 'messyHttpConversation',
                                base: 'object',
                                equal: function (httpConversation1, httpConversation2) {
                                    return httpConversation1.equals(httpConversation2);
                                },
                                identify: function (obj) {
                                    return obj && obj.isMessyHttpConversation;
                                },
                                inspect: function (httpConversation, depth, output, inspect) {
                                    if (httpConversation.exchanges.length === 0) {
                                        output.text('<empty conversation>', 'yellow');
                                    } else {
                                        httpConversation.exchanges.forEach(function (httpExchange, i) {
                                            if (i > 0) {
                                                output.nl(2);
                                            }
                                            output.append(inspect(httpExchange, depth));
                                        });
                                    }
                                    return output;
                                },
                                diff: function (actual, expected, output, diff, inspect, equal) {
                                    output.block(function () {
                                        for (var i = 0; i < Math.max(actual.exchanges.length, expected.exchanges.length); i += 1) {
                                            if (i > 0) {
                                                this.nl(2);
                                            }
                                            if (i < actual.exchanges.length && i < expected.exchanges.length) {
                                                this.append(diff(actual.exchanges[i], expected.exchanges[i]));
                                            } else if (actual.exchanges.length > expected.exchanges.length) {
                                                this.block(function () {
                                                    this.error('should be removed:').nl().append(inspect(actual.exchanges[i])).prependLinesWith(function () {
                                                        this.error('//').sp();
                                                    });
                                                });
                                            } else {
                                                // expected.exchanges.length > actual.exchanges.length
                                                this.block(function () {
                                                    this.error('missing:').nl().append(inspect(expected.exchanges[i])).prependLinesWith(function () {
                                                        this.error('//').sp();
                                                    });
                                                });
                                            }
                                        }
                                    });
                                    return output;
                                }
                            });
                            expect.addAssertion('<messyHttpConversation> [not] to have number of exchanges <number>', function (expect, subject, value) {
                                expect(subject.exchanges, '[not] to have length', value);
                            });
                            expect.addAssertion('<messyHttpConversation> to [exhaustively] satisfy <string|Buffer>', function (expect, subject, value) {
                                return expect(subject, 'to [exhaustively] satisfy', new messy.HttpConversation(value));
                            });
                            expect.addAssertion('<messyHttpConversation> to [exhaustively] satisfy <undefined>', function (expect, subject, value) {
                                return expect(subject, 'to [exhaustively] satisfy', {});
                            });
                            expect.addAssertion('<messyHttpConversation> to [exhaustively] satisfy <object>', function (expect, subject, value) {
                                var numValueExchanges = 0;
                                if (Array.isArray(value.exchanges)) {
                                    numValueExchanges = value.exchanges.length;
                                } else if (value.exchanges && typeof value.exchanges === 'object') {
                                    var valueExchangesKeys = Object.keys(value.exchanges);
                                    if (valueExchangesKeys.length > 0) {
                                        numValueExchanges = valueExchangesKeys.map(function (str) {
                                            return parseInt(str, 10);
                                        }).sort().pop() + 1;
                                    }
                                }
                                var promiseByKey = {
                                    exchanges: expect.promise(function () {
                                        if (typeof value.exchanges !== 'undefined') {
                                            expect(subject.exchanges, 'to be an array');
                                            if (typeof value.exchanges === 'function') {
                                                return expect(subject.exchanges, 'to satisfy', value.exchanges);
                                            } else if (Array.isArray(value.exchanges)) {
                                                expect(subject, 'to have number of exchanges', value.exchanges.length);
                                            } else if (value.exchanges && typeof value.exchanges === 'object') {
                                                Object.keys(value.exchanges).forEach(function (key) {
                                                    expect(key, 'to match', /^\d+/);
                                                });
                                            }
                                        }
                                    })
                                };
                                if (!value.isMessyConversation && typeof value.exchanges !== 'undefined' && typeof value.exchanges !== 'function') {
                                    Object.keys(value.exchanges).forEach(function (key, i) {
                                        promiseByKey[key] = expect.promise(function () {
                                            if (i < subject.exchanges.length) {
                                                return expect(subject.exchanges[key], 'to [exhaustively] satisfy', value.exchanges[key]);
                                            } else {
                                                var instanceAndSatisfySpec = convertSatisfySpecToInstance(value.exchanges[key], messy.HttpExchange);
                                                return expect(instanceAndSatisfySpec.instance, 'to [exhaustively] satisfy', instanceAndSatisfySpec.satisfySpec);
                                            }
                                        });
                                    });
                                }
                                return expect.promise.all(promiseByKey).caught(function () {
                                    return expect.promise.settle(promiseByKey).then(function () {
                                        expect.fail({
                                            diff: function (output, diff, inspect, equal) {
                                                output.block(function (output) {
                                                    for (var i = 0; i < Math.max(subject.exchanges.length, numValueExchanges); i += 1) {
                                                        if (i > 0) {
                                                            output.nl(2);
                                                        }
                                                        var exchangeSatisfyError = promiseByKey[i] && promiseByKey[i].isRejected() && promiseByKey[i].reason(), exchangeSatisfyDiff = exchangeSatisfyError && exchangeSatisfyError.getDiff(output);
                                                        if (i < subject.exchanges.length && i < numValueExchanges) {
                                                            if (typeof value.exchanges !== 'function' && i in value.exchanges) {
                                                                if (exchangeSatisfyDiff) {
                                                                    output.append(exchangeSatisfyDiff);
                                                                } else {
                                                                    output.append(inspect(subject.exchanges[i]));
                                                                    if (exchangeSatisfyError) {
                                                                        output.sp().annotationBlock(function () {
                                                                            this.error((exchangeSatisfyError.getLabel() || 'should satisfy') + ' ').append(inspect(value.exchanges[i]));
                                                                        });
                                                                    }
                                                                }
                                                            } else {
                                                                output.append(inspect(subject.exchanges[i]));
                                                            }
                                                        } else if (i < numValueExchanges) {
                                                            output.annotationBlock(function () {
                                                                this.error('missing:').nl();
                                                                if (exchangeSatisfyDiff && exchangeSatisfyDiff) {
                                                                    this.append(exchangeSatisfyDiff);
                                                                } else {
                                                                    this.append(inspect(convertSatisfySpecToInstance(value.exchanges[i], messy.HttpExchange).instance));
                                                                }
                                                            });
                                                        } else {
                                                            output.annotationBlock(function () {
                                                                this.error('should be removed:').nl().append(inspect(subject.exchanges[i]));
                                                            });
                                                        }
                                                    }
                                                });
                                                return output;
                                            }
                                        });
                                    });
                                });
                            });
                        }
                    };
                }.call(this, require(5).Buffer));
            },
            {
                '1': 1,
                '36': 36,
                '5': 5,
                '56': 56,
                '80': 80,
                '81': 81
            }
        ],
        3: [
            function (require, module, exports) {
            },
            {}
        ],
        4: [
            function (require, module, exports) {
                arguments[4][3][0].apply(exports, arguments);
            },
            { '3': 3 }
        ],
        5: [
            function (require, module, exports) {
                (function (global) {
                    /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
                    /* eslint-disable no-proto */
                    'use strict';
                    var base64 = require(6);
                    var ieee754 = require(7);
                    var isArray = require(8);
                    exports.Buffer = Buffer;
                    exports.SlowBuffer = SlowBuffer;
                    exports.INSPECT_MAX_BYTES = 50;
                    Buffer.poolSize = 8192;
                    // not used by this implementation
                    var rootParent = {};
                    /**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
 *     on objects.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
                    Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
                    function typedArraySupport() {
                        function Bar() {
                        }
                        try {
                            var arr = new Uint8Array(1);
                            arr.foo = function () {
                                return 42;
                            };
                            arr.constructor = Bar;
                            return arr.foo() === 42 && // typed array instances can be augmented
                            arr.constructor === Bar && // constructor can be set
                            typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
                            arr.subarray(1, 1).byteLength === 0    // ie10 has broken `subarray`
;
                        } catch (e) {
                            return false;
                        }
                    }
                    function kMaxLength() {
                        return Buffer.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
                    }
                    /**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
                    function Buffer(arg) {
                        if (!(this instanceof Buffer)) {
                            // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
                            if (arguments.length > 1)
                                return new Buffer(arg, arguments[1]);
                            return new Buffer(arg);
                        }
                        if (!Buffer.TYPED_ARRAY_SUPPORT) {
                            this.length = 0;
                            this.parent = undefined;
                        }
                        // Common case.
                        if (typeof arg === 'number') {
                            return fromNumber(this, arg);
                        }
                        // Slightly less common case.
                        if (typeof arg === 'string') {
                            return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8');
                        }
                        // Unusual.
                        return fromObject(this, arg);
                    }
                    function fromNumber(that, length) {
                        that = allocate(that, length < 0 ? 0 : checked(length) | 0);
                        if (!Buffer.TYPED_ARRAY_SUPPORT) {
                            for (var i = 0; i < length; i++) {
                                that[i] = 0;
                            }
                        }
                        return that;
                    }
                    function fromString(that, string, encoding) {
                        if (typeof encoding !== 'string' || encoding === '')
                            encoding = 'utf8';
                        // Assumption: byteLength() return value is always < kMaxLength.
                        var length = byteLength(string, encoding) | 0;
                        that = allocate(that, length);
                        that.write(string, encoding);
                        return that;
                    }
                    function fromObject(that, object) {
                        if (Buffer.isBuffer(object))
                            return fromBuffer(that, object);
                        if (isArray(object))
                            return fromArray(that, object);
                        if (object == null) {
                            throw new TypeError('must start with number, buffer, array or string');
                        }
                        if (typeof ArrayBuffer !== 'undefined') {
                            if (object.buffer instanceof ArrayBuffer) {
                                return fromTypedArray(that, object);
                            }
                            if (object instanceof ArrayBuffer) {
                                return fromArrayBuffer(that, object);
                            }
                        }
                        if (object.length)
                            return fromArrayLike(that, object);
                        return fromJsonObject(that, object);
                    }
                    function fromBuffer(that, buffer) {
                        var length = checked(buffer.length) | 0;
                        that = allocate(that, length);
                        buffer.copy(that, 0, 0, length);
                        return that;
                    }
                    function fromArray(that, array) {
                        var length = checked(array.length) | 0;
                        that = allocate(that, length);
                        for (var i = 0; i < length; i += 1) {
                            that[i] = array[i] & 255;
                        }
                        return that;
                    }
                    // Duplicate of fromArray() to keep fromArray() monomorphic.
                    function fromTypedArray(that, array) {
                        var length = checked(array.length) | 0;
                        that = allocate(that, length);
                        // Truncating the elements is probably not what people expect from typed
                        // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
                        // of the old Buffer constructor.
                        for (var i = 0; i < length; i += 1) {
                            that[i] = array[i] & 255;
                        }
                        return that;
                    }
                    function fromArrayBuffer(that, array) {
                        if (Buffer.TYPED_ARRAY_SUPPORT) {
                            // Return an augmented `Uint8Array` instance, for best performance
                            array.byteLength;
                            that = Buffer._augment(new Uint8Array(array));
                        } else {
                            // Fallback: Return an object instance of the Buffer class
                            that = fromTypedArray(that, new Uint8Array(array));
                        }
                        return that;
                    }
                    function fromArrayLike(that, array) {
                        var length = checked(array.length) | 0;
                        that = allocate(that, length);
                        for (var i = 0; i < length; i += 1) {
                            that[i] = array[i] & 255;
                        }
                        return that;
                    }
                    // Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
                    // Returns a zero-length buffer for inputs that don't conform to the spec.
                    function fromJsonObject(that, object) {
                        var array;
                        var length = 0;
                        if (object.type === 'Buffer' && isArray(object.data)) {
                            array = object.data;
                            length = checked(array.length) | 0;
                        }
                        that = allocate(that, length);
                        for (var i = 0; i < length; i += 1) {
                            that[i] = array[i] & 255;
                        }
                        return that;
                    }
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        Buffer.prototype.__proto__ = Uint8Array.prototype;
                        Buffer.__proto__ = Uint8Array;
                    } else {
                        // pre-set for values that may exist in the future
                        Buffer.prototype.length = undefined;
                        Buffer.prototype.parent = undefined;
                    }
                    function allocate(that, length) {
                        if (Buffer.TYPED_ARRAY_SUPPORT) {
                            // Return an augmented `Uint8Array` instance, for best performance
                            that = Buffer._augment(new Uint8Array(length));
                            that.__proto__ = Buffer.prototype;
                        } else {
                            // Fallback: Return an object instance of the Buffer class
                            that.length = length;
                            that._isBuffer = true;
                        }
                        var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1;
                        if (fromPool)
                            that.parent = rootParent;
                        return that;
                    }
                    function checked(length) {
                        // Note: cannot use `length < kMaxLength` here because that fails when
                        // length is NaN (which is otherwise coerced to zero.)
                        if (length >= kMaxLength()) {
                            throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
                        }
                        return length | 0;
                    }
                    function SlowBuffer(subject, encoding) {
                        if (!(this instanceof SlowBuffer))
                            return new SlowBuffer(subject, encoding);
                        var buf = new Buffer(subject, encoding);
                        delete buf.parent;
                        return buf;
                    }
                    Buffer.isBuffer = function isBuffer(b) {
                        return !!(b != null && b._isBuffer);
                    };
                    Buffer.compare = function compare(a, b) {
                        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                            throw new TypeError('Arguments must be Buffers');
                        }
                        if (a === b)
                            return 0;
                        var x = a.length;
                        var y = b.length;
                        var i = 0;
                        var len = Math.min(x, y);
                        while (i < len) {
                            if (a[i] !== b[i])
                                break;
                            ++i;
                        }
                        if (i !== len) {
                            x = a[i];
                            y = b[i];
                        }
                        if (x < y)
                            return -1;
                        if (y < x)
                            return 1;
                        return 0;
                    };
                    Buffer.isEncoding = function isEncoding(encoding) {
                        switch (String(encoding).toLowerCase()) {
                        case 'hex':
                        case 'utf8':
                        case 'utf-8':
                        case 'ascii':
                        case 'binary':
                        case 'base64':
                        case 'raw':
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return true;
                        default:
                            return false;
                        }
                    };
                    Buffer.concat = function concat(list, length) {
                        if (!isArray(list))
                            throw new TypeError('list argument must be an Array of Buffers.');
                        if (list.length === 0) {
                            return new Buffer(0);
                        }
                        var i;
                        if (length === undefined) {
                            length = 0;
                            for (i = 0; i < list.length; i++) {
                                length += list[i].length;
                            }
                        }
                        var buf = new Buffer(length);
                        var pos = 0;
                        for (i = 0; i < list.length; i++) {
                            var item = list[i];
                            item.copy(buf, pos);
                            pos += item.length;
                        }
                        return buf;
                    };
                    function byteLength(string, encoding) {
                        if (typeof string !== 'string')
                            string = '' + string;
                        var len = string.length;
                        if (len === 0)
                            return 0;
                        // Use a for loop to avoid recursion
                        var loweredCase = false;
                        for (;;) {
                            switch (encoding) {
                            case 'ascii':
                            case 'binary':
                            // Deprecated
                            case 'raw':
                            case 'raws':
                                return len;
                            case 'utf8':
                            case 'utf-8':
                                return utf8ToBytes(string).length;
                            case 'ucs2':
                            case 'ucs-2':
                            case 'utf16le':
                            case 'utf-16le':
                                return len * 2;
                            case 'hex':
                                return len >>> 1;
                            case 'base64':
                                return base64ToBytes(string).length;
                            default:
                                if (loweredCase)
                                    return utf8ToBytes(string).length;
                                // assume utf8
                                encoding = ('' + encoding).toLowerCase();
                                loweredCase = true;
                            }
                        }
                    }
                    Buffer.byteLength = byteLength;
                    function slowToString(encoding, start, end) {
                        var loweredCase = false;
                        start = start | 0;
                        end = end === undefined || end === Infinity ? this.length : end | 0;
                        if (!encoding)
                            encoding = 'utf8';
                        if (start < 0)
                            start = 0;
                        if (end > this.length)
                            end = this.length;
                        if (end <= start)
                            return '';
                        while (true) {
                            switch (encoding) {
                            case 'hex':
                                return hexSlice(this, start, end);
                            case 'utf8':
                            case 'utf-8':
                                return utf8Slice(this, start, end);
                            case 'ascii':
                                return asciiSlice(this, start, end);
                            case 'binary':
                                return binarySlice(this, start, end);
                            case 'base64':
                                return base64Slice(this, start, end);
                            case 'ucs2':
                            case 'ucs-2':
                            case 'utf16le':
                            case 'utf-16le':
                                return utf16leSlice(this, start, end);
                            default:
                                if (loweredCase)
                                    throw new TypeError('Unknown encoding: ' + encoding);
                                encoding = (encoding + '').toLowerCase();
                                loweredCase = true;
                            }
                        }
                    }
                    Buffer.prototype.toString = function toString() {
                        var length = this.length | 0;
                        if (length === 0)
                            return '';
                        if (arguments.length === 0)
                            return utf8Slice(this, 0, length);
                        return slowToString.apply(this, arguments);
                    };
                    Buffer.prototype.equals = function equals(b) {
                        if (!Buffer.isBuffer(b))
                            throw new TypeError('Argument must be a Buffer');
                        if (this === b)
                            return true;
                        return Buffer.compare(this, b) === 0;
                    };
                    Buffer.prototype.inspect = function inspect() {
                        var str = '';
                        var max = exports.INSPECT_MAX_BYTES;
                        if (this.length > 0) {
                            str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
                            if (this.length > max)
                                str += ' ... ';
                        }
                        return '<Buffer ' + str + '>';
                    };
                    Buffer.prototype.compare = function compare(b) {
                        if (!Buffer.isBuffer(b))
                            throw new TypeError('Argument must be a Buffer');
                        if (this === b)
                            return 0;
                        return Buffer.compare(this, b);
                    };
                    Buffer.prototype.indexOf = function indexOf(val, byteOffset) {
                        if (byteOffset > 2147483647)
                            byteOffset = 2147483647;
                        else if (byteOffset < -2147483648)
                            byteOffset = -2147483648;
                        byteOffset >>= 0;
                        if (this.length === 0)
                            return -1;
                        if (byteOffset >= this.length)
                            return -1;
                        // Negative offsets start from the end of the buffer
                        if (byteOffset < 0)
                            byteOffset = Math.max(this.length + byteOffset, 0);
                        if (typeof val === 'string') {
                            if (val.length === 0)
                                return -1;
                            // special case: looking for empty string always fails
                            return String.prototype.indexOf.call(this, val, byteOffset);
                        }
                        if (Buffer.isBuffer(val)) {
                            return arrayIndexOf(this, val, byteOffset);
                        }
                        if (typeof val === 'number') {
                            if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
                                return Uint8Array.prototype.indexOf.call(this, val, byteOffset);
                            }
                            return arrayIndexOf(this, [val], byteOffset);
                        }
                        function arrayIndexOf(arr, val, byteOffset) {
                            var foundIndex = -1;
                            for (var i = 0; byteOffset + i < arr.length; i++) {
                                if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
                                    if (foundIndex === -1)
                                        foundIndex = i;
                                    if (i - foundIndex + 1 === val.length)
                                        return byteOffset + foundIndex;
                                } else {
                                    foundIndex = -1;
                                }
                            }
                            return -1;
                        }
                        throw new TypeError('val must be string, number or Buffer');
                    };
                    // `get` is deprecated
                    Buffer.prototype.get = function get(offset) {
                        console.log('.get() is deprecated. Access using array indexes instead.');
                        return this.readUInt8(offset);
                    };
                    // `set` is deprecated
                    Buffer.prototype.set = function set(v, offset) {
                        console.log('.set() is deprecated. Access using array indexes instead.');
                        return this.writeUInt8(v, offset);
                    };
                    function hexWrite(buf, string, offset, length) {
                        offset = Number(offset) || 0;
                        var remaining = buf.length - offset;
                        if (!length) {
                            length = remaining;
                        } else {
                            length = Number(length);
                            if (length > remaining) {
                                length = remaining;
                            }
                        }
                        // must be an even number of digits
                        var strLen = string.length;
                        if (strLen % 2 !== 0)
                            throw new Error('Invalid hex string');
                        if (length > strLen / 2) {
                            length = strLen / 2;
                        }
                        for (var i = 0; i < length; i++) {
                            var parsed = parseInt(string.substr(i * 2, 2), 16);
                            if (isNaN(parsed))
                                throw new Error('Invalid hex string');
                            buf[offset + i] = parsed;
                        }
                        return i;
                    }
                    function utf8Write(buf, string, offset, length) {
                        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
                    }
                    function asciiWrite(buf, string, offset, length) {
                        return blitBuffer(asciiToBytes(string), buf, offset, length);
                    }
                    function binaryWrite(buf, string, offset, length) {
                        return asciiWrite(buf, string, offset, length);
                    }
                    function base64Write(buf, string, offset, length) {
                        return blitBuffer(base64ToBytes(string), buf, offset, length);
                    }
                    function ucs2Write(buf, string, offset, length) {
                        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
                    }
                    Buffer.prototype.write = function write(string, offset, length, encoding) {
                        // Buffer#write(string)
                        if (offset === undefined) {
                            encoding = 'utf8';
                            length = this.length;
                            offset = 0    // Buffer#write(string, encoding)
;
                        } else if (length === undefined && typeof offset === 'string') {
                            encoding = offset;
                            length = this.length;
                            offset = 0    // Buffer#write(string, offset[, length][, encoding])
;
                        } else if (isFinite(offset)) {
                            offset = offset | 0;
                            if (isFinite(length)) {
                                length = length | 0;
                                if (encoding === undefined)
                                    encoding = 'utf8';
                            } else {
                                encoding = length;
                                length = undefined;
                            }    // legacy write(string, encoding, offset, length) - remove in v0.13
                        } else {
                            var swap = encoding;
                            encoding = offset;
                            offset = length | 0;
                            length = swap;
                        }
                        var remaining = this.length - offset;
                        if (length === undefined || length > remaining)
                            length = remaining;
                        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                            throw new RangeError('attempt to write outside buffer bounds');
                        }
                        if (!encoding)
                            encoding = 'utf8';
                        var loweredCase = false;
                        for (;;) {
                            switch (encoding) {
                            case 'hex':
                                return hexWrite(this, string, offset, length);
                            case 'utf8':
                            case 'utf-8':
                                return utf8Write(this, string, offset, length);
                            case 'ascii':
                                return asciiWrite(this, string, offset, length);
                            case 'binary':
                                return binaryWrite(this, string, offset, length);
                            case 'base64':
                                // Warning: maxLength not taken into account in base64Write
                                return base64Write(this, string, offset, length);
                            case 'ucs2':
                            case 'ucs-2':
                            case 'utf16le':
                            case 'utf-16le':
                                return ucs2Write(this, string, offset, length);
                            default:
                                if (loweredCase)
                                    throw new TypeError('Unknown encoding: ' + encoding);
                                encoding = ('' + encoding).toLowerCase();
                                loweredCase = true;
                            }
                        }
                    };
                    Buffer.prototype.toJSON = function toJSON() {
                        return {
                            type: 'Buffer',
                            data: Array.prototype.slice.call(this._arr || this, 0)
                        };
                    };
                    function base64Slice(buf, start, end) {
                        if (start === 0 && end === buf.length) {
                            return base64.fromByteArray(buf);
                        } else {
                            return base64.fromByteArray(buf.slice(start, end));
                        }
                    }
                    function utf8Slice(buf, start, end) {
                        end = Math.min(buf.length, end);
                        var res = [];
                        var i = start;
                        while (i < end) {
                            var firstByte = buf[i];
                            var codePoint = null;
                            var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                            if (i + bytesPerSequence <= end) {
                                var secondByte, thirdByte, fourthByte, tempCodePoint;
                                switch (bytesPerSequence) {
                                case 1:
                                    if (firstByte < 128) {
                                        codePoint = firstByte;
                                    }
                                    break;
                                case 2:
                                    secondByte = buf[i + 1];
                                    if ((secondByte & 192) === 128) {
                                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                                        if (tempCodePoint > 127) {
                                            codePoint = tempCodePoint;
                                        }
                                    }
                                    break;
                                case 3:
                                    secondByte = buf[i + 1];
                                    thirdByte = buf[i + 2];
                                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                                            codePoint = tempCodePoint;
                                        }
                                    }
                                    break;
                                case 4:
                                    secondByte = buf[i + 1];
                                    thirdByte = buf[i + 2];
                                    fourthByte = buf[i + 3];
                                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                                            codePoint = tempCodePoint;
                                        }
                                    }
                                }
                            }
                            if (codePoint === null) {
                                // we did not generate a valid codePoint so insert a
                                // replacement char (U+FFFD) and advance only 1 byte
                                codePoint = 65533;
                                bytesPerSequence = 1;
                            } else if (codePoint > 65535) {
                                // encode to utf16 (surrogate pair dance)
                                codePoint -= 65536;
                                res.push(codePoint >>> 10 & 1023 | 55296);
                                codePoint = 56320 | codePoint & 1023;
                            }
                            res.push(codePoint);
                            i += bytesPerSequence;
                        }
                        return decodeCodePointsArray(res);
                    }
                    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
                    // the lowest limit is Chrome, with 0x10000 args.
                    // We go 1 magnitude less, for safety
                    var MAX_ARGUMENTS_LENGTH = 4096;
                    function decodeCodePointsArray(codePoints) {
                        var len = codePoints.length;
                        if (len <= MAX_ARGUMENTS_LENGTH) {
                            return String.fromCharCode.apply(String, codePoints)    // avoid extra slice()
;
                        }
                        // Decode in chunks to avoid "call stack size exceeded".
                        var res = '';
                        var i = 0;
                        while (i < len) {
                            res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
                        }
                        return res;
                    }
                    function asciiSlice(buf, start, end) {
                        var ret = '';
                        end = Math.min(buf.length, end);
                        for (var i = start; i < end; i++) {
                            ret += String.fromCharCode(buf[i] & 127);
                        }
                        return ret;
                    }
                    function binarySlice(buf, start, end) {
                        var ret = '';
                        end = Math.min(buf.length, end);
                        for (var i = start; i < end; i++) {
                            ret += String.fromCharCode(buf[i]);
                        }
                        return ret;
                    }
                    function hexSlice(buf, start, end) {
                        var len = buf.length;
                        if (!start || start < 0)
                            start = 0;
                        if (!end || end < 0 || end > len)
                            end = len;
                        var out = '';
                        for (var i = start; i < end; i++) {
                            out += toHex(buf[i]);
                        }
                        return out;
                    }
                    function utf16leSlice(buf, start, end) {
                        var bytes = buf.slice(start, end);
                        var res = '';
                        for (var i = 0; i < bytes.length; i += 2) {
                            res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
                        }
                        return res;
                    }
                    Buffer.prototype.slice = function slice(start, end) {
                        var len = this.length;
                        start = ~~start;
                        end = end === undefined ? len : ~~end;
                        if (start < 0) {
                            start += len;
                            if (start < 0)
                                start = 0;
                        } else if (start > len) {
                            start = len;
                        }
                        if (end < 0) {
                            end += len;
                            if (end < 0)
                                end = 0;
                        } else if (end > len) {
                            end = len;
                        }
                        if (end < start)
                            end = start;
                        var newBuf;
                        if (Buffer.TYPED_ARRAY_SUPPORT) {
                            newBuf = Buffer._augment(this.subarray(start, end));
                        } else {
                            var sliceLen = end - start;
                            newBuf = new Buffer(sliceLen, undefined);
                            for (var i = 0; i < sliceLen; i++) {
                                newBuf[i] = this[i + start];
                            }
                        }
                        if (newBuf.length)
                            newBuf.parent = this.parent || this;
                        return newBuf;
                    };
                    /*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
                    function checkOffset(offset, ext, length) {
                        if (offset % 1 !== 0 || offset < 0)
                            throw new RangeError('offset is not uint');
                        if (offset + ext > length)
                            throw new RangeError('Trying to access beyond buffer length');
                    }
                    Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
                        offset = offset | 0;
                        byteLength = byteLength | 0;
                        if (!noAssert)
                            checkOffset(offset, byteLength, this.length);
                        var val = this[offset];
                        var mul = 1;
                        var i = 0;
                        while (++i < byteLength && (mul *= 256)) {
                            val += this[offset + i] * mul;
                        }
                        return val;
                    };
                    Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
                        offset = offset | 0;
                        byteLength = byteLength | 0;
                        if (!noAssert) {
                            checkOffset(offset, byteLength, this.length);
                        }
                        var val = this[offset + --byteLength];
                        var mul = 1;
                        while (byteLength > 0 && (mul *= 256)) {
                            val += this[offset + --byteLength] * mul;
                        }
                        return val;
                    };
                    Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                        if (!noAssert)
                            checkOffset(offset, 1, this.length);
                        return this[offset];
                    };
                    Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                        if (!noAssert)
                            checkOffset(offset, 2, this.length);
                        return this[offset] | this[offset + 1] << 8;
                    };
                    Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                        if (!noAssert)
                            checkOffset(offset, 2, this.length);
                        return this[offset] << 8 | this[offset + 1];
                    };
                    Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                        if (!noAssert)
                            checkOffset(offset, 4, this.length);
                        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
                    };
                    Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                        if (!noAssert)
                            checkOffset(offset, 4, this.length);
                        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
                    };
                    Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
                        offset = offset | 0;
                        byteLength = byteLength | 0;
                        if (!noAssert)
                            checkOffset(offset, byteLength, this.length);
                        var val = this[offset];
                        var mul = 1;
                        var i = 0;
                        while (++i < byteLength && (mul *= 256)) {
                            val += this[offset + i] * mul;
                        }
                        mul *= 128;
                        if (val >= mul)
                            val -= Math.pow(2, 8 * byteLength);
                        return val;
                    };
                    Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
                        offset = offset | 0;
                        byteLength = byteLength | 0;
                        if (!noAssert)
                            checkOffset(offset, byteLength, this.length);
                        var i = byteLength;
                        var mul = 1;
                        var val = this[offset + --i];
                        while (i > 0 && (mul *= 256)) {
                            val += this[offset + --i] * mul;
                        }
                        mul *= 128;
                        if (val >= mul)
                            val -= Math.pow(2, 8 * byteLength);
                        return val;
                    };
                    Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                        if (!noAssert)
                            checkOffset(offset, 1, this.length);
                        if (!(this[offset] & 128))
                            return this[offset];
                        return (255 - this[offset] + 1) * -1;
                    };
                    Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                        if (!noAssert)
                            checkOffset(offset, 2, this.length);
                        var val = this[offset] | this[offset + 1] << 8;
                        return val & 32768 ? val | 4294901760 : val;
                    };
                    Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                        if (!noAssert)
                            checkOffset(offset, 2, this.length);
                        var val = this[offset + 1] | this[offset] << 8;
                        return val & 32768 ? val | 4294901760 : val;
                    };
                    Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                        if (!noAssert)
                            checkOffset(offset, 4, this.length);
                        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
                    };
                    Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                        if (!noAssert)
                            checkOffset(offset, 4, this.length);
                        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
                    };
                    Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                        if (!noAssert)
                            checkOffset(offset, 4, this.length);
                        return ieee754.read(this, offset, true, 23, 4);
                    };
                    Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                        if (!noAssert)
                            checkOffset(offset, 4, this.length);
                        return ieee754.read(this, offset, false, 23, 4);
                    };
                    Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                        if (!noAssert)
                            checkOffset(offset, 8, this.length);
                        return ieee754.read(this, offset, true, 52, 8);
                    };
                    Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                        if (!noAssert)
                            checkOffset(offset, 8, this.length);
                        return ieee754.read(this, offset, false, 52, 8);
                    };
                    function checkInt(buf, value, offset, ext, max, min) {
                        if (!Buffer.isBuffer(buf))
                            throw new TypeError('buffer must be a Buffer instance');
                        if (value > max || value < min)
                            throw new RangeError('value is out of bounds');
                        if (offset + ext > buf.length)
                            throw new RangeError('index out of range');
                    }
                    Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
                        value = +value;
                        offset = offset | 0;
                        byteLength = byteLength | 0;
                        if (!noAssert)
                            checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0);
                        var mul = 1;
                        var i = 0;
                        this[offset] = value & 255;
                        while (++i < byteLength && (mul *= 256)) {
                            this[offset + i] = value / mul & 255;
                        }
                        return offset + byteLength;
                    };
                    Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
                        value = +value;
                        offset = offset | 0;
                        byteLength = byteLength | 0;
                        if (!noAssert)
                            checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0);
                        var i = byteLength - 1;
                        var mul = 1;
                        this[offset + i] = value & 255;
                        while (--i >= 0 && (mul *= 256)) {
                            this[offset + i] = value / mul & 255;
                        }
                        return offset + byteLength;
                    };
                    Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                        value = +value;
                        offset = offset | 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 1, 255, 0);
                        if (!Buffer.TYPED_ARRAY_SUPPORT)
                            value = Math.floor(value);
                        this[offset] = value & 255;
                        return offset + 1;
                    };
                    function objectWriteUInt16(buf, value, offset, littleEndian) {
                        if (value < 0)
                            value = 65535 + value + 1;
                        for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
                            buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
                        }
                    }
                    Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                        value = +value;
                        offset = offset | 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 2, 65535, 0);
                        if (Buffer.TYPED_ARRAY_SUPPORT) {
                            this[offset] = value & 255;
                            this[offset + 1] = value >>> 8;
                        } else {
                            objectWriteUInt16(this, value, offset, true);
                        }
                        return offset + 2;
                    };
                    Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                        value = +value;
                        offset = offset | 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 2, 65535, 0);
                        if (Buffer.TYPED_ARRAY_SUPPORT) {
                            this[offset] = value >>> 8;
                            this[offset + 1] = value & 255;
                        } else {
                            objectWriteUInt16(this, value, offset, false);
                        }
                        return offset + 2;
                    };
                    function objectWriteUInt32(buf, value, offset, littleEndian) {
                        if (value < 0)
                            value = 4294967295 + value + 1;
                        for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
                            buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
                        }
                    }
                    Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                        value = +value;
                        offset = offset | 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 4, 4294967295, 0);
                        if (Buffer.TYPED_ARRAY_SUPPORT) {
                            this[offset + 3] = value >>> 24;
                            this[offset + 2] = value >>> 16;
                            this[offset + 1] = value >>> 8;
                            this[offset] = value & 255;
                        } else {
                            objectWriteUInt32(this, value, offset, true);
                        }
                        return offset + 4;
                    };
                    Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                        value = +value;
                        offset = offset | 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 4, 4294967295, 0);
                        if (Buffer.TYPED_ARRAY_SUPPORT) {
                            this[offset] = value >>> 24;
                            this[offset + 1] = value >>> 16;
                            this[offset + 2] = value >>> 8;
                            this[offset + 3] = value & 255;
                        } else {
                            objectWriteUInt32(this, value, offset, false);
                        }
                        return offset + 4;
                    };
                    Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
                        value = +value;
                        offset = offset | 0;
                        if (!noAssert) {
                            var limit = Math.pow(2, 8 * byteLength - 1);
                            checkInt(this, value, offset, byteLength, limit - 1, -limit);
                        }
                        var i = 0;
                        var mul = 1;
                        var sub = value < 0 ? 1 : 0;
                        this[offset] = value & 255;
                        while (++i < byteLength && (mul *= 256)) {
                            this[offset + i] = (value / mul >> 0) - sub & 255;
                        }
                        return offset + byteLength;
                    };
                    Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
                        value = +value;
                        offset = offset | 0;
                        if (!noAssert) {
                            var limit = Math.pow(2, 8 * byteLength - 1);
                            checkInt(this, value, offset, byteLength, limit - 1, -limit);
                        }
                        var i = byteLength - 1;
                        var mul = 1;
                        var sub = value < 0 ? 1 : 0;
                        this[offset + i] = value & 255;
                        while (--i >= 0 && (mul *= 256)) {
                            this[offset + i] = (value / mul >> 0) - sub & 255;
                        }
                        return offset + byteLength;
                    };
                    Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                        value = +value;
                        offset = offset | 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 1, 127, -128);
                        if (!Buffer.TYPED_ARRAY_SUPPORT)
                            value = Math.floor(value);
                        if (value < 0)
                            value = 255 + value + 1;
                        this[offset] = value & 255;
                        return offset + 1;
                    };
                    Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                        value = +value;
                        offset = offset | 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 2, 32767, -32768);
                        if (Buffer.TYPED_ARRAY_SUPPORT) {
                            this[offset] = value & 255;
                            this[offset + 1] = value >>> 8;
                        } else {
                            objectWriteUInt16(this, value, offset, true);
                        }
                        return offset + 2;
                    };
                    Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                        value = +value;
                        offset = offset | 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 2, 32767, -32768);
                        if (Buffer.TYPED_ARRAY_SUPPORT) {
                            this[offset] = value >>> 8;
                            this[offset + 1] = value & 255;
                        } else {
                            objectWriteUInt16(this, value, offset, false);
                        }
                        return offset + 2;
                    };
                    Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                        value = +value;
                        offset = offset | 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 4, 2147483647, -2147483648);
                        if (Buffer.TYPED_ARRAY_SUPPORT) {
                            this[offset] = value & 255;
                            this[offset + 1] = value >>> 8;
                            this[offset + 2] = value >>> 16;
                            this[offset + 3] = value >>> 24;
                        } else {
                            objectWriteUInt32(this, value, offset, true);
                        }
                        return offset + 4;
                    };
                    Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                        value = +value;
                        offset = offset | 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 4, 2147483647, -2147483648);
                        if (value < 0)
                            value = 4294967295 + value + 1;
                        if (Buffer.TYPED_ARRAY_SUPPORT) {
                            this[offset] = value >>> 24;
                            this[offset + 1] = value >>> 16;
                            this[offset + 2] = value >>> 8;
                            this[offset + 3] = value & 255;
                        } else {
                            objectWriteUInt32(this, value, offset, false);
                        }
                        return offset + 4;
                    };
                    function checkIEEE754(buf, value, offset, ext, max, min) {
                        if (value > max || value < min)
                            throw new RangeError('value is out of bounds');
                        if (offset + ext > buf.length)
                            throw new RangeError('index out of range');
                        if (offset < 0)
                            throw new RangeError('index out of range');
                    }
                    function writeFloat(buf, value, offset, littleEndian, noAssert) {
                        if (!noAssert) {
                            checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
                        }
                        ieee754.write(buf, value, offset, littleEndian, 23, 4);
                        return offset + 4;
                    }
                    Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                        return writeFloat(this, value, offset, true, noAssert);
                    };
                    Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                        return writeFloat(this, value, offset, false, noAssert);
                    };
                    function writeDouble(buf, value, offset, littleEndian, noAssert) {
                        if (!noAssert) {
                            checkIEEE754(buf, value, offset, 8, 1.7976931348623157e+308, -1.7976931348623157e+308);
                        }
                        ieee754.write(buf, value, offset, littleEndian, 52, 8);
                        return offset + 8;
                    }
                    Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                        return writeDouble(this, value, offset, true, noAssert);
                    };
                    Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                        return writeDouble(this, value, offset, false, noAssert);
                    };
                    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
                    Buffer.prototype.copy = function copy(target, targetStart, start, end) {
                        if (!start)
                            start = 0;
                        if (!end && end !== 0)
                            end = this.length;
                        if (targetStart >= target.length)
                            targetStart = target.length;
                        if (!targetStart)
                            targetStart = 0;
                        if (end > 0 && end < start)
                            end = start;
                        // Copy 0 bytes; we're done
                        if (end === start)
                            return 0;
                        if (target.length === 0 || this.length === 0)
                            return 0;
                        // Fatal error conditions
                        if (targetStart < 0) {
                            throw new RangeError('targetStart out of bounds');
                        }
                        if (start < 0 || start >= this.length)
                            throw new RangeError('sourceStart out of bounds');
                        if (end < 0)
                            throw new RangeError('sourceEnd out of bounds');
                        // Are we oob?
                        if (end > this.length)
                            end = this.length;
                        if (target.length - targetStart < end - start) {
                            end = target.length - targetStart + start;
                        }
                        var len = end - start;
                        var i;
                        if (this === target && start < targetStart && targetStart < end) {
                            // descending copy from end
                            for (i = len - 1; i >= 0; i--) {
                                target[i + targetStart] = this[i + start];
                            }
                        } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
                            // ascending copy from start
                            for (i = 0; i < len; i++) {
                                target[i + targetStart] = this[i + start];
                            }
                        } else {
                            target._set(this.subarray(start, start + len), targetStart);
                        }
                        return len;
                    };
                    // fill(value, start=0, end=buffer.length)
                    Buffer.prototype.fill = function fill(value, start, end) {
                        if (!value)
                            value = 0;
                        if (!start)
                            start = 0;
                        if (!end)
                            end = this.length;
                        if (end < start)
                            throw new RangeError('end < start');
                        // Fill 0 bytes; we're done
                        if (end === start)
                            return;
                        if (this.length === 0)
                            return;
                        if (start < 0 || start >= this.length)
                            throw new RangeError('start out of bounds');
                        if (end < 0 || end > this.length)
                            throw new RangeError('end out of bounds');
                        var i;
                        if (typeof value === 'number') {
                            for (i = start; i < end; i++) {
                                this[i] = value;
                            }
                        } else {
                            var bytes = utf8ToBytes(value.toString());
                            var len = bytes.length;
                            for (i = start; i < end; i++) {
                                this[i] = bytes[i % len];
                            }
                        }
                        return this;
                    };
                    /**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
                    Buffer.prototype.toArrayBuffer = function toArrayBuffer() {
                        if (typeof Uint8Array !== 'undefined') {
                            if (Buffer.TYPED_ARRAY_SUPPORT) {
                                return new Buffer(this).buffer;
                            } else {
                                var buf = new Uint8Array(this.length);
                                for (var i = 0, len = buf.length; i < len; i += 1) {
                                    buf[i] = this[i];
                                }
                                return buf.buffer;
                            }
                        } else {
                            throw new TypeError('Buffer.toArrayBuffer not supported in this browser');
                        }
                    };
                    // HELPER FUNCTIONS
                    // ================
                    var BP = Buffer.prototype;
                    /**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
                    Buffer._augment = function _augment(arr) {
                        arr.constructor = Buffer;
                        arr._isBuffer = true;
                        // save reference to original Uint8Array set method before overwriting
                        arr._set = arr.set;
                        // deprecated
                        arr.get = BP.get;
                        arr.set = BP.set;
                        arr.write = BP.write;
                        arr.toString = BP.toString;
                        arr.toLocaleString = BP.toString;
                        arr.toJSON = BP.toJSON;
                        arr.equals = BP.equals;
                        arr.compare = BP.compare;
                        arr.indexOf = BP.indexOf;
                        arr.copy = BP.copy;
                        arr.slice = BP.slice;
                        arr.readUIntLE = BP.readUIntLE;
                        arr.readUIntBE = BP.readUIntBE;
                        arr.readUInt8 = BP.readUInt8;
                        arr.readUInt16LE = BP.readUInt16LE;
                        arr.readUInt16BE = BP.readUInt16BE;
                        arr.readUInt32LE = BP.readUInt32LE;
                        arr.readUInt32BE = BP.readUInt32BE;
                        arr.readIntLE = BP.readIntLE;
                        arr.readIntBE = BP.readIntBE;
                        arr.readInt8 = BP.readInt8;
                        arr.readInt16LE = BP.readInt16LE;
                        arr.readInt16BE = BP.readInt16BE;
                        arr.readInt32LE = BP.readInt32LE;
                        arr.readInt32BE = BP.readInt32BE;
                        arr.readFloatLE = BP.readFloatLE;
                        arr.readFloatBE = BP.readFloatBE;
                        arr.readDoubleLE = BP.readDoubleLE;
                        arr.readDoubleBE = BP.readDoubleBE;
                        arr.writeUInt8 = BP.writeUInt8;
                        arr.writeUIntLE = BP.writeUIntLE;
                        arr.writeUIntBE = BP.writeUIntBE;
                        arr.writeUInt16LE = BP.writeUInt16LE;
                        arr.writeUInt16BE = BP.writeUInt16BE;
                        arr.writeUInt32LE = BP.writeUInt32LE;
                        arr.writeUInt32BE = BP.writeUInt32BE;
                        arr.writeIntLE = BP.writeIntLE;
                        arr.writeIntBE = BP.writeIntBE;
                        arr.writeInt8 = BP.writeInt8;
                        arr.writeInt16LE = BP.writeInt16LE;
                        arr.writeInt16BE = BP.writeInt16BE;
                        arr.writeInt32LE = BP.writeInt32LE;
                        arr.writeInt32BE = BP.writeInt32BE;
                        arr.writeFloatLE = BP.writeFloatLE;
                        arr.writeFloatBE = BP.writeFloatBE;
                        arr.writeDoubleLE = BP.writeDoubleLE;
                        arr.writeDoubleBE = BP.writeDoubleBE;
                        arr.fill = BP.fill;
                        arr.inspect = BP.inspect;
                        arr.toArrayBuffer = BP.toArrayBuffer;
                        return arr;
                    };
                    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
                    function base64clean(str) {
                        // Node strips out invalid characters like \n and \t from the string, base64-js does not
                        str = stringtrim(str).replace(INVALID_BASE64_RE, '');
                        // Node converts strings with length < 2 to ''
                        if (str.length < 2)
                            return '';
                        // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
                        while (str.length % 4 !== 0) {
                            str = str + '=';
                        }
                        return str;
                    }
                    function stringtrim(str) {
                        if (str.trim)
                            return str.trim();
                        return str.replace(/^\s+|\s+$/g, '');
                    }
                    function toHex(n) {
                        if (n < 16)
                            return '0' + n.toString(16);
                        return n.toString(16);
                    }
                    function utf8ToBytes(string, units) {
                        units = units || Infinity;
                        var codePoint;
                        var length = string.length;
                        var leadSurrogate = null;
                        var bytes = [];
                        for (var i = 0; i < length; i++) {
                            codePoint = string.charCodeAt(i);
                            // is surrogate component
                            if (codePoint > 55295 && codePoint < 57344) {
                                // last char was a lead
                                if (!leadSurrogate) {
                                    // no lead yet
                                    if (codePoint > 56319) {
                                        // unexpected trail
                                        if ((units -= 3) > -1)
                                            bytes.push(239, 191, 189);
                                        continue;
                                    } else if (i + 1 === length) {
                                        // unpaired lead
                                        if ((units -= 3) > -1)
                                            bytes.push(239, 191, 189);
                                        continue;
                                    }
                                    // valid lead
                                    leadSurrogate = codePoint;
                                    continue;
                                }
                                // 2 leads in a row
                                if (codePoint < 56320) {
                                    if ((units -= 3) > -1)
                                        bytes.push(239, 191, 189);
                                    leadSurrogate = codePoint;
                                    continue;
                                }
                                // valid surrogate pair
                                codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
                            } else if (leadSurrogate) {
                                // valid bmp char, but last char was a lead
                                if ((units -= 3) > -1)
                                    bytes.push(239, 191, 189);
                            }
                            leadSurrogate = null;
                            // encode utf8
                            if (codePoint < 128) {
                                if ((units -= 1) < 0)
                                    break;
                                bytes.push(codePoint);
                            } else if (codePoint < 2048) {
                                if ((units -= 2) < 0)
                                    break;
                                bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
                            } else if (codePoint < 65536) {
                                if ((units -= 3) < 0)
                                    break;
                                bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                            } else if (codePoint < 1114112) {
                                if ((units -= 4) < 0)
                                    break;
                                bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                            } else {
                                throw new Error('Invalid code point');
                            }
                        }
                        return bytes;
                    }
                    function asciiToBytes(str) {
                        var byteArray = [];
                        for (var i = 0; i < str.length; i++) {
                            // Node's code seems to be doing this and not & 0x7F..
                            byteArray.push(str.charCodeAt(i) & 255);
                        }
                        return byteArray;
                    }
                    function utf16leToBytes(str, units) {
                        var c, hi, lo;
                        var byteArray = [];
                        for (var i = 0; i < str.length; i++) {
                            if ((units -= 2) < 0)
                                break;
                            c = str.charCodeAt(i);
                            hi = c >> 8;
                            lo = c % 256;
                            byteArray.push(lo);
                            byteArray.push(hi);
                        }
                        return byteArray;
                    }
                    function base64ToBytes(str) {
                        return base64.toByteArray(base64clean(str));
                    }
                    function blitBuffer(src, dst, offset, length) {
                        for (var i = 0; i < length; i++) {
                            if (i + offset >= dst.length || i >= src.length)
                                break;
                            dst[i + offset] = src[i];
                        }
                        return i;
                    }
                }.call(this, typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}));
            },
            {
                '6': 6,
                '7': 7,
                '8': 8
            }
        ],
        6: [
            function (require, module, exports) {
                var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                ;
                (function (exports) {
                    'use strict';
                    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
                    var PLUS = '+'.charCodeAt(0);
                    var SLASH = '/'.charCodeAt(0);
                    var NUMBER = '0'.charCodeAt(0);
                    var LOWER = 'a'.charCodeAt(0);
                    var UPPER = 'A'.charCodeAt(0);
                    var PLUS_URL_SAFE = '-'.charCodeAt(0);
                    var SLASH_URL_SAFE = '_'.charCodeAt(0);
                    function decode(elt) {
                        var code = elt.charCodeAt(0);
                        if (code === PLUS || code === PLUS_URL_SAFE)
                            return 62;
                        // '+'
                        if (code === SLASH || code === SLASH_URL_SAFE)
                            return 63;
                        // '/'
                        if (code < NUMBER)
                            return -1;
                        //no match
                        if (code < NUMBER + 10)
                            return code - NUMBER + 26 + 26;
                        if (code < UPPER + 26)
                            return code - UPPER;
                        if (code < LOWER + 26)
                            return code - LOWER + 26;
                    }
                    function b64ToByteArray(b64) {
                        var i, j, l, tmp, placeHolders, arr;
                        if (b64.length % 4 > 0) {
                            throw new Error('Invalid string. Length must be a multiple of 4');
                        }
                        // the number of equal signs (place holders)
                        // if there are two placeholders, than the two characters before it
                        // represent one byte
                        // if there is only one, then the three characters before it represent 2 bytes
                        // this is just a cheap hack to not do indexOf twice
                        var len = b64.length;
                        placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0;
                        // base64 is 4/3 + up to two characters of the original data
                        arr = new Arr(b64.length * 3 / 4 - placeHolders);
                        // if there are placeholders, only get up to the last complete 4 chars
                        l = placeHolders > 0 ? b64.length - 4 : b64.length;
                        var L = 0;
                        function push(v) {
                            arr[L++] = v;
                        }
                        for (i = 0, j = 0; i < l; i += 4, j += 3) {
                            tmp = decode(b64.charAt(i)) << 18 | decode(b64.charAt(i + 1)) << 12 | decode(b64.charAt(i + 2)) << 6 | decode(b64.charAt(i + 3));
                            push((tmp & 16711680) >> 16);
                            push((tmp & 65280) >> 8);
                            push(tmp & 255);
                        }
                        if (placeHolders === 2) {
                            tmp = decode(b64.charAt(i)) << 2 | decode(b64.charAt(i + 1)) >> 4;
                            push(tmp & 255);
                        } else if (placeHolders === 1) {
                            tmp = decode(b64.charAt(i)) << 10 | decode(b64.charAt(i + 1)) << 4 | decode(b64.charAt(i + 2)) >> 2;
                            push(tmp >> 8 & 255);
                            push(tmp & 255);
                        }
                        return arr;
                    }
                    function uint8ToBase64(uint8) {
                        var i, extraBytes = uint8.length % 3,
                            // if we have 1 byte left, pad 2 bytes
                            output = '', temp, length;
                        function encode(num) {
                            return lookup.charAt(num);
                        }
                        function tripletToBase64(num) {
                            return encode(num >> 18 & 63) + encode(num >> 12 & 63) + encode(num >> 6 & 63) + encode(num & 63);
                        }
                        // go through the array every three bytes, we'll deal with trailing stuff later
                        for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
                            temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
                            output += tripletToBase64(temp);
                        }
                        // pad the end with zeros, but make sure to not forget the extra bytes
                        switch (extraBytes) {
                        case 1:
                            temp = uint8[uint8.length - 1];
                            output += encode(temp >> 2);
                            output += encode(temp << 4 & 63);
                            output += '==';
                            break;
                        case 2:
                            temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];
                            output += encode(temp >> 10);
                            output += encode(temp >> 4 & 63);
                            output += encode(temp << 2 & 63);
                            output += '=';
                            break;
                        }
                        return output;
                    }
                    exports.toByteArray = b64ToByteArray;
                    exports.fromByteArray = uint8ToBase64;
                }(typeof exports === 'undefined' ? this.base64js = {} : exports));
            },
            {}
        ],
        7: [
            function (require, module, exports) {
                exports.read = function (buffer, offset, isLE, mLen, nBytes) {
                    var e, m;
                    var eLen = nBytes * 8 - mLen - 1;
                    var eMax = (1 << eLen) - 1;
                    var eBias = eMax >> 1;
                    var nBits = -7;
                    var i = isLE ? nBytes - 1 : 0;
                    var d = isLE ? -1 : 1;
                    var s = buffer[offset + i];
                    i += d;
                    e = s & (1 << -nBits) - 1;
                    s >>= -nBits;
                    nBits += eLen;
                    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
                    }
                    m = e & (1 << -nBits) - 1;
                    e >>= -nBits;
                    nBits += mLen;
                    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
                    }
                    if (e === 0) {
                        e = 1 - eBias;
                    } else if (e === eMax) {
                        return m ? NaN : (s ? -1 : 1) * Infinity;
                    } else {
                        m = m + Math.pow(2, mLen);
                        e = e - eBias;
                    }
                    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
                };
                exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
                    var e, m, c;
                    var eLen = nBytes * 8 - mLen - 1;
                    var eMax = (1 << eLen) - 1;
                    var eBias = eMax >> 1;
                    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
                    var i = isLE ? 0 : nBytes - 1;
                    var d = isLE ? 1 : -1;
                    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
                    value = Math.abs(value);
                    if (isNaN(value) || value === Infinity) {
                        m = isNaN(value) ? 1 : 0;
                        e = eMax;
                    } else {
                        e = Math.floor(Math.log(value) / Math.LN2);
                        if (value * (c = Math.pow(2, -e)) < 1) {
                            e--;
                            c *= 2;
                        }
                        if (e + eBias >= 1) {
                            value += rt / c;
                        } else {
                            value += rt * Math.pow(2, 1 - eBias);
                        }
                        if (value * c >= 2) {
                            e++;
                            c /= 2;
                        }
                        if (e + eBias >= eMax) {
                            m = 0;
                            e = eMax;
                        } else if (e + eBias >= 1) {
                            m = (value * c - 1) * Math.pow(2, mLen);
                            e = e + eBias;
                        } else {
                            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                            e = 0;
                        }
                    }
                    for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
                    }
                    e = e << mLen | m;
                    eLen += mLen;
                    for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
                    }
                    buffer[offset + i - d] |= s * 128;
                };
            },
            {}
        ],
        8: [
            function (require, module, exports) {
                var toString = {}.toString;
                module.exports = Array.isArray || function (arr) {
                    return toString.call(arr) == '[object Array]';
                };
            },
            {}
        ],
        9: [
            function (require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.
                function EventEmitter() {
                    this._events = this._events || {};
                    this._maxListeners = this._maxListeners || undefined;
                }
                module.exports = EventEmitter;
                // Backwards-compat with node 0.10.x
                EventEmitter.EventEmitter = EventEmitter;
                EventEmitter.prototype._events = undefined;
                EventEmitter.prototype._maxListeners = undefined;
                // By default EventEmitters will print a warning if more than 10 listeners are
                // added to it. This is a useful default which helps finding memory leaks.
                EventEmitter.defaultMaxListeners = 10;
                // Obviously not all Emitters should be limited to 10. This function allows
                // that to be increased. Set to zero for unlimited.
                EventEmitter.prototype.setMaxListeners = function (n) {
                    if (!isNumber(n) || n < 0 || isNaN(n))
                        throw TypeError('n must be a positive number');
                    this._maxListeners = n;
                    return this;
                };
                EventEmitter.prototype.emit = function (type) {
                    var er, handler, len, args, i, listeners;
                    if (!this._events)
                        this._events = {};
                    // If there is no 'error' event listener then throw.
                    if (type === 'error') {
                        if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
                            er = arguments[1];
                            if (er instanceof Error) {
                                throw er;    // Unhandled 'error' event
                            }
                            throw TypeError('Uncaught, unspecified "error" event.');
                        }
                    }
                    handler = this._events[type];
                    if (isUndefined(handler))
                        return false;
                    if (isFunction(handler)) {
                        switch (arguments.length) {
                        // fast cases
                        case 1:
                            handler.call(this);
                            break;
                        case 2:
                            handler.call(this, arguments[1]);
                            break;
                        case 3:
                            handler.call(this, arguments[1], arguments[2]);
                            break;
                        // slower
                        default:
                            len = arguments.length;
                            args = new Array(len - 1);
                            for (i = 1; i < len; i++)
                                args[i - 1] = arguments[i];
                            handler.apply(this, args);
                        }
                    } else if (isObject(handler)) {
                        len = arguments.length;
                        args = new Array(len - 1);
                        for (i = 1; i < len; i++)
                            args[i - 1] = arguments[i];
                        listeners = handler.slice();
                        len = listeners.length;
                        for (i = 0; i < len; i++)
                            listeners[i].apply(this, args);
                    }
                    return true;
                };
                EventEmitter.prototype.addListener = function (type, listener) {
                    var m;
                    if (!isFunction(listener))
                        throw TypeError('listener must be a function');
                    if (!this._events)
                        this._events = {};
                    // To avoid recursion in the case that type === "newListener"! Before
                    // adding it to the listeners, first emit "newListener".
                    if (this._events.newListener)
                        this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);
                    if (!this._events[type])
                        // Optimize the case of one listener. Don't need the extra array object.
                        this._events[type] = listener;
                    else if (isObject(this._events[type]))
                        // If we've already got an array, just append.
                        this._events[type].push(listener);
                    else
                        // Adding the second element, need to change to array.
                        this._events[type] = [
                            this._events[type],
                            listener
                        ];
                    // Check for listener leak
                    if (isObject(this._events[type]) && !this._events[type].warned) {
                        var m;
                        if (!isUndefined(this._maxListeners)) {
                            m = this._maxListeners;
                        } else {
                            m = EventEmitter.defaultMaxListeners;
                        }
                        if (m && m > 0 && this._events[type].length > m) {
                            this._events[type].warned = true;
                            console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
                            if (typeof console.trace === 'function') {
                                // not supported in IE 10
                                console.trace();
                            }
                        }
                    }
                    return this;
                };
                EventEmitter.prototype.on = EventEmitter.prototype.addListener;
                EventEmitter.prototype.once = function (type, listener) {
                    if (!isFunction(listener))
                        throw TypeError('listener must be a function');
                    var fired = false;
                    function g() {
                        this.removeListener(type, g);
                        if (!fired) {
                            fired = true;
                            listener.apply(this, arguments);
                        }
                    }
                    g.listener = listener;
                    this.on(type, g);
                    return this;
                };
                // emits a 'removeListener' event iff the listener was removed
                EventEmitter.prototype.removeListener = function (type, listener) {
                    var list, position, length, i;
                    if (!isFunction(listener))
                        throw TypeError('listener must be a function');
                    if (!this._events || !this._events[type])
                        return this;
                    list = this._events[type];
                    length = list.length;
                    position = -1;
                    if (list === listener || isFunction(list.listener) && list.listener === listener) {
                        delete this._events[type];
                        if (this._events.removeListener)
                            this.emit('removeListener', type, listener);
                    } else if (isObject(list)) {
                        for (i = length; i-- > 0;) {
                            if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                                position = i;
                                break;
                            }
                        }
                        if (position < 0)
                            return this;
                        if (list.length === 1) {
                            list.length = 0;
                            delete this._events[type];
                        } else {
                            list.splice(position, 1);
                        }
                        if (this._events.removeListener)
                            this.emit('removeListener', type, listener);
                    }
                    return this;
                };
                EventEmitter.prototype.removeAllListeners = function (type) {
                    var key, listeners;
                    if (!this._events)
                        return this;
                    // not listening for removeListener, no need to emit
                    if (!this._events.removeListener) {
                        if (arguments.length === 0)
                            this._events = {};
                        else if (this._events[type])
                            delete this._events[type];
                        return this;
                    }
                    // emit removeListener for all listeners on all events
                    if (arguments.length === 0) {
                        for (key in this._events) {
                            if (key === 'removeListener')
                                continue;
                            this.removeAllListeners(key);
                        }
                        this.removeAllListeners('removeListener');
                        this._events = {};
                        return this;
                    }
                    listeners = this._events[type];
                    if (isFunction(listeners)) {
                        this.removeListener(type, listeners);
                    } else {
                        // LIFO order
                        while (listeners.length)
                            this.removeListener(type, listeners[listeners.length - 1]);
                    }
                    delete this._events[type];
                    return this;
                };
                EventEmitter.prototype.listeners = function (type) {
                    var ret;
                    if (!this._events || !this._events[type])
                        ret = [];
                    else if (isFunction(this._events[type]))
                        ret = [this._events[type]];
                    else
                        ret = this._events[type].slice();
                    return ret;
                };
                EventEmitter.listenerCount = function (emitter, type) {
                    var ret;
                    if (!emitter._events || !emitter._events[type])
                        ret = 0;
                    else if (isFunction(emitter._events[type]))
                        ret = 1;
                    else
                        ret = emitter._events[type].length;
                    return ret;
                };
                function isFunction(arg) {
                    return typeof arg === 'function';
                }
                function isNumber(arg) {
                    return typeof arg === 'number';
                }
                function isObject(arg) {
                    return typeof arg === 'object' && arg !== null;
                }
                function isUndefined(arg) {
                    return arg === void 0;
                }
            },
            {}
        ],
        10: [
            function (require, module, exports) {
                if (typeof Object.create === 'function') {
                    // implementation from standard node.js 'util' module
                    module.exports = function inherits(ctor, superCtor) {
                        ctor.super_ = superCtor;
                        ctor.prototype = Object.create(superCtor.prototype, {
                            constructor: {
                                value: ctor,
                                enumerable: false,
                                writable: true,
                                configurable: true
                            }
                        });
                    };
                } else {
                    // old school shim for old browsers
                    module.exports = function inherits(ctor, superCtor) {
                        ctor.super_ = superCtor;
                        var TempCtor = function () {
                        };
                        TempCtor.prototype = superCtor.prototype;
                        ctor.prototype = new TempCtor();
                        ctor.prototype.constructor = ctor;
                    };
                }
            },
            {}
        ],
        11: [
            function (require, module, exports) {
                /*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
                // The _isBuffer check is for Safari 5-7 support, because it's missing
                // Object.prototype.constructor. Remove this eventually
                module.exports = function (obj) {
                    return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
                };
                function isBuffer(obj) {
                    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
                }
                // For Node v0.10 support. Remove this eventually.
                function isSlowBuffer(obj) {
                    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
                }
            },
            {}
        ],
        12: [
            function (require, module, exports) {
                exports.endianness = function () {
                    return 'LE';
                };
                exports.hostname = function () {
                    if (typeof location !== 'undefined') {
                        return location.hostname;
                    } else
                        return '';
                };
                exports.loadavg = function () {
                    return [];
                };
                exports.uptime = function () {
                    return 0;
                };
                exports.freemem = function () {
                    return Number.MAX_VALUE;
                };
                exports.totalmem = function () {
                    return Number.MAX_VALUE;
                };
                exports.cpus = function () {
                    return [];
                };
                exports.type = function () {
                    return 'Browser';
                };
                exports.release = function () {
                    if (typeof navigator !== 'undefined') {
                        return navigator.appVersion;
                    }
                    return '';
                };
                exports.networkInterfaces = exports.getNetworkInterfaces = function () {
                    return {};
                };
                exports.arch = function () {
                    return 'javascript';
                };
                exports.platform = function () {
                    return 'browser';
                };
                exports.tmpdir = exports.tmpDir = function () {
                    return '/tmp';
                };
                exports.EOL = '\n';
            },
            {}
        ],
        13: [
            function (require, module, exports) {
                (function (process) {
                    // Copyright Joyent, Inc. and other Node contributors.
                    //
                    // Permission is hereby granted, free of charge, to any person obtaining a
                    // copy of this software and associated documentation files (the
                    // "Software"), to deal in the Software without restriction, including
                    // without limitation the rights to use, copy, modify, merge, publish,
                    // distribute, sublicense, and/or sell copies of the Software, and to permit
                    // persons to whom the Software is furnished to do so, subject to the
                    // following conditions:
                    //
                    // The above copyright notice and this permission notice shall be included
                    // in all copies or substantial portions of the Software.
                    //
                    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                    // USE OR OTHER DEALINGS IN THE SOFTWARE.
                    // resolves . and .. elements in a path array with directory names there
                    // must be no slashes, empty elements, or device names (c:\) in the array
                    // (so also no leading and trailing slashes - it does not distinguish
                    // relative and absolute paths)
                    function normalizeArray(parts, allowAboveRoot) {
                        // if the path tries to go above the root, `up` ends up > 0
                        var up = 0;
                        for (var i = parts.length - 1; i >= 0; i--) {
                            var last = parts[i];
                            if (last === '.') {
                                parts.splice(i, 1);
                            } else if (last === '..') {
                                parts.splice(i, 1);
                                up++;
                            } else if (up) {
                                parts.splice(i, 1);
                                up--;
                            }
                        }
                        // if the path is allowed to go above the root, restore leading ..s
                        if (allowAboveRoot) {
                            for (; up--; up) {
                                parts.unshift('..');
                            }
                        }
                        return parts;
                    }
                    // Split a filename into [root, dir, basename, ext], unix version
                    // 'root' is just a slash, or nothing.
                    var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
                    var splitPath = function (filename) {
                        return splitPathRe.exec(filename).slice(1);
                    };
                    // path.resolve([from ...], to)
                    // posix version
                    exports.resolve = function () {
                        var resolvedPath = '', resolvedAbsolute = false;
                        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                            var path = i >= 0 ? arguments[i] : process.cwd();
                            // Skip empty and invalid entries
                            if (typeof path !== 'string') {
                                throw new TypeError('Arguments to path.resolve must be strings');
                            } else if (!path) {
                                continue;
                            }
                            resolvedPath = path + '/' + resolvedPath;
                            resolvedAbsolute = path.charAt(0) === '/';
                        }
                        // At this point the path should be resolved to a full absolute path, but
                        // handle relative paths to be safe (might happen when process.cwd() fails)
                        // Normalize the path
                        resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
                            return !!p;
                        }), !resolvedAbsolute).join('/');
                        return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
                    };
                    // path.normalize(path)
                    // posix version
                    exports.normalize = function (path) {
                        var isAbsolute = exports.isAbsolute(path), trailingSlash = substr(path, -1) === '/';
                        // Normalize the path
                        path = normalizeArray(filter(path.split('/'), function (p) {
                            return !!p;
                        }), !isAbsolute).join('/');
                        if (!path && !isAbsolute) {
                            path = '.';
                        }
                        if (path && trailingSlash) {
                            path += '/';
                        }
                        return (isAbsolute ? '/' : '') + path;
                    };
                    // posix version
                    exports.isAbsolute = function (path) {
                        return path.charAt(0) === '/';
                    };
                    // posix version
                    exports.join = function () {
                        var paths = Array.prototype.slice.call(arguments, 0);
                        return exports.normalize(filter(paths, function (p, index) {
                            if (typeof p !== 'string') {
                                throw new TypeError('Arguments to path.join must be strings');
                            }
                            return p;
                        }).join('/'));
                    };
                    // path.relative(from, to)
                    // posix version
                    exports.relative = function (from, to) {
                        from = exports.resolve(from).substr(1);
                        to = exports.resolve(to).substr(1);
                        function trim(arr) {
                            var start = 0;
                            for (; start < arr.length; start++) {
                                if (arr[start] !== '')
                                    break;
                            }
                            var end = arr.length - 1;
                            for (; end >= 0; end--) {
                                if (arr[end] !== '')
                                    break;
                            }
                            if (start > end)
                                return [];
                            return arr.slice(start, end - start + 1);
                        }
                        var fromParts = trim(from.split('/'));
                        var toParts = trim(to.split('/'));
                        var length = Math.min(fromParts.length, toParts.length);
                        var samePartsLength = length;
                        for (var i = 0; i < length; i++) {
                            if (fromParts[i] !== toParts[i]) {
                                samePartsLength = i;
                                break;
                            }
                        }
                        var outputParts = [];
                        for (var i = samePartsLength; i < fromParts.length; i++) {
                            outputParts.push('..');
                        }
                        outputParts = outputParts.concat(toParts.slice(samePartsLength));
                        return outputParts.join('/');
                    };
                    exports.sep = '/';
                    exports.delimiter = ':';
                    exports.dirname = function (path) {
                        var result = splitPath(path), root = result[0], dir = result[1];
                        if (!root && !dir) {
                            // No dirname whatsoever
                            return '.';
                        }
                        if (dir) {
                            // It has a dirname, strip trailing slash
                            dir = dir.substr(0, dir.length - 1);
                        }
                        return root + dir;
                    };
                    exports.basename = function (path, ext) {
                        var f = splitPath(path)[2];
                        // TODO: make this comparison case-insensitive on windows?
                        if (ext && f.substr(-1 * ext.length) === ext) {
                            f = f.substr(0, f.length - ext.length);
                        }
                        return f;
                    };
                    exports.extname = function (path) {
                        return splitPath(path)[3];
                    };
                    function filter(xs, f) {
                        if (xs.filter)
                            return xs.filter(f);
                        var res = [];
                        for (var i = 0; i < xs.length; i++) {
                            if (f(xs[i], i, xs))
                                res.push(xs[i]);
                        }
                        return res;
                    }
                    // String.prototype.substr - negative index don't work in IE8
                    var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
                        return str.substr(start, len);
                    } : function (str, start, len) {
                        if (start < 0)
                            start = str.length + start;
                        return str.substr(start, len);
                    };
                }.call(this, require(14)));
            },
            { '14': 14 }
        ],
        14: [
            function (require, module, exports) {
                // shim for using process in browser
                var process = module.exports = {};
                // cached from whatever global is present so that test runners that stub it
                // don't break things.  But we need to wrap it in a try catch in case it is
                // wrapped in strict mode code which doesn't define any globals.  It's inside a
                // function because try/catches deoptimize in certain engines.
                var cachedSetTimeout;
                var cachedClearTimeout;
                function defaultSetTimout() {
                    throw new Error('setTimeout has not been defined');
                }
                function defaultClearTimeout() {
                    throw new Error('clearTimeout has not been defined');
                }
                (function () {
                    try {
                        if (typeof setTimeout === 'function') {
                            cachedSetTimeout = setTimeout;
                        } else {
                            cachedSetTimeout = defaultSetTimout;
                        }
                    } catch (e) {
                        cachedSetTimeout = defaultSetTimout;
                    }
                    try {
                        if (typeof clearTimeout === 'function') {
                            cachedClearTimeout = clearTimeout;
                        } else {
                            cachedClearTimeout = defaultClearTimeout;
                        }
                    } catch (e) {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                }());
                function runTimeout(fun) {
                    if (cachedSetTimeout === setTimeout) {
                        //normal enviroments in sane situations
                        return setTimeout(fun, 0);
                    }
                    // if setTimeout wasn't available but was latter defined
                    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                        cachedSetTimeout = setTimeout;
                        return setTimeout(fun, 0);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedSetTimeout(fun, 0);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                            return cachedSetTimeout.call(null, fun, 0);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                            return cachedSetTimeout.call(this, fun, 0);
                        }
                    }
                }
                function runClearTimeout(marker) {
                    if (cachedClearTimeout === clearTimeout) {
                        //normal enviroments in sane situations
                        return clearTimeout(marker);
                    }
                    // if clearTimeout wasn't available but was latter defined
                    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                        cachedClearTimeout = clearTimeout;
                        return clearTimeout(marker);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedClearTimeout(marker);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                            return cachedClearTimeout.call(null, marker);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                            return cachedClearTimeout.call(this, marker);
                        }
                    }
                }
                var queue = [];
                var draining = false;
                var currentQueue;
                var queueIndex = -1;
                function cleanUpNextTick() {
                    if (!draining || !currentQueue) {
                        return;
                    }
                    draining = false;
                    if (currentQueue.length) {
                        queue = currentQueue.concat(queue);
                    } else {
                        queueIndex = -1;
                    }
                    if (queue.length) {
                        drainQueue();
                    }
                }
                function drainQueue() {
                    if (draining) {
                        return;
                    }
                    var timeout = runTimeout(cleanUpNextTick);
                    draining = true;
                    var len = queue.length;
                    while (len) {
                        currentQueue = queue;
                        queue = [];
                        while (++queueIndex < len) {
                            if (currentQueue) {
                                currentQueue[queueIndex].run();
                            }
                        }
                        queueIndex = -1;
                        len = queue.length;
                    }
                    currentQueue = null;
                    draining = false;
                    runClearTimeout(timeout);
                }
                process.nextTick = function (fun) {
                    var args = new Array(arguments.length - 1);
                    if (arguments.length > 1) {
                        for (var i = 1; i < arguments.length; i++) {
                            args[i - 1] = arguments[i];
                        }
                    }
                    queue.push(new Item(fun, args));
                    if (queue.length === 1 && !draining) {
                        runTimeout(drainQueue);
                    }
                };
                // v8 likes predictible objects
                function Item(fun, array) {
                    this.fun = fun;
                    this.array = array;
                }
                Item.prototype.run = function () {
                    this.fun.apply(null, this.array);
                };
                process.title = 'browser';
                process.browser = true;
                process.env = {};
                process.argv = [];
                process.version = '';
                // empty string to avoid regexp issues
                process.versions = {};
                function noop() {
                }
                process.on = noop;
                process.addListener = noop;
                process.once = noop;
                process.off = noop;
                process.removeListener = noop;
                process.removeAllListeners = noop;
                process.emit = noop;
                process.binding = function (name) {
                    throw new Error('process.binding is not supported');
                };
                process.cwd = function () {
                    return '/';
                };
                process.chdir = function (dir) {
                    throw new Error('process.chdir is not supported');
                };
                process.umask = function () {
                    return 0;
                };
            },
            {}
        ],
        15: [
            function (require, module, exports) {
                module.exports = require(16);
            },
            { '16': 16 }
        ],
        16: [
            function (require, module, exports) {
                // a duplex stream is just a stream that is both readable and writable.
                // Since JS doesn't have multiple prototypal inheritance, this class
                // prototypally inherits from Readable, and then parasitically from
                // Writable.
                'use strict';
                /*<replacement>*/
                var objectKeys = Object.keys || function (obj) {
                    var keys = [];
                    for (var key in obj) {
                        keys.push(key);
                    }
                    return keys;
                };
                /*</replacement>*/
                module.exports = Duplex;
                /*<replacement>*/
                var processNextTick = require(25);
                /*</replacement>*/
                /*<replacement>*/
                var util = require(23);
                util.inherits = require(10);
                /*</replacement>*/
                var Readable = require(18);
                var Writable = require(20);
                util.inherits(Duplex, Readable);
                var keys = objectKeys(Writable.prototype);
                for (var v = 0; v < keys.length; v++) {
                    var method = keys[v];
                    if (!Duplex.prototype[method])
                        Duplex.prototype[method] = Writable.prototype[method];
                }
                function Duplex(options) {
                    if (!(this instanceof Duplex))
                        return new Duplex(options);
                    Readable.call(this, options);
                    Writable.call(this, options);
                    if (options && options.readable === false)
                        this.readable = false;
                    if (options && options.writable === false)
                        this.writable = false;
                    this.allowHalfOpen = true;
                    if (options && options.allowHalfOpen === false)
                        this.allowHalfOpen = false;
                    this.once('end', onend);
                }
                // the no-half-open enforcer
                function onend() {
                    // if we allow half-open state, or if the writable side ended,
                    // then we're ok.
                    if (this.allowHalfOpen || this._writableState.ended)
                        return;
                    // no more data can be written.
                    // But allow more writes to happen in this tick.
                    processNextTick(onEndNT, this);
                }
                function onEndNT(self) {
                    self.end();
                }
                function forEach(xs, f) {
                    for (var i = 0, l = xs.length; i < l; i++) {
                        f(xs[i], i);
                    }
                }
            },
            {
                '10': 10,
                '18': 18,
                '20': 20,
                '23': 23,
                '25': 25
            }
        ],
        17: [
            function (require, module, exports) {
                // a passthrough stream.
                // basically just the most minimal sort of Transform stream.
                // Every written chunk gets output as-is.
                'use strict';
                module.exports = PassThrough;
                var Transform = require(19);
                /*<replacement>*/
                var util = require(23);
                util.inherits = require(10);
                /*</replacement>*/
                util.inherits(PassThrough, Transform);
                function PassThrough(options) {
                    if (!(this instanceof PassThrough))
                        return new PassThrough(options);
                    Transform.call(this, options);
                }
                PassThrough.prototype._transform = function (chunk, encoding, cb) {
                    cb(null, chunk);
                };
            },
            {
                '10': 10,
                '19': 19,
                '23': 23
            }
        ],
        18: [
            function (require, module, exports) {
                (function (process) {
                    'use strict';
                    module.exports = Readable;
                    /*<replacement>*/
                    var processNextTick = require(25);
                    /*</replacement>*/
                    /*<replacement>*/
                    var isArray = require(24);
                    /*</replacement>*/
                    Readable.ReadableState = ReadableState;
                    /*<replacement>*/
                    var EE = require(9).EventEmitter;
                    var EElistenerCount = function (emitter, type) {
                        return emitter.listeners(type).length;
                    };
                    /*</replacement>*/
                    /*<replacement>*/
                    var Stream;
                    (function () {
                        try {
                            Stream = require('st' + 'ream');
                        } catch (_) {
                        } finally {
                            if (!Stream)
                                Stream = require(9).EventEmitter;
                        }
                    }());
                    /*</replacement>*/
                    var Buffer = require(5).Buffer;
                    /*<replacement>*/
                    var bufferShim = require(22);
                    /*</replacement>*/
                    /*<replacement>*/
                    var util = require(23);
                    util.inherits = require(10);
                    /*</replacement>*/
                    /*<replacement>*/
                    var debugUtil = require(4);
                    var debug = void 0;
                    if (debugUtil && debugUtil.debuglog) {
                        debug = debugUtil.debuglog('stream');
                    } else {
                        debug = function () {
                        };
                    }
                    /*</replacement>*/
                    var BufferList = require(21);
                    var StringDecoder;
                    util.inherits(Readable, Stream);
                    function prependListener(emitter, event, fn) {
                        if (typeof emitter.prependListener === 'function') {
                            return emitter.prependListener(event, fn);
                        } else {
                            // This is a hack to make sure that our error handler is attached before any
                            // userland ones.  NEVER DO THIS. This is here only because this code needs
                            // to continue to work with older versions of Node.js that do not include
                            // the prependListener() method. The goal is to eventually remove this hack.
                            if (!emitter._events || !emitter._events[event])
                                emitter.on(event, fn);
                            else if (isArray(emitter._events[event]))
                                emitter._events[event].unshift(fn);
                            else
                                emitter._events[event] = [
                                    fn,
                                    emitter._events[event]
                                ];
                        }
                    }
                    var Duplex;
                    function ReadableState(options, stream) {
                        Duplex = Duplex || require(16);
                        options = options || {};
                        // object stream flag. Used to make read(n) ignore n and to
                        // make all the buffer merging and length checks go away
                        this.objectMode = !!options.objectMode;
                        if (stream instanceof Duplex)
                            this.objectMode = this.objectMode || !!options.readableObjectMode;
                        // the point at which it stops calling _read() to fill the buffer
                        // Note: 0 is a valid value, means "don't call _read preemptively ever"
                        var hwm = options.highWaterMark;
                        var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                        this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
                        // cast to ints.
                        this.highWaterMark = ~~this.highWaterMark;
                        // A linked list is used to store data chunks instead of an array because the
                        // linked list can remove elements from the beginning faster than
                        // array.shift()
                        this.buffer = new BufferList();
                        this.length = 0;
                        this.pipes = null;
                        this.pipesCount = 0;
                        this.flowing = null;
                        this.ended = false;
                        this.endEmitted = false;
                        this.reading = false;
                        // a flag to be able to tell if the onwrite cb is called immediately,
                        // or on a later tick.  We set this to true at first, because any
                        // actions that shouldn't happen until "later" should generally also
                        // not happen before the first write call.
                        this.sync = true;
                        // whenever we return null, then we set a flag to say
                        // that we're awaiting a 'readable' event emission.
                        this.needReadable = false;
                        this.emittedReadable = false;
                        this.readableListening = false;
                        this.resumeScheduled = false;
                        // Crypto is kind of old and crusty.  Historically, its default string
                        // encoding is 'binary' so we have to make this configurable.
                        // Everything else in the universe uses 'utf8', though.
                        this.defaultEncoding = options.defaultEncoding || 'utf8';
                        // when piping, we only care about 'readable' events that happen
                        // after read()ing all the bytes and not getting any pushback.
                        this.ranOut = false;
                        // the number of writers that are awaiting a drain event in .pipe()s
                        this.awaitDrain = 0;
                        // if true, a maybeReadMore has been scheduled
                        this.readingMore = false;
                        this.decoder = null;
                        this.encoding = null;
                        if (options.encoding) {
                            if (!StringDecoder)
                                StringDecoder = require(32).StringDecoder;
                            this.decoder = new StringDecoder(options.encoding);
                            this.encoding = options.encoding;
                        }
                    }
                    var Duplex;
                    function Readable(options) {
                        Duplex = Duplex || require(16);
                        if (!(this instanceof Readable))
                            return new Readable(options);
                        this._readableState = new ReadableState(options, this);
                        // legacy
                        this.readable = true;
                        if (options && typeof options.read === 'function')
                            this._read = options.read;
                        Stream.call(this);
                    }
                    // Manually shove something into the read() buffer.
                    // This returns true if the highWaterMark has not been hit yet,
                    // similar to how Writable.write() returns true if you should
                    // write() some more.
                    Readable.prototype.push = function (chunk, encoding) {
                        var state = this._readableState;
                        if (!state.objectMode && typeof chunk === 'string') {
                            encoding = encoding || state.defaultEncoding;
                            if (encoding !== state.encoding) {
                                chunk = bufferShim.from(chunk, encoding);
                                encoding = '';
                            }
                        }
                        return readableAddChunk(this, state, chunk, encoding, false);
                    };
                    // Unshift should *always* be something directly out of read()
                    Readable.prototype.unshift = function (chunk) {
                        var state = this._readableState;
                        return readableAddChunk(this, state, chunk, '', true);
                    };
                    Readable.prototype.isPaused = function () {
                        return this._readableState.flowing === false;
                    };
                    function readableAddChunk(stream, state, chunk, encoding, addToFront) {
                        var er = chunkInvalid(state, chunk);
                        if (er) {
                            stream.emit('error', er);
                        } else if (chunk === null) {
                            state.reading = false;
                            onEofChunk(stream, state);
                        } else if (state.objectMode || chunk && chunk.length > 0) {
                            if (state.ended && !addToFront) {
                                var e = new Error('stream.push() after EOF');
                                stream.emit('error', e);
                            } else if (state.endEmitted && addToFront) {
                                var _e = new Error('stream.unshift() after end event');
                                stream.emit('error', _e);
                            } else {
                                var skipAdd;
                                if (state.decoder && !addToFront && !encoding) {
                                    chunk = state.decoder.write(chunk);
                                    skipAdd = !state.objectMode && chunk.length === 0;
                                }
                                if (!addToFront)
                                    state.reading = false;
                                // Don't add to the buffer if we've decoded to an empty string chunk and
                                // we're not in object mode
                                if (!skipAdd) {
                                    // if we want the data now, just emit it.
                                    if (state.flowing && state.length === 0 && !state.sync) {
                                        stream.emit('data', chunk);
                                        stream.read(0);
                                    } else {
                                        // update the buffer info.
                                        state.length += state.objectMode ? 1 : chunk.length;
                                        if (addToFront)
                                            state.buffer.unshift(chunk);
                                        else
                                            state.buffer.push(chunk);
                                        if (state.needReadable)
                                            emitReadable(stream);
                                    }
                                }
                                maybeReadMore(stream, state);
                            }
                        } else if (!addToFront) {
                            state.reading = false;
                        }
                        return needMoreData(state);
                    }
                    // if it's past the high water mark, we can push in some more.
                    // Also, if we have no data yet, we can stand some
                    // more bytes.  This is to work around cases where hwm=0,
                    // such as the repl.  Also, if the push() triggered a
                    // readable event, and the user called read(largeNumber) such that
                    // needReadable was set, then we ought to push more, so that another
                    // 'readable' event will be triggered.
                    function needMoreData(state) {
                        return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
                    }
                    // backwards compatibility.
                    Readable.prototype.setEncoding = function (enc) {
                        if (!StringDecoder)
                            StringDecoder = require(32).StringDecoder;
                        this._readableState.decoder = new StringDecoder(enc);
                        this._readableState.encoding = enc;
                        return this;
                    };
                    // Don't raise the hwm > 8MB
                    var MAX_HWM = 8388608;
                    function computeNewHighWaterMark(n) {
                        if (n >= MAX_HWM) {
                            n = MAX_HWM;
                        } else {
                            // Get the next highest power of 2 to prevent increasing hwm excessively in
                            // tiny amounts
                            n--;
                            n |= n >>> 1;
                            n |= n >>> 2;
                            n |= n >>> 4;
                            n |= n >>> 8;
                            n |= n >>> 16;
                            n++;
                        }
                        return n;
                    }
                    // This function is designed to be inlinable, so please take care when making
                    // changes to the function body.
                    function howMuchToRead(n, state) {
                        if (n <= 0 || state.length === 0 && state.ended)
                            return 0;
                        if (state.objectMode)
                            return 1;
                        if (n !== n) {
                            // Only flow one buffer at a time
                            if (state.flowing && state.length)
                                return state.buffer.head.data.length;
                            else
                                return state.length;
                        }
                        // If we're asking for more than the current hwm, then raise the hwm.
                        if (n > state.highWaterMark)
                            state.highWaterMark = computeNewHighWaterMark(n);
                        if (n <= state.length)
                            return n;
                        // Don't have enough
                        if (!state.ended) {
                            state.needReadable = true;
                            return 0;
                        }
                        return state.length;
                    }
                    // you can override either this method, or the async _read(n) below.
                    Readable.prototype.read = function (n) {
                        debug('read', n);
                        n = parseInt(n, 10);
                        var state = this._readableState;
                        var nOrig = n;
                        if (n !== 0)
                            state.emittedReadable = false;
                        // if we're doing read(0) to trigger a readable event, but we
                        // already have a bunch of data in the buffer, then just trigger
                        // the 'readable' event and move on.
                        if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                            debug('read: emitReadable', state.length, state.ended);
                            if (state.length === 0 && state.ended)
                                endReadable(this);
                            else
                                emitReadable(this);
                            return null;
                        }
                        n = howMuchToRead(n, state);
                        // if we've ended, and we're now clear, then finish it up.
                        if (n === 0 && state.ended) {
                            if (state.length === 0)
                                endReadable(this);
                            return null;
                        }
                        // All the actual chunk generation logic needs to be
                        // *below* the call to _read.  The reason is that in certain
                        // synthetic stream cases, such as passthrough streams, _read
                        // may be a completely synchronous operation which may change
                        // the state of the read buffer, providing enough data when
                        // before there was *not* enough.
                        //
                        // So, the steps are:
                        // 1. Figure out what the state of things will be after we do
                        // a read from the buffer.
                        //
                        // 2. If that resulting state will trigger a _read, then call _read.
                        // Note that this may be asynchronous, or synchronous.  Yes, it is
                        // deeply ugly to write APIs this way, but that still doesn't mean
                        // that the Readable class should behave improperly, as streams are
                        // designed to be sync/async agnostic.
                        // Take note if the _read call is sync or async (ie, if the read call
                        // has returned yet), so that we know whether or not it's safe to emit
                        // 'readable' etc.
                        //
                        // 3. Actually pull the requested chunks out of the buffer and return.
                        // if we need a readable event, then we need to do some reading.
                        var doRead = state.needReadable;
                        debug('need readable', doRead);
                        // if we currently have less than the highWaterMark, then also read some
                        if (state.length === 0 || state.length - n < state.highWaterMark) {
                            doRead = true;
                            debug('length less than watermark', doRead);
                        }
                        // however, if we've ended, then there's no point, and if we're already
                        // reading, then it's unnecessary.
                        if (state.ended || state.reading) {
                            doRead = false;
                            debug('reading or ended', doRead);
                        } else if (doRead) {
                            debug('do read');
                            state.reading = true;
                            state.sync = true;
                            // if the length is currently zero, then we *need* a readable event.
                            if (state.length === 0)
                                state.needReadable = true;
                            // call internal read method
                            this._read(state.highWaterMark);
                            state.sync = false;
                            // If _read pushed data synchronously, then `reading` will be false,
                            // and we need to re-evaluate how much data we can return to the user.
                            if (!state.reading)
                                n = howMuchToRead(nOrig, state);
                        }
                        var ret;
                        if (n > 0)
                            ret = fromList(n, state);
                        else
                            ret = null;
                        if (ret === null) {
                            state.needReadable = true;
                            n = 0;
                        } else {
                            state.length -= n;
                        }
                        if (state.length === 0) {
                            // If we have nothing in the buffer, then we want to know
                            // as soon as we *do* get something into the buffer.
                            if (!state.ended)
                                state.needReadable = true;
                            // If we tried to read() past the EOF, then emit end on the next tick.
                            if (nOrig !== n && state.ended)
                                endReadable(this);
                        }
                        if (ret !== null)
                            this.emit('data', ret);
                        return ret;
                    };
                    function chunkInvalid(state, chunk) {
                        var er = null;
                        if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
                            er = new TypeError('Invalid non-string/buffer chunk');
                        }
                        return er;
                    }
                    function onEofChunk(stream, state) {
                        if (state.ended)
                            return;
                        if (state.decoder) {
                            var chunk = state.decoder.end();
                            if (chunk && chunk.length) {
                                state.buffer.push(chunk);
                                state.length += state.objectMode ? 1 : chunk.length;
                            }
                        }
                        state.ended = true;
                        // emit 'readable' now to make sure it gets picked up.
                        emitReadable(stream);
                    }
                    // Don't emit readable right away in sync mode, because this can trigger
                    // another read() call => stack overflow.  This way, it might trigger
                    // a nextTick recursion warning, but that's not so bad.
                    function emitReadable(stream) {
                        var state = stream._readableState;
                        state.needReadable = false;
                        if (!state.emittedReadable) {
                            debug('emitReadable', state.flowing);
                            state.emittedReadable = true;
                            if (state.sync)
                                processNextTick(emitReadable_, stream);
                            else
                                emitReadable_(stream);
                        }
                    }
                    function emitReadable_(stream) {
                        debug('emit readable');
                        stream.emit('readable');
                        flow(stream);
                    }
                    // at this point, the user has presumably seen the 'readable' event,
                    // and called read() to consume some data.  that may have triggered
                    // in turn another _read(n) call, in which case reading = true if
                    // it's in progress.
                    // However, if we're not ended, or reading, and the length < hwm,
                    // then go ahead and try to read some more preemptively.
                    function maybeReadMore(stream, state) {
                        if (!state.readingMore) {
                            state.readingMore = true;
                            processNextTick(maybeReadMore_, stream, state);
                        }
                    }
                    function maybeReadMore_(stream, state) {
                        var len = state.length;
                        while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                            debug('maybeReadMore read 0');
                            stream.read(0);
                            if (len === state.length)
                                // didn't get any data, stop spinning.
                                break;
                            else
                                len = state.length;
                        }
                        state.readingMore = false;
                    }
                    // abstract method.  to be overridden in specific implementation classes.
                    // call cb(er, data) where data is <= n in length.
                    // for virtual (non-string, non-buffer) streams, "length" is somewhat
                    // arbitrary, and perhaps not very meaningful.
                    Readable.prototype._read = function (n) {
                        this.emit('error', new Error('not implemented'));
                    };
                    Readable.prototype.pipe = function (dest, pipeOpts) {
                        var src = this;
                        var state = this._readableState;
                        switch (state.pipesCount) {
                        case 0:
                            state.pipes = dest;
                            break;
                        case 1:
                            state.pipes = [
                                state.pipes,
                                dest
                            ];
                            break;
                        default:
                            state.pipes.push(dest);
                            break;
                        }
                        state.pipesCount += 1;
                        debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
                        var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
                        var endFn = doEnd ? onend : cleanup;
                        if (state.endEmitted)
                            processNextTick(endFn);
                        else
                            src.once('end', endFn);
                        dest.on('unpipe', onunpipe);
                        function onunpipe(readable) {
                            debug('onunpipe');
                            if (readable === src) {
                                cleanup();
                            }
                        }
                        function onend() {
                            debug('onend');
                            dest.end();
                        }
                        // when the dest drains, it reduces the awaitDrain counter
                        // on the source.  This would be more elegant with a .once()
                        // handler in flow(), but adding and removing repeatedly is
                        // too slow.
                        var ondrain = pipeOnDrain(src);
                        dest.on('drain', ondrain);
                        var cleanedUp = false;
                        function cleanup() {
                            debug('cleanup');
                            // cleanup event handlers once the pipe is broken
                            dest.removeListener('close', onclose);
                            dest.removeListener('finish', onfinish);
                            dest.removeListener('drain', ondrain);
                            dest.removeListener('error', onerror);
                            dest.removeListener('unpipe', onunpipe);
                            src.removeListener('end', onend);
                            src.removeListener('end', cleanup);
                            src.removeListener('data', ondata);
                            cleanedUp = true;
                            // if the reader is waiting for a drain event from this
                            // specific writer, then it would cause it to never start
                            // flowing again.
                            // So, if this is awaiting a drain, then we just call it now.
                            // If we don't know, then assume that we are waiting for one.
                            if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
                                ondrain();
                        }
                        // If the user pushes more data while we're writing to dest then we'll end up
                        // in ondata again. However, we only want to increase awaitDrain once because
                        // dest will only emit one 'drain' event for the multiple writes.
                        // => Introduce a guard on increasing awaitDrain.
                        var increasedAwaitDrain = false;
                        src.on('data', ondata);
                        function ondata(chunk) {
                            debug('ondata');
                            increasedAwaitDrain = false;
                            var ret = dest.write(chunk);
                            if (false === ret && !increasedAwaitDrain) {
                                // If the user unpiped during `dest.write()`, it is possible
                                // to get stuck in a permanently paused state if that write
                                // also returned false.
                                // => Check whether `dest` is still a piping destination.
                                if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                                    debug('false write response, pause', src._readableState.awaitDrain);
                                    src._readableState.awaitDrain++;
                                    increasedAwaitDrain = true;
                                }
                                src.pause();
                            }
                        }
                        // if the dest has an error, then stop piping into it.
                        // however, don't suppress the throwing behavior for this.
                        function onerror(er) {
                            debug('onerror', er);
                            unpipe();
                            dest.removeListener('error', onerror);
                            if (EElistenerCount(dest, 'error') === 0)
                                dest.emit('error', er);
                        }
                        // Make sure our error handler is attached before userland ones.
                        prependListener(dest, 'error', onerror);
                        // Both close and finish should trigger unpipe, but only once.
                        function onclose() {
                            dest.removeListener('finish', onfinish);
                            unpipe();
                        }
                        dest.once('close', onclose);
                        function onfinish() {
                            debug('onfinish');
                            dest.removeListener('close', onclose);
                            unpipe();
                        }
                        dest.once('finish', onfinish);
                        function unpipe() {
                            debug('unpipe');
                            src.unpipe(dest);
                        }
                        // tell the dest that it's being piped to
                        dest.emit('pipe', src);
                        // start the flow if it hasn't been started already.
                        if (!state.flowing) {
                            debug('pipe resume');
                            src.resume();
                        }
                        return dest;
                    };
                    function pipeOnDrain(src) {
                        return function () {
                            var state = src._readableState;
                            debug('pipeOnDrain', state.awaitDrain);
                            if (state.awaitDrain)
                                state.awaitDrain--;
                            if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                                state.flowing = true;
                                flow(src);
                            }
                        };
                    }
                    Readable.prototype.unpipe = function (dest) {
                        var state = this._readableState;
                        // if we're not piping anywhere, then do nothing.
                        if (state.pipesCount === 0)
                            return this;
                        // just one destination.  most common case.
                        if (state.pipesCount === 1) {
                            // passed in one, but it's not the right one.
                            if (dest && dest !== state.pipes)
                                return this;
                            if (!dest)
                                dest = state.pipes;
                            // got a match.
                            state.pipes = null;
                            state.pipesCount = 0;
                            state.flowing = false;
                            if (dest)
                                dest.emit('unpipe', this);
                            return this;
                        }
                        // slow case. multiple pipe destinations.
                        if (!dest) {
                            // remove all.
                            var dests = state.pipes;
                            var len = state.pipesCount;
                            state.pipes = null;
                            state.pipesCount = 0;
                            state.flowing = false;
                            for (var _i = 0; _i < len; _i++) {
                                dests[_i].emit('unpipe', this);
                            }
                            return this;
                        }
                        // try to find the right one.
                        var i = indexOf(state.pipes, dest);
                        if (i === -1)
                            return this;
                        state.pipes.splice(i, 1);
                        state.pipesCount -= 1;
                        if (state.pipesCount === 1)
                            state.pipes = state.pipes[0];
                        dest.emit('unpipe', this);
                        return this;
                    };
                    // set up data events if they are asked for
                    // Ensure readable listeners eventually get something
                    Readable.prototype.on = function (ev, fn) {
                        var res = Stream.prototype.on.call(this, ev, fn);
                        if (ev === 'data') {
                            // Start flowing on next tick if stream isn't explicitly paused
                            if (this._readableState.flowing !== false)
                                this.resume();
                        } else if (ev === 'readable') {
                            var state = this._readableState;
                            if (!state.endEmitted && !state.readableListening) {
                                state.readableListening = state.needReadable = true;
                                state.emittedReadable = false;
                                if (!state.reading) {
                                    processNextTick(nReadingNextTick, this);
                                } else if (state.length) {
                                    emitReadable(this, state);
                                }
                            }
                        }
                        return res;
                    };
                    Readable.prototype.addListener = Readable.prototype.on;
                    function nReadingNextTick(self) {
                        debug('readable nexttick read 0');
                        self.read(0);
                    }
                    // pause() and resume() are remnants of the legacy readable stream API
                    // If the user uses them, then switch into old mode.
                    Readable.prototype.resume = function () {
                        var state = this._readableState;
                        if (!state.flowing) {
                            debug('resume');
                            state.flowing = true;
                            resume(this, state);
                        }
                        return this;
                    };
                    function resume(stream, state) {
                        if (!state.resumeScheduled) {
                            state.resumeScheduled = true;
                            processNextTick(resume_, stream, state);
                        }
                    }
                    function resume_(stream, state) {
                        if (!state.reading) {
                            debug('resume read 0');
                            stream.read(0);
                        }
                        state.resumeScheduled = false;
                        state.awaitDrain = 0;
                        stream.emit('resume');
                        flow(stream);
                        if (state.flowing && !state.reading)
                            stream.read(0);
                    }
                    Readable.prototype.pause = function () {
                        debug('call pause flowing=%j', this._readableState.flowing);
                        if (false !== this._readableState.flowing) {
                            debug('pause');
                            this._readableState.flowing = false;
                            this.emit('pause');
                        }
                        return this;
                    };
                    function flow(stream) {
                        var state = stream._readableState;
                        debug('flow', state.flowing);
                        while (state.flowing && stream.read() !== null) {
                        }
                    }
                    // wrap an old-style stream as the async data source.
                    // This is *not* part of the readable stream interface.
                    // It is an ugly unfortunate mess of history.
                    Readable.prototype.wrap = function (stream) {
                        var state = this._readableState;
                        var paused = false;
                        var self = this;
                        stream.on('end', function () {
                            debug('wrapped end');
                            if (state.decoder && !state.ended) {
                                var chunk = state.decoder.end();
                                if (chunk && chunk.length)
                                    self.push(chunk);
                            }
                            self.push(null);
                        });
                        stream.on('data', function (chunk) {
                            debug('wrapped data');
                            if (state.decoder)
                                chunk = state.decoder.write(chunk);
                            // don't skip over falsy values in objectMode
                            if (state.objectMode && (chunk === null || chunk === undefined))
                                return;
                            else if (!state.objectMode && (!chunk || !chunk.length))
                                return;
                            var ret = self.push(chunk);
                            if (!ret) {
                                paused = true;
                                stream.pause();
                            }
                        });
                        // proxy all the other methods.
                        // important when wrapping filters and duplexes.
                        for (var i in stream) {
                            if (this[i] === undefined && typeof stream[i] === 'function') {
                                this[i] = function (method) {
                                    return function () {
                                        return stream[method].apply(stream, arguments);
                                    };
                                }(i);
                            }
                        }
                        // proxy certain important events.
                        var events = [
                            'error',
                            'close',
                            'destroy',
                            'pause',
                            'resume'
                        ];
                        forEach(events, function (ev) {
                            stream.on(ev, self.emit.bind(self, ev));
                        });
                        // when we try to consume some more bytes, simply unpause the
                        // underlying stream.
                        self._read = function (n) {
                            debug('wrapped _read', n);
                            if (paused) {
                                paused = false;
                                stream.resume();
                            }
                        };
                        return self;
                    };
                    // exposed for testing purposes only.
                    Readable._fromList = fromList;
                    // Pluck off n bytes from an array of buffers.
                    // Length is the combined lengths of all the buffers in the list.
                    // This function is designed to be inlinable, so please take care when making
                    // changes to the function body.
                    function fromList(n, state) {
                        // nothing buffered
                        if (state.length === 0)
                            return null;
                        var ret;
                        if (state.objectMode)
                            ret = state.buffer.shift();
                        else if (!n || n >= state.length) {
                            // read it all, truncate the list
                            if (state.decoder)
                                ret = state.buffer.join('');
                            else if (state.buffer.length === 1)
                                ret = state.buffer.head.data;
                            else
                                ret = state.buffer.concat(state.length);
                            state.buffer.clear();
                        } else {
                            // read part of list
                            ret = fromListPartial(n, state.buffer, state.decoder);
                        }
                        return ret;
                    }
                    // Extracts only enough buffered data to satisfy the amount requested.
                    // This function is designed to be inlinable, so please take care when making
                    // changes to the function body.
                    function fromListPartial(n, list, hasStrings) {
                        var ret;
                        if (n < list.head.data.length) {
                            // slice is the same for buffers and strings
                            ret = list.head.data.slice(0, n);
                            list.head.data = list.head.data.slice(n);
                        } else if (n === list.head.data.length) {
                            // first chunk is a perfect match
                            ret = list.shift();
                        } else {
                            // result spans more than one buffer
                            ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
                        }
                        return ret;
                    }
                    // Copies a specified amount of characters from the list of buffered data
                    // chunks.
                    // This function is designed to be inlinable, so please take care when making
                    // changes to the function body.
                    function copyFromBufferString(n, list) {
                        var p = list.head;
                        var c = 1;
                        var ret = p.data;
                        n -= ret.length;
                        while (p = p.next) {
                            var str = p.data;
                            var nb = n > str.length ? str.length : n;
                            if (nb === str.length)
                                ret += str;
                            else
                                ret += str.slice(0, n);
                            n -= nb;
                            if (n === 0) {
                                if (nb === str.length) {
                                    ++c;
                                    if (p.next)
                                        list.head = p.next;
                                    else
                                        list.head = list.tail = null;
                                } else {
                                    list.head = p;
                                    p.data = str.slice(nb);
                                }
                                break;
                            }
                            ++c;
                        }
                        list.length -= c;
                        return ret;
                    }
                    // Copies a specified amount of bytes from the list of buffered data chunks.
                    // This function is designed to be inlinable, so please take care when making
                    // changes to the function body.
                    function copyFromBuffer(n, list) {
                        var ret = bufferShim.allocUnsafe(n);
                        var p = list.head;
                        var c = 1;
                        p.data.copy(ret);
                        n -= p.data.length;
                        while (p = p.next) {
                            var buf = p.data;
                            var nb = n > buf.length ? buf.length : n;
                            buf.copy(ret, ret.length - n, 0, nb);
                            n -= nb;
                            if (n === 0) {
                                if (nb === buf.length) {
                                    ++c;
                                    if (p.next)
                                        list.head = p.next;
                                    else
                                        list.head = list.tail = null;
                                } else {
                                    list.head = p;
                                    p.data = buf.slice(nb);
                                }
                                break;
                            }
                            ++c;
                        }
                        list.length -= c;
                        return ret;
                    }
                    function endReadable(stream) {
                        var state = stream._readableState;
                        // If we get here before consuming all the bytes, then that is a
                        // bug in node.  Should never happen.
                        if (state.length > 0)
                            throw new Error('"endReadable()" called on non-empty stream');
                        if (!state.endEmitted) {
                            state.ended = true;
                            processNextTick(endReadableNT, state, stream);
                        }
                    }
                    function endReadableNT(state, stream) {
                        // Check that we didn't get one last unshift.
                        if (!state.endEmitted && state.length === 0) {
                            state.endEmitted = true;
                            stream.readable = false;
                            stream.emit('end');
                        }
                    }
                    function forEach(xs, f) {
                        for (var i = 0, l = xs.length; i < l; i++) {
                            f(xs[i], i);
                        }
                    }
                    function indexOf(xs, x) {
                        for (var i = 0, l = xs.length; i < l; i++) {
                            if (xs[i] === x)
                                return i;
                        }
                        return -1;
                    }
                }.call(this, require(14)));
            },
            {
                '10': 10,
                '14': 14,
                '16': 16,
                '21': 21,
                '22': 22,
                '23': 23,
                '24': 24,
                '25': 25,
                '32': 32,
                '4': 4,
                '5': 5,
                '9': 9
            }
        ],
        19: [
            function (require, module, exports) {
                // a transform stream is a readable/writable stream where you do
                // something with the data.  Sometimes it's called a "filter",
                // but that's not a great name for it, since that implies a thing where
                // some bits pass through, and others are simply ignored.  (That would
                // be a valid example of a transform, of course.)
                //
                // While the output is causally related to the input, it's not a
                // necessarily symmetric or synchronous transformation.  For example,
                // a zlib stream might take multiple plain-text writes(), and then
                // emit a single compressed chunk some time in the future.
                //
                // Here's how this works:
                //
                // The Transform stream has all the aspects of the readable and writable
                // stream classes.  When you write(chunk), that calls _write(chunk,cb)
                // internally, and returns false if there's a lot of pending writes
                // buffered up.  When you call read(), that calls _read(n) until
                // there's enough pending readable data buffered up.
                //
                // In a transform stream, the written data is placed in a buffer.  When
                // _read(n) is called, it transforms the queued up data, calling the
                // buffered _write cb's as it consumes chunks.  If consuming a single
                // written chunk would result in multiple output chunks, then the first
                // outputted bit calls the readcb, and subsequent chunks just go into
                // the read buffer, and will cause it to emit 'readable' if necessary.
                //
                // This way, back-pressure is actually determined by the reading side,
                // since _read has to be called to start processing a new chunk.  However,
                // a pathological inflate type of transform can cause excessive buffering
                // here.  For example, imagine a stream where every byte of input is
                // interpreted as an integer from 0-255, and then results in that many
                // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
                // 1kb of data being output.  In this case, you could write a very small
                // amount of input, and end up with a very large amount of output.  In
                // such a pathological inflating mechanism, there'd be no way to tell
                // the system to stop doing the transform.  A single 4MB write could
                // cause the system to run out of memory.
                //
                // However, even in such a pathological case, only a single written chunk
                // would be consumed, and then the rest would wait (un-transformed) until
                // the results of the previous transformed chunk were consumed.
                'use strict';
                module.exports = Transform;
                var Duplex = require(16);
                /*<replacement>*/
                var util = require(23);
                util.inherits = require(10);
                /*</replacement>*/
                util.inherits(Transform, Duplex);
                function TransformState(stream) {
                    this.afterTransform = function (er, data) {
                        return afterTransform(stream, er, data);
                    };
                    this.needTransform = false;
                    this.transforming = false;
                    this.writecb = null;
                    this.writechunk = null;
                    this.writeencoding = null;
                }
                function afterTransform(stream, er, data) {
                    var ts = stream._transformState;
                    ts.transforming = false;
                    var cb = ts.writecb;
                    if (!cb)
                        return stream.emit('error', new Error('no writecb in Transform class'));
                    ts.writechunk = null;
                    ts.writecb = null;
                    if (data !== null && data !== undefined)
                        stream.push(data);
                    cb(er);
                    var rs = stream._readableState;
                    rs.reading = false;
                    if (rs.needReadable || rs.length < rs.highWaterMark) {
                        stream._read(rs.highWaterMark);
                    }
                }
                function Transform(options) {
                    if (!(this instanceof Transform))
                        return new Transform(options);
                    Duplex.call(this, options);
                    this._transformState = new TransformState(this);
                    // when the writable side finishes, then flush out anything remaining.
                    var stream = this;
                    // start out asking for a readable event once data is transformed.
                    this._readableState.needReadable = true;
                    // we have implemented the _read method, and done the other things
                    // that Readable wants before the first _read call, so unset the
                    // sync guard flag.
                    this._readableState.sync = false;
                    if (options) {
                        if (typeof options.transform === 'function')
                            this._transform = options.transform;
                        if (typeof options.flush === 'function')
                            this._flush = options.flush;
                    }
                    this.once('prefinish', function () {
                        if (typeof this._flush === 'function')
                            this._flush(function (er) {
                                done(stream, er);
                            });
                        else
                            done(stream);
                    });
                }
                Transform.prototype.push = function (chunk, encoding) {
                    this._transformState.needTransform = false;
                    return Duplex.prototype.push.call(this, chunk, encoding);
                };
                // This is the part where you do stuff!
                // override this function in implementation classes.
                // 'chunk' is an input chunk.
                //
                // Call `push(newChunk)` to pass along transformed output
                // to the readable side.  You may call 'push' zero or more times.
                //
                // Call `cb(err)` when you are done with this chunk.  If you pass
                // an error, then that'll put the hurt on the whole operation.  If you
                // never call cb(), then you'll never get another chunk.
                Transform.prototype._transform = function (chunk, encoding, cb) {
                    throw new Error('Not implemented');
                };
                Transform.prototype._write = function (chunk, encoding, cb) {
                    var ts = this._transformState;
                    ts.writecb = cb;
                    ts.writechunk = chunk;
                    ts.writeencoding = encoding;
                    if (!ts.transforming) {
                        var rs = this._readableState;
                        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
                            this._read(rs.highWaterMark);
                    }
                };
                // Doesn't matter what the args are here.
                // _transform does all the work.
                // That we got here means that the readable side wants more data.
                Transform.prototype._read = function (n) {
                    var ts = this._transformState;
                    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                        ts.transforming = true;
                        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
                    } else {
                        // mark that we need a transform, so that any data that comes in
                        // will get processed, now that we've asked for it.
                        ts.needTransform = true;
                    }
                };
                function done(stream, er) {
                    if (er)
                        return stream.emit('error', er);
                    // if there's nothing in the write buffer, then that means
                    // that nothing more will ever be provided
                    var ws = stream._writableState;
                    var ts = stream._transformState;
                    if (ws.length)
                        throw new Error('Calling transform done when ws.length != 0');
                    if (ts.transforming)
                        throw new Error('Calling transform done when still transforming');
                    return stream.push(null);
                }
            },
            {
                '10': 10,
                '16': 16,
                '23': 23
            }
        ],
        20: [
            function (require, module, exports) {
                (function (process) {
                    // A bit simpler than readable streams.
                    // Implement an async ._write(chunk, encoding, cb), and it'll handle all
                    // the drain event emission and buffering.
                    'use strict';
                    module.exports = Writable;
                    /*<replacement>*/
                    var processNextTick = require(25);
                    /*</replacement>*/
                    /*<replacement>*/
                    var asyncWrite = !process.browser && [
                        'v0.10',
                        'v0.9.'
                    ].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
                    /*</replacement>*/
                    Writable.WritableState = WritableState;
                    /*<replacement>*/
                    var util = require(23);
                    util.inherits = require(10);
                    /*</replacement>*/
                    /*<replacement>*/
                    var internalUtil = { deprecate: require(26) };
                    /*</replacement>*/
                    /*<replacement>*/
                    var Stream;
                    (function () {
                        try {
                            Stream = require('st' + 'ream');
                        } catch (_) {
                        } finally {
                            if (!Stream)
                                Stream = require(9).EventEmitter;
                        }
                    }());
                    /*</replacement>*/
                    var Buffer = require(5).Buffer;
                    /*<replacement>*/
                    var bufferShim = require(22);
                    /*</replacement>*/
                    util.inherits(Writable, Stream);
                    function nop() {
                    }
                    function WriteReq(chunk, encoding, cb) {
                        this.chunk = chunk;
                        this.encoding = encoding;
                        this.callback = cb;
                        this.next = null;
                    }
                    var Duplex;
                    function WritableState(options, stream) {
                        Duplex = Duplex || require(16);
                        options = options || {};
                        // object stream flag to indicate whether or not this stream
                        // contains buffers or objects.
                        this.objectMode = !!options.objectMode;
                        if (stream instanceof Duplex)
                            this.objectMode = this.objectMode || !!options.writableObjectMode;
                        // the point at which write() starts returning false
                        // Note: 0 is a valid value, means that we always return false if
                        // the entire buffer is not flushed immediately on write()
                        var hwm = options.highWaterMark;
                        var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                        this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
                        // cast to ints.
                        this.highWaterMark = ~~this.highWaterMark;
                        this.needDrain = false;
                        // at the start of calling end()
                        this.ending = false;
                        // when end() has been called, and returned
                        this.ended = false;
                        // when 'finish' is emitted
                        this.finished = false;
                        // should we decode strings into buffers before passing to _write?
                        // this is here so that some node-core streams can optimize string
                        // handling at a lower level.
                        var noDecode = options.decodeStrings === false;
                        this.decodeStrings = !noDecode;
                        // Crypto is kind of old and crusty.  Historically, its default string
                        // encoding is 'binary' so we have to make this configurable.
                        // Everything else in the universe uses 'utf8', though.
                        this.defaultEncoding = options.defaultEncoding || 'utf8';
                        // not an actual buffer we keep track of, but a measurement
                        // of how much we're waiting to get pushed to some underlying
                        // socket or file.
                        this.length = 0;
                        // a flag to see when we're in the middle of a write.
                        this.writing = false;
                        // when true all writes will be buffered until .uncork() call
                        this.corked = 0;
                        // a flag to be able to tell if the onwrite cb is called immediately,
                        // or on a later tick.  We set this to true at first, because any
                        // actions that shouldn't happen until "later" should generally also
                        // not happen before the first write call.
                        this.sync = true;
                        // a flag to know if we're processing previously buffered items, which
                        // may call the _write() callback in the same tick, so that we don't
                        // end up in an overlapped onwrite situation.
                        this.bufferProcessing = false;
                        // the callback that's passed to _write(chunk,cb)
                        this.onwrite = function (er) {
                            onwrite(stream, er);
                        };
                        // the callback that the user supplies to write(chunk,encoding,cb)
                        this.writecb = null;
                        // the amount that is being written when _write is called.
                        this.writelen = 0;
                        this.bufferedRequest = null;
                        this.lastBufferedRequest = null;
                        // number of pending user-supplied write callbacks
                        // this must be 0 before 'finish' can be emitted
                        this.pendingcb = 0;
                        // emit prefinish if the only thing we're waiting for is _write cbs
                        // This is relevant for synchronous Transform streams
                        this.prefinished = false;
                        // True if the error was already emitted and should not be thrown again
                        this.errorEmitted = false;
                        // count buffered requests
                        this.bufferedRequestCount = 0;
                        // allocate the first CorkedRequest, there is always
                        // one allocated and free to use, and we maintain at most two
                        this.corkedRequestsFree = new CorkedRequest(this);
                    }
                    WritableState.prototype.getBuffer = function writableStateGetBuffer() {
                        var current = this.bufferedRequest;
                        var out = [];
                        while (current) {
                            out.push(current);
                            current = current.next;
                        }
                        return out;
                    };
                    (function () {
                        try {
                            Object.defineProperty(WritableState.prototype, 'buffer', {
                                get: internalUtil.deprecate(function () {
                                    return this.getBuffer();
                                }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
                            });
                        } catch (_) {
                        }
                    }());
                    var Duplex;
                    function Writable(options) {
                        Duplex = Duplex || require(16);
                        // Writable ctor is applied to Duplexes, though they're not
                        // instanceof Writable, they're instanceof Readable.
                        if (!(this instanceof Writable) && !(this instanceof Duplex))
                            return new Writable(options);
                        this._writableState = new WritableState(options, this);
                        // legacy.
                        this.writable = true;
                        if (options) {
                            if (typeof options.write === 'function')
                                this._write = options.write;
                            if (typeof options.writev === 'function')
                                this._writev = options.writev;
                        }
                        Stream.call(this);
                    }
                    // Otherwise people can pipe Writable streams, which is just wrong.
                    Writable.prototype.pipe = function () {
                        this.emit('error', new Error('Cannot pipe, not readable'));
                    };
                    function writeAfterEnd(stream, cb) {
                        var er = new Error('write after end');
                        // TODO: defer error events consistently everywhere, not just the cb
                        stream.emit('error', er);
                        processNextTick(cb, er);
                    }
                    // If we get something that is not a buffer, string, null, or undefined,
                    // and we're not in objectMode, then that's an error.
                    // Otherwise stream chunks are all considered to be of length=1, and the
                    // watermarks determine how many objects to keep in the buffer, rather than
                    // how many bytes or characters.
                    function validChunk(stream, state, chunk, cb) {
                        var valid = true;
                        var er = false;
                        // Always throw error if a null is written
                        // if we are not in object mode then throw
                        // if it is not a buffer, string, or undefined.
                        if (chunk === null) {
                            er = new TypeError('May not write null values to stream');
                        } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                            er = new TypeError('Invalid non-string/buffer chunk');
                        }
                        if (er) {
                            stream.emit('error', er);
                            processNextTick(cb, er);
                            valid = false;
                        }
                        return valid;
                    }
                    Writable.prototype.write = function (chunk, encoding, cb) {
                        var state = this._writableState;
                        var ret = false;
                        if (typeof encoding === 'function') {
                            cb = encoding;
                            encoding = null;
                        }
                        if (Buffer.isBuffer(chunk))
                            encoding = 'buffer';
                        else if (!encoding)
                            encoding = state.defaultEncoding;
                        if (typeof cb !== 'function')
                            cb = nop;
                        if (state.ended)
                            writeAfterEnd(this, cb);
                        else if (validChunk(this, state, chunk, cb)) {
                            state.pendingcb++;
                            ret = writeOrBuffer(this, state, chunk, encoding, cb);
                        }
                        return ret;
                    };
                    Writable.prototype.cork = function () {
                        var state = this._writableState;
                        state.corked++;
                    };
                    Writable.prototype.uncork = function () {
                        var state = this._writableState;
                        if (state.corked) {
                            state.corked--;
                            if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest)
                                clearBuffer(this, state);
                        }
                    };
                    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                        // node::ParseEncoding() requires lower case.
                        if (typeof encoding === 'string')
                            encoding = encoding.toLowerCase();
                        if (!([
                                'hex',
                                'utf8',
                                'utf-8',
                                'ascii',
                                'binary',
                                'base64',
                                'ucs2',
                                'ucs-2',
                                'utf16le',
                                'utf-16le',
                                'raw'
                            ].indexOf((encoding + '').toLowerCase()) > -1))
                            throw new TypeError('Unknown encoding: ' + encoding);
                        this._writableState.defaultEncoding = encoding;
                        return this;
                    };
                    function decodeChunk(state, chunk, encoding) {
                        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                            chunk = bufferShim.from(chunk, encoding);
                        }
                        return chunk;
                    }
                    // if we're already writing something, then just put this
                    // in the queue, and wait our turn.  Otherwise, call _write
                    // If we return false, then we need a drain event, so set that flag.
                    function writeOrBuffer(stream, state, chunk, encoding, cb) {
                        chunk = decodeChunk(state, chunk, encoding);
                        if (Buffer.isBuffer(chunk))
                            encoding = 'buffer';
                        var len = state.objectMode ? 1 : chunk.length;
                        state.length += len;
                        var ret = state.length < state.highWaterMark;
                        // we must ensure that previous needDrain will not be reset to false.
                        if (!ret)
                            state.needDrain = true;
                        if (state.writing || state.corked) {
                            var last = state.lastBufferedRequest;
                            state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
                            if (last) {
                                last.next = state.lastBufferedRequest;
                            } else {
                                state.bufferedRequest = state.lastBufferedRequest;
                            }
                            state.bufferedRequestCount += 1;
                        } else {
                            doWrite(stream, state, false, len, chunk, encoding, cb);
                        }
                        return ret;
                    }
                    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                        state.writelen = len;
                        state.writecb = cb;
                        state.writing = true;
                        state.sync = true;
                        if (writev)
                            stream._writev(chunk, state.onwrite);
                        else
                            stream._write(chunk, encoding, state.onwrite);
                        state.sync = false;
                    }
                    function onwriteError(stream, state, sync, er, cb) {
                        --state.pendingcb;
                        if (sync)
                            processNextTick(cb, er);
                        else
                            cb(er);
                        stream._writableState.errorEmitted = true;
                        stream.emit('error', er);
                    }
                    function onwriteStateUpdate(state) {
                        state.writing = false;
                        state.writecb = null;
                        state.length -= state.writelen;
                        state.writelen = 0;
                    }
                    function onwrite(stream, er) {
                        var state = stream._writableState;
                        var sync = state.sync;
                        var cb = state.writecb;
                        onwriteStateUpdate(state);
                        if (er)
                            onwriteError(stream, state, sync, er, cb);
                        else {
                            // Check if we're actually ready to finish, but don't emit yet
                            var finished = needFinish(state);
                            if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                                clearBuffer(stream, state);
                            }
                            if (sync) {
                                /*<replacement>*/
                                asyncWrite(afterWrite, stream, state, finished, cb);    /*</replacement>*/
                            } else {
                                afterWrite(stream, state, finished, cb);
                            }
                        }
                    }
                    function afterWrite(stream, state, finished, cb) {
                        if (!finished)
                            onwriteDrain(stream, state);
                        state.pendingcb--;
                        cb();
                        finishMaybe(stream, state);
                    }
                    // Must force callback to be called on nextTick, so that we don't
                    // emit 'drain' before the write() consumer gets the 'false' return
                    // value, and has a chance to attach a 'drain' listener.
                    function onwriteDrain(stream, state) {
                        if (state.length === 0 && state.needDrain) {
                            state.needDrain = false;
                            stream.emit('drain');
                        }
                    }
                    // if there's something in the buffer waiting, then process it
                    function clearBuffer(stream, state) {
                        state.bufferProcessing = true;
                        var entry = state.bufferedRequest;
                        if (stream._writev && entry && entry.next) {
                            // Fast case, write everything using _writev()
                            var l = state.bufferedRequestCount;
                            var buffer = new Array(l);
                            var holder = state.corkedRequestsFree;
                            holder.entry = entry;
                            var count = 0;
                            while (entry) {
                                buffer[count] = entry;
                                entry = entry.next;
                                count += 1;
                            }
                            doWrite(stream, state, true, state.length, buffer, '', holder.finish);
                            // doWrite is almost always async, defer these to save a bit of time
                            // as the hot path ends with doWrite
                            state.pendingcb++;
                            state.lastBufferedRequest = null;
                            if (holder.next) {
                                state.corkedRequestsFree = holder.next;
                                holder.next = null;
                            } else {
                                state.corkedRequestsFree = new CorkedRequest(state);
                            }
                        } else {
                            // Slow case, write chunks one-by-one
                            while (entry) {
                                var chunk = entry.chunk;
                                var encoding = entry.encoding;
                                var cb = entry.callback;
                                var len = state.objectMode ? 1 : chunk.length;
                                doWrite(stream, state, false, len, chunk, encoding, cb);
                                entry = entry.next;
                                // if we didn't call the onwrite immediately, then
                                // it means that we need to wait until it does.
                                // also, that means that the chunk and cb are currently
                                // being processed, so move the buffer counter past them.
                                if (state.writing) {
                                    break;
                                }
                            }
                            if (entry === null)
                                state.lastBufferedRequest = null;
                        }
                        state.bufferedRequestCount = 0;
                        state.bufferedRequest = entry;
                        state.bufferProcessing = false;
                    }
                    Writable.prototype._write = function (chunk, encoding, cb) {
                        cb(new Error('not implemented'));
                    };
                    Writable.prototype._writev = null;
                    Writable.prototype.end = function (chunk, encoding, cb) {
                        var state = this._writableState;
                        if (typeof chunk === 'function') {
                            cb = chunk;
                            chunk = null;
                            encoding = null;
                        } else if (typeof encoding === 'function') {
                            cb = encoding;
                            encoding = null;
                        }
                        if (chunk !== null && chunk !== undefined)
                            this.write(chunk, encoding);
                        // .end() fully uncorks
                        if (state.corked) {
                            state.corked = 1;
                            this.uncork();
                        }
                        // ignore unnecessary end() calls.
                        if (!state.ending && !state.finished)
                            endWritable(this, state, cb);
                    };
                    function needFinish(state) {
                        return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
                    }
                    function prefinish(stream, state) {
                        if (!state.prefinished) {
                            state.prefinished = true;
                            stream.emit('prefinish');
                        }
                    }
                    function finishMaybe(stream, state) {
                        var need = needFinish(state);
                        if (need) {
                            if (state.pendingcb === 0) {
                                prefinish(stream, state);
                                state.finished = true;
                                stream.emit('finish');
                            } else {
                                prefinish(stream, state);
                            }
                        }
                        return need;
                    }
                    function endWritable(stream, state, cb) {
                        state.ending = true;
                        finishMaybe(stream, state);
                        if (cb) {
                            if (state.finished)
                                processNextTick(cb);
                            else
                                stream.once('finish', cb);
                        }
                        state.ended = true;
                        stream.writable = false;
                    }
                    // It seems a linked list but it is not
                    // there will be only 2 of these for each stream
                    function CorkedRequest(state) {
                        var _this = this;
                        this.next = null;
                        this.entry = null;
                        this.finish = function (err) {
                            var entry = _this.entry;
                            _this.entry = null;
                            while (entry) {
                                var cb = entry.callback;
                                state.pendingcb--;
                                cb(err);
                                entry = entry.next;
                            }
                            if (state.corkedRequestsFree) {
                                state.corkedRequestsFree.next = _this;
                            } else {
                                state.corkedRequestsFree = _this;
                            }
                        };
                    }
                }.call(this, require(14)));
            },
            {
                '10': 10,
                '14': 14,
                '16': 16,
                '22': 22,
                '23': 23,
                '25': 25,
                '26': 26,
                '5': 5,
                '9': 9
            }
        ],
        21: [
            function (require, module, exports) {
                'use strict';
                var Buffer = require(5).Buffer;
                /*<replacement>*/
                var bufferShim = require(22);
                /*</replacement>*/
                module.exports = BufferList;
                function BufferList() {
                    this.head = null;
                    this.tail = null;
                    this.length = 0;
                }
                BufferList.prototype.push = function (v) {
                    var entry = {
                        data: v,
                        next: null
                    };
                    if (this.length > 0)
                        this.tail.next = entry;
                    else
                        this.head = entry;
                    this.tail = entry;
                    ++this.length;
                };
                BufferList.prototype.unshift = function (v) {
                    var entry = {
                        data: v,
                        next: this.head
                    };
                    if (this.length === 0)
                        this.tail = entry;
                    this.head = entry;
                    ++this.length;
                };
                BufferList.prototype.shift = function () {
                    if (this.length === 0)
                        return;
                    var ret = this.head.data;
                    if (this.length === 1)
                        this.head = this.tail = null;
                    else
                        this.head = this.head.next;
                    --this.length;
                    return ret;
                };
                BufferList.prototype.clear = function () {
                    this.head = this.tail = null;
                    this.length = 0;
                };
                BufferList.prototype.join = function (s) {
                    if (this.length === 0)
                        return '';
                    var p = this.head;
                    var ret = '' + p.data;
                    while (p = p.next) {
                        ret += s + p.data;
                    }
                    return ret;
                };
                BufferList.prototype.concat = function (n) {
                    if (this.length === 0)
                        return bufferShim.alloc(0);
                    if (this.length === 1)
                        return this.head.data;
                    var ret = bufferShim.allocUnsafe(n >>> 0);
                    var p = this.head;
                    var i = 0;
                    while (p) {
                        p.data.copy(ret, i);
                        i += p.data.length;
                        p = p.next;
                    }
                    return ret;
                };
            },
            {
                '22': 22,
                '5': 5
            }
        ],
        22: [
            function (require, module, exports) {
                (function (global) {
                    'use strict';
                    var buffer = require(5);
                    var Buffer = buffer.Buffer;
                    var SlowBuffer = buffer.SlowBuffer;
                    var MAX_LEN = buffer.kMaxLength || 2147483647;
                    exports.alloc = function alloc(size, fill, encoding) {
                        if (typeof Buffer.alloc === 'function') {
                            return Buffer.alloc(size, fill, encoding);
                        }
                        if (typeof encoding === 'number') {
                            throw new TypeError('encoding must not be number');
                        }
                        if (typeof size !== 'number') {
                            throw new TypeError('size must be a number');
                        }
                        if (size > MAX_LEN) {
                            throw new RangeError('size is too large');
                        }
                        var enc = encoding;
                        var _fill = fill;
                        if (_fill === undefined) {
                            enc = undefined;
                            _fill = 0;
                        }
                        var buf = new Buffer(size);
                        if (typeof _fill === 'string') {
                            var fillBuf = new Buffer(_fill, enc);
                            var flen = fillBuf.length;
                            var i = -1;
                            while (++i < size) {
                                buf[i] = fillBuf[i % flen];
                            }
                        } else {
                            buf.fill(_fill);
                        }
                        return buf;
                    };
                    exports.allocUnsafe = function allocUnsafe(size) {
                        if (typeof Buffer.allocUnsafe === 'function') {
                            return Buffer.allocUnsafe(size);
                        }
                        if (typeof size !== 'number') {
                            throw new TypeError('size must be a number');
                        }
                        if (size > MAX_LEN) {
                            throw new RangeError('size is too large');
                        }
                        return new Buffer(size);
                    };
                    exports.from = function from(value, encodingOrOffset, length) {
                        if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
                            return Buffer.from(value, encodingOrOffset, length);
                        }
                        if (typeof value === 'number') {
                            throw new TypeError('"value" argument must not be a number');
                        }
                        if (typeof value === 'string') {
                            return new Buffer(value, encodingOrOffset);
                        }
                        if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
                            var offset = encodingOrOffset;
                            if (arguments.length === 1) {
                                return new Buffer(value);
                            }
                            if (typeof offset === 'undefined') {
                                offset = 0;
                            }
                            var len = length;
                            if (typeof len === 'undefined') {
                                len = value.byteLength - offset;
                            }
                            if (offset >= value.byteLength) {
                                throw new RangeError('\'offset\' is out of bounds');
                            }
                            if (len > value.byteLength - offset) {
                                throw new RangeError('\'length\' is out of bounds');
                            }
                            return new Buffer(value.slice(offset, offset + len));
                        }
                        if (Buffer.isBuffer(value)) {
                            var out = new Buffer(value.length);
                            value.copy(out, 0, 0, value.length);
                            return out;
                        }
                        if (value) {
                            if (Array.isArray(value) || typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer || 'length' in value) {
                                return new Buffer(value);
                            }
                            if (value.type === 'Buffer' && Array.isArray(value.data)) {
                                return new Buffer(value.data);
                            }
                        }
                        throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
                    };
                    exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
                        if (typeof Buffer.allocUnsafeSlow === 'function') {
                            return Buffer.allocUnsafeSlow(size);
                        }
                        if (typeof size !== 'number') {
                            throw new TypeError('size must be a number');
                        }
                        if (size >= MAX_LEN) {
                            throw new RangeError('size is too large');
                        }
                        return new SlowBuffer(size);
                    };
                }.call(this, typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}));
            },
            { '5': 5 }
        ],
        23: [
            function (require, module, exports) {
                (function (Buffer) {
                    // Copyright Joyent, Inc. and other Node contributors.
                    //
                    // Permission is hereby granted, free of charge, to any person obtaining a
                    // copy of this software and associated documentation files (the
                    // "Software"), to deal in the Software without restriction, including
                    // without limitation the rights to use, copy, modify, merge, publish,
                    // distribute, sublicense, and/or sell copies of the Software, and to permit
                    // persons to whom the Software is furnished to do so, subject to the
                    // following conditions:
                    //
                    // The above copyright notice and this permission notice shall be included
                    // in all copies or substantial portions of the Software.
                    //
                    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                    // USE OR OTHER DEALINGS IN THE SOFTWARE.
                    // NOTE: These type checking functions intentionally don't use `instanceof`
                    // because it is fragile and can be easily faked with `Object.create()`.
                    function isArray(arg) {
                        if (Array.isArray) {
                            return Array.isArray(arg);
                        }
                        return objectToString(arg) === '[object Array]';
                    }
                    exports.isArray = isArray;
                    function isBoolean(arg) {
                        return typeof arg === 'boolean';
                    }
                    exports.isBoolean = isBoolean;
                    function isNull(arg) {
                        return arg === null;
                    }
                    exports.isNull = isNull;
                    function isNullOrUndefined(arg) {
                        return arg == null;
                    }
                    exports.isNullOrUndefined = isNullOrUndefined;
                    function isNumber(arg) {
                        return typeof arg === 'number';
                    }
                    exports.isNumber = isNumber;
                    function isString(arg) {
                        return typeof arg === 'string';
                    }
                    exports.isString = isString;
                    function isSymbol(arg) {
                        return typeof arg === 'symbol';
                    }
                    exports.isSymbol = isSymbol;
                    function isUndefined(arg) {
                        return arg === void 0;
                    }
                    exports.isUndefined = isUndefined;
                    function isRegExp(re) {
                        return objectToString(re) === '[object RegExp]';
                    }
                    exports.isRegExp = isRegExp;
                    function isObject(arg) {
                        return typeof arg === 'object' && arg !== null;
                    }
                    exports.isObject = isObject;
                    function isDate(d) {
                        return objectToString(d) === '[object Date]';
                    }
                    exports.isDate = isDate;
                    function isError(e) {
                        return objectToString(e) === '[object Error]' || e instanceof Error;
                    }
                    exports.isError = isError;
                    function isFunction(arg) {
                        return typeof arg === 'function';
                    }
                    exports.isFunction = isFunction;
                    function isPrimitive(arg) {
                        return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
                        typeof arg === 'undefined';
                    }
                    exports.isPrimitive = isPrimitive;
                    exports.isBuffer = Buffer.isBuffer;
                    function objectToString(o) {
                        return Object.prototype.toString.call(o);
                    }
                }.call(this, { 'isBuffer': require(11) }));
            },
            { '11': 11 }
        ],
        24: [
            function (require, module, exports) {
                arguments[4][8][0].apply(exports, arguments);
            },
            { '8': 8 }
        ],
        25: [
            function (require, module, exports) {
                (function (process) {
                    'use strict';
                    if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
                        module.exports = nextTick;
                    } else {
                        module.exports = process.nextTick;
                    }
                    function nextTick(fn, arg1, arg2, arg3) {
                        if (typeof fn !== 'function') {
                            throw new TypeError('"callback" argument must be a function');
                        }
                        var len = arguments.length;
                        var args, i;
                        switch (len) {
                        case 0:
                        case 1:
                            return process.nextTick(fn);
                        case 2:
                            return process.nextTick(function afterTickOne() {
                                fn.call(null, arg1);
                            });
                        case 3:
                            return process.nextTick(function afterTickTwo() {
                                fn.call(null, arg1, arg2);
                            });
                        case 4:
                            return process.nextTick(function afterTickThree() {
                                fn.call(null, arg1, arg2, arg3);
                            });
                        default:
                            args = new Array(len - 1);
                            i = 0;
                            while (i < args.length) {
                                args[i++] = arguments[i];
                            }
                            return process.nextTick(function afterTick() {
                                fn.apply(null, args);
                            });
                        }
                    }
                }.call(this, require(14)));
            },
            { '14': 14 }
        ],
        26: [
            function (require, module, exports) {
                (function (global) {
                    /**
 * Module exports.
 */
                    module.exports = deprecate;
                    /**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */
                    function deprecate(fn, msg) {
                        if (config('noDeprecation')) {
                            return fn;
                        }
                        var warned = false;
                        function deprecated() {
                            if (!warned) {
                                if (config('throwDeprecation')) {
                                    throw new Error(msg);
                                } else if (config('traceDeprecation')) {
                                    console.trace(msg);
                                } else {
                                    console.warn(msg);
                                }
                                warned = true;
                            }
                            return fn.apply(this, arguments);
                        }
                        return deprecated;
                    }
                    /**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */
                    function config(name) {
                        // accessing global.localStorage can trigger a DOMException in sandboxed iframes
                        try {
                            if (!global.localStorage)
                                return false;
                        } catch (_) {
                            return false;
                        }
                        var val = global.localStorage[name];
                        if (null == val)
                            return false;
                        return String(val).toLowerCase() === 'true';
                    }
                }.call(this, typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}));
            },
            {}
        ],
        27: [
            function (require, module, exports) {
                module.exports = require(17);
            },
            { '17': 17 }
        ],
        28: [
            function (require, module, exports) {
                (function (process) {
                    var Stream = function () {
                        try {
                            return require('st' + 'ream');    // hack to fix a circular dependency issue when used with browserify
                        } catch (_) {
                        }
                    }();
                    exports = module.exports = require(18);
                    exports.Stream = Stream || exports;
                    exports.Readable = exports;
                    exports.Writable = require(20);
                    exports.Duplex = require(16);
                    exports.Transform = require(19);
                    exports.PassThrough = require(17);
                    if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
                        module.exports = Stream;
                    }
                }.call(this, require(14)));
            },
            {
                '14': 14,
                '16': 16,
                '17': 17,
                '18': 18,
                '19': 19,
                '20': 20
            }
        ],
        29: [
            function (require, module, exports) {
                module.exports = require(19);
            },
            { '19': 19 }
        ],
        30: [
            function (require, module, exports) {
                module.exports = require(20);
            },
            { '20': 20 }
        ],
        31: [
            function (require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.
                module.exports = Stream;
                var EE = require(9).EventEmitter;
                var inherits = require(10);
                inherits(Stream, EE);
                Stream.Readable = require(28);
                Stream.Writable = require(30);
                Stream.Duplex = require(15);
                Stream.Transform = require(29);
                Stream.PassThrough = require(27);
                // Backwards-compat with node 0.4.x
                Stream.Stream = Stream;
                // old-style streams.  Note that the pipe method (the only relevant
                // part of this class) is overridden in the Readable class.
                function Stream() {
                    EE.call(this);
                }
                Stream.prototype.pipe = function (dest, options) {
                    var source = this;
                    function ondata(chunk) {
                        if (dest.writable) {
                            if (false === dest.write(chunk) && source.pause) {
                                source.pause();
                            }
                        }
                    }
                    source.on('data', ondata);
                    function ondrain() {
                        if (source.readable && source.resume) {
                            source.resume();
                        }
                    }
                    dest.on('drain', ondrain);
                    // If the 'end' option is not supplied, dest.end() will be called when
                    // source gets the 'end' or 'close' events.  Only dest.end() once.
                    if (!dest._isStdio && (!options || options.end !== false)) {
                        source.on('end', onend);
                        source.on('close', onclose);
                    }
                    var didOnEnd = false;
                    function onend() {
                        if (didOnEnd)
                            return;
                        didOnEnd = true;
                        dest.end();
                    }
                    function onclose() {
                        if (didOnEnd)
                            return;
                        didOnEnd = true;
                        if (typeof dest.destroy === 'function')
                            dest.destroy();
                    }
                    // don't leave dangling pipes when there are errors.
                    function onerror(er) {
                        cleanup();
                        if (EE.listenerCount(this, 'error') === 0) {
                            throw er;    // Unhandled stream error in pipe.
                        }
                    }
                    source.on('error', onerror);
                    dest.on('error', onerror);
                    // remove all the event listeners that were added.
                    function cleanup() {
                        source.removeListener('data', ondata);
                        dest.removeListener('drain', ondrain);
                        source.removeListener('end', onend);
                        source.removeListener('close', onclose);
                        source.removeListener('error', onerror);
                        dest.removeListener('error', onerror);
                        source.removeListener('end', cleanup);
                        source.removeListener('close', cleanup);
                        dest.removeListener('close', cleanup);
                    }
                    source.on('end', cleanup);
                    source.on('close', cleanup);
                    dest.on('close', cleanup);
                    dest.emit('pipe', source);
                    // Allow for unix-like usage: A.pipe(B).pipe(C)
                    return dest;
                };
            },
            {
                '10': 10,
                '15': 15,
                '27': 27,
                '28': 28,
                '29': 29,
                '30': 30,
                '9': 9
            }
        ],
        32: [
            function (require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.
                var Buffer = require(5).Buffer;
                var isBufferEncoding = Buffer.isEncoding || function (encoding) {
                    switch (encoding && encoding.toLowerCase()) {
                    case 'hex':
                    case 'utf8':
                    case 'utf-8':
                    case 'ascii':
                    case 'binary':
                    case 'base64':
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                    case 'raw':
                        return true;
                    default:
                        return false;
                    }
                };
                function assertEncoding(encoding) {
                    if (encoding && !isBufferEncoding(encoding)) {
                        throw new Error('Unknown encoding: ' + encoding);
                    }
                }
                // StringDecoder provides an interface for efficiently splitting a series of
                // buffers into a series of JS strings without breaking apart multi-byte
                // characters. CESU-8 is handled as part of the UTF-8 encoding.
                //
                // @TODO Handling all encodings inside a single object makes it very difficult
                // to reason about this code, so it should be split up in the future.
                // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
                // points as used by CESU-8.
                var StringDecoder = exports.StringDecoder = function (encoding) {
                    this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
                    assertEncoding(encoding);
                    switch (this.encoding) {
                    case 'utf8':
                        // CESU-8 represents each of Surrogate Pair by 3-bytes
                        this.surrogateSize = 3;
                        break;
                    case 'ucs2':
                    case 'utf16le':
                        // UTF-16 represents each of Surrogate Pair by 2-bytes
                        this.surrogateSize = 2;
                        this.detectIncompleteChar = utf16DetectIncompleteChar;
                        break;
                    case 'base64':
                        // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
                        this.surrogateSize = 3;
                        this.detectIncompleteChar = base64DetectIncompleteChar;
                        break;
                    default:
                        this.write = passThroughWrite;
                        return;
                    }
                    // Enough space to store all bytes of a single character. UTF-8 needs 4
                    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
                    this.charBuffer = new Buffer(6);
                    // Number of bytes received for the current incomplete multi-byte character.
                    this.charReceived = 0;
                    // Number of bytes expected for the current incomplete multi-byte character.
                    this.charLength = 0;
                };
                // write decodes the given buffer and returns it as JS string that is
                // guaranteed to not contain any partial multi-byte characters. Any partial
                // character found at the end of the buffer is buffered up, and will be
                // returned when calling write again with the remaining bytes.
                //
                // Note: Converting a Buffer containing an orphan surrogate to a String
                // currently works, but converting a String to a Buffer (via `new Buffer`, or
                // Buffer#write) will replace incomplete surrogates with the unicode
                // replacement character. See https://codereview.chromium.org/121173009/ .
                StringDecoder.prototype.write = function (buffer) {
                    var charStr = '';
                    // if our last write ended with an incomplete multibyte character
                    while (this.charLength) {
                        // determine how many remaining bytes this buffer has to offer for this char
                        var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;
                        // add the new bytes to the char buffer
                        buffer.copy(this.charBuffer, this.charReceived, 0, available);
                        this.charReceived += available;
                        if (this.charReceived < this.charLength) {
                            // still not enough chars in this buffer? wait for more ...
                            return '';
                        }
                        // remove bytes belonging to the current character from the buffer
                        buffer = buffer.slice(available, buffer.length);
                        // get the character that was split
                        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
                        // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
                        var charCode = charStr.charCodeAt(charStr.length - 1);
                        if (charCode >= 55296 && charCode <= 56319) {
                            this.charLength += this.surrogateSize;
                            charStr = '';
                            continue;
                        }
                        this.charReceived = this.charLength = 0;
                        // if there are no more bytes in this buffer, just emit our char
                        if (buffer.length === 0) {
                            return charStr;
                        }
                        break;
                    }
                    // determine and set charLength / charReceived
                    this.detectIncompleteChar(buffer);
                    var end = buffer.length;
                    if (this.charLength) {
                        // buffer the incomplete character bytes we got
                        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
                        end -= this.charReceived;
                    }
                    charStr += buffer.toString(this.encoding, 0, end);
                    var end = charStr.length - 1;
                    var charCode = charStr.charCodeAt(end);
                    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
                    if (charCode >= 55296 && charCode <= 56319) {
                        var size = this.surrogateSize;
                        this.charLength += size;
                        this.charReceived += size;
                        this.charBuffer.copy(this.charBuffer, size, 0, size);
                        buffer.copy(this.charBuffer, 0, 0, size);
                        return charStr.substring(0, end);
                    }
                    // or just emit the charStr
                    return charStr;
                };
                // detectIncompleteChar determines if there is an incomplete UTF-8 character at
                // the end of the given buffer. If so, it sets this.charLength to the byte
                // length that character, and sets this.charReceived to the number of bytes
                // that are available for this character.
                StringDecoder.prototype.detectIncompleteChar = function (buffer) {
                    // determine how many bytes we have to check at the end of this buffer
                    var i = buffer.length >= 3 ? 3 : buffer.length;
                    // Figure out if one of the last i bytes of our buffer announces an
                    // incomplete char.
                    for (; i > 0; i--) {
                        var c = buffer[buffer.length - i];
                        // See http://en.wikipedia.org/wiki/UTF-8#Description
                        // 110XXXXX
                        if (i == 1 && c >> 5 == 6) {
                            this.charLength = 2;
                            break;
                        }
                        // 1110XXXX
                        if (i <= 2 && c >> 4 == 14) {
                            this.charLength = 3;
                            break;
                        }
                        // 11110XXX
                        if (i <= 3 && c >> 3 == 30) {
                            this.charLength = 4;
                            break;
                        }
                    }
                    this.charReceived = i;
                };
                StringDecoder.prototype.end = function (buffer) {
                    var res = '';
                    if (buffer && buffer.length)
                        res = this.write(buffer);
                    if (this.charReceived) {
                        var cr = this.charReceived;
                        var buf = this.charBuffer;
                        var enc = this.encoding;
                        res += buf.slice(0, cr).toString(enc);
                    }
                    return res;
                };
                function passThroughWrite(buffer) {
                    return buffer.toString(this.encoding);
                }
                function utf16DetectIncompleteChar(buffer) {
                    this.charReceived = buffer.length % 2;
                    this.charLength = this.charReceived ? 2 : 0;
                }
                function base64DetectIncompleteChar(buffer) {
                    this.charReceived = buffer.length % 3;
                    this.charLength = this.charReceived ? 3 : 0;
                }
            },
            { '5': 5 }
        ],
        33: [
            function (require, module, exports) {
                arguments[4][10][0].apply(exports, arguments);
            },
            { '10': 10 }
        ],
        34: [
            function (require, module, exports) {
                module.exports = function isBuffer(arg) {
                    return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
                };
            },
            {}
        ],
        35: [
            function (require, module, exports) {
                (function (process, global) {
                    // Copyright Joyent, Inc. and other Node contributors.
                    //
                    // Permission is hereby granted, free of charge, to any person obtaining a
                    // copy of this software and associated documentation files (the
                    // "Software"), to deal in the Software without restriction, including
                    // without limitation the rights to use, copy, modify, merge, publish,
                    // distribute, sublicense, and/or sell copies of the Software, and to permit
                    // persons to whom the Software is furnished to do so, subject to the
                    // following conditions:
                    //
                    // The above copyright notice and this permission notice shall be included
                    // in all copies or substantial portions of the Software.
                    //
                    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                    // USE OR OTHER DEALINGS IN THE SOFTWARE.
                    var formatRegExp = /%[sdj%]/g;
                    exports.format = function (f) {
                        if (!isString(f)) {
                            var objects = [];
                            for (var i = 0; i < arguments.length; i++) {
                                objects.push(inspect(arguments[i]));
                            }
                            return objects.join(' ');
                        }
                        var i = 1;
                        var args = arguments;
                        var len = args.length;
                        var str = String(f).replace(formatRegExp, function (x) {
                            if (x === '%%')
                                return '%';
                            if (i >= len)
                                return x;
                            switch (x) {
                            case '%s':
                                return String(args[i++]);
                            case '%d':
                                return Number(args[i++]);
                            case '%j':
                                try {
                                    return JSON.stringify(args[i++]);
                                } catch (_) {
                                    return '[Circular]';
                                }
                            default:
                                return x;
                            }
                        });
                        for (var x = args[i]; i < len; x = args[++i]) {
                            if (isNull(x) || !isObject(x)) {
                                str += ' ' + x;
                            } else {
                                str += ' ' + inspect(x);
                            }
                        }
                        return str;
                    };
                    // Mark that a method should not be used.
                    // Returns a modified function which warns once by default.
                    // If --no-deprecation is set, then it is a no-op.
                    exports.deprecate = function (fn, msg) {
                        // Allow for deprecating things in the process of starting up.
                        if (isUndefined(global.process)) {
                            return function () {
                                return exports.deprecate(fn, msg).apply(this, arguments);
                            };
                        }
                        if (process.noDeprecation === true) {
                            return fn;
                        }
                        var warned = false;
                        function deprecated() {
                            if (!warned) {
                                if (process.throwDeprecation) {
                                    throw new Error(msg);
                                } else if (process.traceDeprecation) {
                                    console.trace(msg);
                                } else {
                                    console.error(msg);
                                }
                                warned = true;
                            }
                            return fn.apply(this, arguments);
                        }
                        return deprecated;
                    };
                    var debugs = {};
                    var debugEnviron;
                    exports.debuglog = function (set) {
                        if (isUndefined(debugEnviron))
                            debugEnviron = process.env.NODE_DEBUG || '';
                        set = set.toUpperCase();
                        if (!debugs[set]) {
                            if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                                var pid = process.pid;
                                debugs[set] = function () {
                                    var msg = exports.format.apply(exports, arguments);
                                    console.error('%s %d: %s', set, pid, msg);
                                };
                            } else {
                                debugs[set] = function () {
                                };
                            }
                        }
                        return debugs[set];
                    };
                    /**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
                    /* legacy: obj, showHidden, depth, colors*/
                    function inspect(obj, opts) {
                        // default options
                        var ctx = {
                            seen: [],
                            stylize: stylizeNoColor
                        };
                        // legacy...
                        if (arguments.length >= 3)
                            ctx.depth = arguments[2];
                        if (arguments.length >= 4)
                            ctx.colors = arguments[3];
                        if (isBoolean(opts)) {
                            // legacy...
                            ctx.showHidden = opts;
                        } else if (opts) {
                            // got an "options" object
                            exports._extend(ctx, opts);
                        }
                        // set default options
                        if (isUndefined(ctx.showHidden))
                            ctx.showHidden = false;
                        if (isUndefined(ctx.depth))
                            ctx.depth = 2;
                        if (isUndefined(ctx.colors))
                            ctx.colors = false;
                        if (isUndefined(ctx.customInspect))
                            ctx.customInspect = true;
                        if (ctx.colors)
                            ctx.stylize = stylizeWithColor;
                        return formatValue(ctx, obj, ctx.depth);
                    }
                    exports.inspect = inspect;
                    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
                    inspect.colors = {
                        'bold': [
                            1,
                            22
                        ],
                        'italic': [
                            3,
                            23
                        ],
                        'underline': [
                            4,
                            24
                        ],
                        'inverse': [
                            7,
                            27
                        ],
                        'white': [
                            37,
                            39
                        ],
                        'grey': [
                            90,
                            39
                        ],
                        'black': [
                            30,
                            39
                        ],
                        'blue': [
                            34,
                            39
                        ],
                        'cyan': [
                            36,
                            39
                        ],
                        'green': [
                            32,
                            39
                        ],
                        'magenta': [
                            35,
                            39
                        ],
                        'red': [
                            31,
                            39
                        ],
                        'yellow': [
                            33,
                            39
                        ]
                    };
                    // Don't use 'blue' not visible on cmd.exe
                    inspect.styles = {
                        'special': 'cyan',
                        'number': 'yellow',
                        'boolean': 'yellow',
                        'undefined': 'grey',
                        'null': 'bold',
                        'string': 'green',
                        'date': 'magenta',
                        // "name": intentionally not styling
                        'regexp': 'red'
                    };
                    function stylizeWithColor(str, styleType) {
                        var style = inspect.styles[styleType];
                        if (style) {
                            return '\x1B[' + inspect.colors[style][0] + 'm' + str + '\x1B[' + inspect.colors[style][1] + 'm';
                        } else {
                            return str;
                        }
                    }
                    function stylizeNoColor(str, styleType) {
                        return str;
                    }
                    function arrayToHash(array) {
                        var hash = {};
                        array.forEach(function (val, idx) {
                            hash[val] = true;
                        });
                        return hash;
                    }
                    function formatValue(ctx, value, recurseTimes) {
                        // Provide a hook for user-specified inspect functions.
                        // Check that value is an object with an inspect function on it
                        if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
                            value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
                            !(value.constructor && value.constructor.prototype === value)) {
                            var ret = value.inspect(recurseTimes, ctx);
                            if (!isString(ret)) {
                                ret = formatValue(ctx, ret, recurseTimes);
                            }
                            return ret;
                        }
                        // Primitive types cannot have properties
                        var primitive = formatPrimitive(ctx, value);
                        if (primitive) {
                            return primitive;
                        }
                        // Look up the keys of the object.
                        var keys = Object.keys(value);
                        var visibleKeys = arrayToHash(keys);
                        if (ctx.showHidden) {
                            keys = Object.getOwnPropertyNames(value);
                        }
                        // IE doesn't make error fields non-enumerable
                        // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
                        if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                            return formatError(value);
                        }
                        // Some type of object without properties can be shortcutted.
                        if (keys.length === 0) {
                            if (isFunction(value)) {
                                var name = value.name ? ': ' + value.name : '';
                                return ctx.stylize('[Function' + name + ']', 'special');
                            }
                            if (isRegExp(value)) {
                                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                            }
                            if (isDate(value)) {
                                return ctx.stylize(Date.prototype.toString.call(value), 'date');
                            }
                            if (isError(value)) {
                                return formatError(value);
                            }
                        }
                        var base = '', array = false, braces = [
                                '{',
                                '}'
                            ];
                        // Make Array say that they are Array
                        if (isArray(value)) {
                            array = true;
                            braces = [
                                '[',
                                ']'
                            ];
                        }
                        // Make functions say that they are functions
                        if (isFunction(value)) {
                            var n = value.name ? ': ' + value.name : '';
                            base = ' [Function' + n + ']';
                        }
                        // Make RegExps say that they are RegExps
                        if (isRegExp(value)) {
                            base = ' ' + RegExp.prototype.toString.call(value);
                        }
                        // Make dates with properties first say the date
                        if (isDate(value)) {
                            base = ' ' + Date.prototype.toUTCString.call(value);
                        }
                        // Make error with message first say the error
                        if (isError(value)) {
                            base = ' ' + formatError(value);
                        }
                        if (keys.length === 0 && (!array || value.length == 0)) {
                            return braces[0] + base + braces[1];
                        }
                        if (recurseTimes < 0) {
                            if (isRegExp(value)) {
                                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                            } else {
                                return ctx.stylize('[Object]', 'special');
                            }
                        }
                        ctx.seen.push(value);
                        var output;
                        if (array) {
                            output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
                        } else {
                            output = keys.map(function (key) {
                                return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                            });
                        }
                        ctx.seen.pop();
                        return reduceToSingleString(output, base, braces);
                    }
                    function formatPrimitive(ctx, value) {
                        if (isUndefined(value))
                            return ctx.stylize('undefined', 'undefined');
                        if (isString(value)) {
                            var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, '\\\'').replace(/\\"/g, '"') + '\'';
                            return ctx.stylize(simple, 'string');
                        }
                        if (isNumber(value))
                            return ctx.stylize('' + value, 'number');
                        if (isBoolean(value))
                            return ctx.stylize('' + value, 'boolean');
                        // For some reason typeof null is "object", so special case here.
                        if (isNull(value))
                            return ctx.stylize('null', 'null');
                    }
                    function formatError(value) {
                        return '[' + Error.prototype.toString.call(value) + ']';
                    }
                    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                        var output = [];
                        for (var i = 0, l = value.length; i < l; ++i) {
                            if (hasOwnProperty(value, String(i))) {
                                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
                            } else {
                                output.push('');
                            }
                        }
                        keys.forEach(function (key) {
                            if (!key.match(/^\d+$/)) {
                                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
                            }
                        });
                        return output;
                    }
                    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                        var name, str, desc;
                        desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
                        if (desc.get) {
                            if (desc.set) {
                                str = ctx.stylize('[Getter/Setter]', 'special');
                            } else {
                                str = ctx.stylize('[Getter]', 'special');
                            }
                        } else {
                            if (desc.set) {
                                str = ctx.stylize('[Setter]', 'special');
                            }
                        }
                        if (!hasOwnProperty(visibleKeys, key)) {
                            name = '[' + key + ']';
                        }
                        if (!str) {
                            if (ctx.seen.indexOf(desc.value) < 0) {
                                if (isNull(recurseTimes)) {
                                    str = formatValue(ctx, desc.value, null);
                                } else {
                                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                                }
                                if (str.indexOf('\n') > -1) {
                                    if (array) {
                                        str = str.split('\n').map(function (line) {
                                            return '  ' + line;
                                        }).join('\n').substr(2);
                                    } else {
                                        str = '\n' + str.split('\n').map(function (line) {
                                            return '   ' + line;
                                        }).join('\n');
                                    }
                                }
                            } else {
                                str = ctx.stylize('[Circular]', 'special');
                            }
                        }
                        if (isUndefined(name)) {
                            if (array && key.match(/^\d+$/)) {
                                return str;
                            }
                            name = JSON.stringify('' + key);
                            if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                                name = name.substr(1, name.length - 2);
                                name = ctx.stylize(name, 'name');
                            } else {
                                name = name.replace(/'/g, '\\\'').replace(/\\"/g, '"').replace(/(^"|"$)/g, '\'');
                                name = ctx.stylize(name, 'string');
                            }
                        }
                        return name + ': ' + str;
                    }
                    function reduceToSingleString(output, base, braces) {
                        var numLinesEst = 0;
                        var length = output.reduce(function (prev, cur) {
                            numLinesEst++;
                            if (cur.indexOf('\n') >= 0)
                                numLinesEst++;
                            return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
                        }, 0);
                        if (length > 60) {
                            return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
                        }
                        return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
                    }
                    // NOTE: These type checking functions intentionally don't use `instanceof`
                    // because it is fragile and can be easily faked with `Object.create()`.
                    function isArray(ar) {
                        return Array.isArray(ar);
                    }
                    exports.isArray = isArray;
                    function isBoolean(arg) {
                        return typeof arg === 'boolean';
                    }
                    exports.isBoolean = isBoolean;
                    function isNull(arg) {
                        return arg === null;
                    }
                    exports.isNull = isNull;
                    function isNullOrUndefined(arg) {
                        return arg == null;
                    }
                    exports.isNullOrUndefined = isNullOrUndefined;
                    function isNumber(arg) {
                        return typeof arg === 'number';
                    }
                    exports.isNumber = isNumber;
                    function isString(arg) {
                        return typeof arg === 'string';
                    }
                    exports.isString = isString;
                    function isSymbol(arg) {
                        return typeof arg === 'symbol';
                    }
                    exports.isSymbol = isSymbol;
                    function isUndefined(arg) {
                        return arg === void 0;
                    }
                    exports.isUndefined = isUndefined;
                    function isRegExp(re) {
                        return isObject(re) && objectToString(re) === '[object RegExp]';
                    }
                    exports.isRegExp = isRegExp;
                    function isObject(arg) {
                        return typeof arg === 'object' && arg !== null;
                    }
                    exports.isObject = isObject;
                    function isDate(d) {
                        return isObject(d) && objectToString(d) === '[object Date]';
                    }
                    exports.isDate = isDate;
                    function isError(e) {
                        return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
                    }
                    exports.isError = isError;
                    function isFunction(arg) {
                        return typeof arg === 'function';
                    }
                    exports.isFunction = isFunction;
                    function isPrimitive(arg) {
                        return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
                        typeof arg === 'undefined';
                    }
                    exports.isPrimitive = isPrimitive;
                    exports.isBuffer = require(34);
                    function objectToString(o) {
                        return Object.prototype.toString.call(o);
                    }
                    function pad(n) {
                        return n < 10 ? '0' + n.toString(10) : n.toString(10);
                    }
                    var months = [
                        'Jan',
                        'Feb',
                        'Mar',
                        'Apr',
                        'May',
                        'Jun',
                        'Jul',
                        'Aug',
                        'Sep',
                        'Oct',
                        'Nov',
                        'Dec'
                    ];
                    // 26 Feb 16:19:34
                    function timestamp() {
                        var d = new Date();
                        var time = [
                            pad(d.getHours()),
                            pad(d.getMinutes()),
                            pad(d.getSeconds())
                        ].join(':');
                        return [
                            d.getDate(),
                            months[d.getMonth()],
                            time
                        ].join(' ');
                    }
                    // log is just a thin wrapper to console.log that prepends a timestamp
                    exports.log = function () {
                        console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
                    };
                    /**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
                    exports.inherits = require(33);
                    exports._extend = function (origin, add) {
                        // Don't do anything if add isn't an object
                        if (!add || !isObject(add))
                            return origin;
                        var keys = Object.keys(add);
                        var i = keys.length;
                        while (i--) {
                            origin[keys[i]] = add[keys[i]];
                        }
                        return origin;
                    };
                    function hasOwnProperty(obj, prop) {
                        return Object.prototype.hasOwnProperty.call(obj, prop);
                    }
                }.call(this, require(14), typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}));
            },
            {
                '14': 14,
                '33': 33,
                '34': 34
            }
        ],
        36: [
            function (require, module, exports) {
                (function (Buffer) {
                    /*global URL, Blob, btoa*/
                    var _ = require(38), fs = require(3), pathModule = require(13), mime = require(39), getTemporaryFilePath = require(37);
                    function sanitizeContentType(contentType) {
                    }
                    function entitify(value) {
                    }
                    module.exports = {
                        name: 'magicpen-media',
                        version: require(41).version,
                        installInto: function (magicPen) {
                            magicPen.addStyle('media', function (media, options) {
                                if (typeof options === 'string') {
                                    options = { contentType: options };
                                } else {
                                    options = options || {};
                                }
                                var contentType = options.contentType;
                                var majorContentType = typeof contentType === 'string' && contentType.replace(/\/.*/, '');
                                var width = options.width || 0;
                                var height = options.height || 0;
                                var alt = options.alt;
                                var title = options.title;
                                var fallbackToDisc = options.fallbackToDisc;
                                if (typeof media === 'string' && !/data:/.test(media) && (typeof contentType === 'undefined' || contentType.indexOf('/') === -1)) {
                                    var extension = pathModule.extname(media);
                                    if (extension) {
                                        contentType = mime.types[extension.replace(/^\./, '')] || contentType;
                                    }
                                }
                                this.alt({
                                    html: {
                                        width: width,
                                        height: height,
                                        content: function () {
                                        }
                                    },
                                    fallback: function () {
                                        function writeToDisc(data) {
                                        }
                                        if (typeof media === 'string') {
                                            var matchDataUrl = media.match(/^data:([\w\-\+\.]+\/[\w\-\+\.]+)?(?:;charset=([\w\/\-]+))?(;base64)?,([\u0000-\u007f]*)$/);
                                            if (matchDataUrl) {
                                                contentType = matchDataUrl[1] || contentType || 'text/plain';
                                                if (matchDataUrl[3] && options.fallbackToDisc && fs.writeFileSync) {
                                                    this.text(writeToDisc(new Buffer(matchDataUrl[4], 'base64')) + ' (' + contentType + ')');
                                                } else {
                                                    this.text('data url (' + contentType + ')');
                                                }
                                            } else {
                                                this.text(media + ' (' + (contentType || 'media') + ')');
                                            }
                                        } else {
                                            // Uint8Array or Buffer
                                            if (options.fallbackToDisc && fs.writeFileSync) {
                                                this.text(writeToDisc(media) + ' (' + contentType + ')');
                                            } else {
                                                this.text(media.constructor.name + '[' + media.length + '] (' + (contentType || 'media') + ')');
                                            }
                                        }
                                    }
                                });
                            });
                            magicPen.addStyle('image', function (image, options) {
                            });
                            magicPen.addStyle('audio', function (audio, options) {
                            });
                            magicPen.addStyle('video', function (video, options) {
                            });
                        }
                    };
                }.call(this, require(5).Buffer));
            },
            {
                '13': 13,
                '3': 3,
                '37': 37,
                '38': 38,
                '39': 39,
                '41': 41,
                '5': 5
            }
        ],
        37: [
            function (require, module, exports) {
                // Fragments of the seemingly abandoned https://github.com/bruce/node-temp/blob/master/lib/temp.js patched to use os.tmpDir() if available:
                var Path = require(13), fs = require(3), os;
                try {
                    os = require(12);
                } catch (e) {
                }
                // Memoized because those fs.realpathSync calls are expensive:
                var tempDir;
                function getTempDir() {
                }
                function parseAffixes(rawAffixes, defaultPrefix) {
                }
                function getTemporaryFilePath(rawAffixes, defaultPrefix) {
                }
                module.exports = getTemporaryFilePath;
            },
            {
                '12': 12,
                '13': 13,
                '3': 3
            }
        ],
        38: [
            function (require, module, exports) {
                (function (global) {
                    /**
 * @license
 * lodash 3.10.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern -d -o ./index.js`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
                    ;
                    (function () {
                        /** Used as a safe reference for `undefined` in pre-ES5 environments. */
                        var undefined;
                        /** Used as the semantic version number. */
                        var VERSION = '3.10.0';
                        /** Used to compose bitmasks for wrapper metadata. */
                        var BIND_FLAG = 1, BIND_KEY_FLAG = 2, CURRY_BOUND_FLAG = 4, CURRY_FLAG = 8, CURRY_RIGHT_FLAG = 16, PARTIAL_FLAG = 32, PARTIAL_RIGHT_FLAG = 64, ARY_FLAG = 128, REARG_FLAG = 256;
                        /** Used as default options for `_.trunc`. */
                        var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = '...';
                        /** Used to detect when a function becomes hot. */
                        var HOT_COUNT = 150, HOT_SPAN = 16;
                        /** Used as the size to enable large array optimizations. */
                        var LARGE_ARRAY_SIZE = 200;
                        /** Used to indicate the type of lazy iteratees. */
                        var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2;
                        /** Used as the `TypeError` message for "Functions" methods. */
                        var FUNC_ERROR_TEXT = 'Expected a function';
                        /** Used as the internal argument placeholder. */
                        var PLACEHOLDER = '__lodash_placeholder__';
                        /** `Object#toString` result references. */
                        var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', weakMapTag = '[object WeakMap]';
                        var arrayBufferTag = '[object ArrayBuffer]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
                        /** Used to match empty string literals in compiled template source. */
                        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
                        /** Used to match HTML entities and HTML characters. */
                        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g, reUnescapedHtml = /[&<>"'`]/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
                        /** Used to match template delimiters. */
                        var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
                        /** Used to match property names within property paths. */
                        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;
                        /**
   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
   */
                        var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g, reHasRegExpChars = RegExp(reRegExpChars.source);
                        /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
                        var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;
                        /** Used to match backslashes in property paths. */
                        var reEscapeChar = /\\(\\)?/g;
                        /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
                        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
                        /** Used to match `RegExp` flags from their coerced string values. */
                        var reFlags = /\w*$/;
                        /** Used to detect hexadecimal string values. */
                        var reHasHexPrefix = /^0[xX]/;
                        /** Used to detect host constructors (Safari > 5). */
                        var reIsHostCtor = /^\[object .+?Constructor\]$/;
                        /** Used to detect unsigned integer values. */
                        var reIsUint = /^\d+$/;
                        /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
                        var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;
                        /** Used to ensure capturing order of template delimiters. */
                        var reNoMatch = /($^)/;
                        /** Used to match unescaped characters in compiled string literals. */
                        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
                        /** Used to match words to create compound words. */
                        var reWords = function () {
                            var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]', lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';
                            return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
                        }();
                        /** Used to assign default `context` object properties. */
                        var contextProps = [
                            'Array',
                            'ArrayBuffer',
                            'Date',
                            'Error',
                            'Float32Array',
                            'Float64Array',
                            'Function',
                            'Int8Array',
                            'Int16Array',
                            'Int32Array',
                            'Math',
                            'Number',
                            'Object',
                            'RegExp',
                            'Set',
                            'String',
                            '_',
                            'clearTimeout',
                            'isFinite',
                            'parseFloat',
                            'parseInt',
                            'setTimeout',
                            'TypeError',
                            'Uint8Array',
                            'Uint8ClampedArray',
                            'Uint16Array',
                            'Uint32Array',
                            'WeakMap'
                        ];
                        /** Used to make template sourceURLs easier to identify. */
                        var templateCounter = -1;
                        /** Used to identify `toStringTag` values of typed arrays. */
                        var typedArrayTags = {};
                        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
                        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
                        /** Used to identify `toStringTag` values supported by `_.clone`. */
                        var cloneableTags = {};
                        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[stringTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
                        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[mapTag] = cloneableTags[setTag] = cloneableTags[weakMapTag] = false;
                        /** Used to map latin-1 supplementary letters to basic latin letters. */
                        var deburredLetters = {
                            'À': 'A',
                            'Á': 'A',
                            'Â': 'A',
                            'Ã': 'A',
                            'Ä': 'A',
                            'Å': 'A',
                            'à': 'a',
                            'á': 'a',
                            'â': 'a',
                            'ã': 'a',
                            'ä': 'a',
                            'å': 'a',
                            'Ç': 'C',
                            'ç': 'c',
                            'Ð': 'D',
                            'ð': 'd',
                            'È': 'E',
                            'É': 'E',
                            'Ê': 'E',
                            'Ë': 'E',
                            'è': 'e',
                            'é': 'e',
                            'ê': 'e',
                            'ë': 'e',
                            'Ì': 'I',
                            'Í': 'I',
                            'Î': 'I',
                            'Ï': 'I',
                            'ì': 'i',
                            'í': 'i',
                            'î': 'i',
                            'ï': 'i',
                            'Ñ': 'N',
                            'ñ': 'n',
                            'Ò': 'O',
                            'Ó': 'O',
                            'Ô': 'O',
                            'Õ': 'O',
                            'Ö': 'O',
                            'Ø': 'O',
                            'ò': 'o',
                            'ó': 'o',
                            'ô': 'o',
                            'õ': 'o',
                            'ö': 'o',
                            'ø': 'o',
                            'Ù': 'U',
                            'Ú': 'U',
                            'Û': 'U',
                            'Ü': 'U',
                            'ù': 'u',
                            'ú': 'u',
                            'û': 'u',
                            'ü': 'u',
                            'Ý': 'Y',
                            'ý': 'y',
                            'ÿ': 'y',
                            'Æ': 'Ae',
                            'æ': 'ae',
                            'Þ': 'Th',
                            'þ': 'th',
                            'ß': 'ss'
                        };
                        /** Used to map characters to HTML entities. */
                        var htmlEscapes = {
                            '&': '&amp;',
                            '<': '&lt;',
                            '>': '&gt;',
                            '"': '&quot;',
                            '\'': '&#39;',
                            '`': '&#96;'
                        };
                        /** Used to map HTML entities to characters. */
                        var htmlUnescapes = {
                            '&amp;': '&',
                            '&lt;': '<',
                            '&gt;': '>',
                            '&quot;': '"',
                            '&#39;': '\'',
                            '&#96;': '`'
                        };
                        /** Used to determine if values are of the language type `Object`. */
                        var objectTypes = {
                            'function': true,
                            'object': true
                        };
                        /** Used to escape characters for inclusion in compiled regexes. */
                        var regexpEscapes = {
                            '0': 'x30',
                            '1': 'x31',
                            '2': 'x32',
                            '3': 'x33',
                            '4': 'x34',
                            '5': 'x35',
                            '6': 'x36',
                            '7': 'x37',
                            '8': 'x38',
                            '9': 'x39',
                            'A': 'x41',
                            'B': 'x42',
                            'C': 'x43',
                            'D': 'x44',
                            'E': 'x45',
                            'F': 'x46',
                            'a': 'x61',
                            'b': 'x62',
                            'c': 'x63',
                            'd': 'x64',
                            'e': 'x65',
                            'f': 'x66',
                            'n': 'x6e',
                            'r': 'x72',
                            't': 'x74',
                            'u': 'x75',
                            'v': 'x76',
                            'x': 'x78'
                        };
                        /** Used to escape characters for inclusion in compiled string literals. */
                        var stringEscapes = {
                            '\\': '\\',
                            '\'': '\'',
                            '\n': 'n',
                            '\r': 'r',
                            '\u2028': 'u2028',
                            '\u2029': 'u2029'
                        };
                        /** Detect free variable `exports`. */
                        var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
                        /** Detect free variable `module`. */
                        var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
                        /** Detect free variable `global` from Node.js. */
                        var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;
                        /** Detect free variable `self`. */
                        var freeSelf = objectTypes[typeof self] && self && self.Object && self;
                        /** Detect free variable `window`. */
                        var freeWindow = objectTypes[typeof window] && window && window.Object && window;
                        /** Detect the popular CommonJS extension `module.exports`. */
                        var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;
                        /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
                        var root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this;
                        /*--------------------------------------------------------------------------*/
                        /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
                        function baseCompareAscending(value, other) {
                        }
                        /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
                        function baseFindIndex(array, predicate, fromRight) {
                        }
                        /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
                        function baseIndexOf(array, value, fromIndex) {
                        }
                        /**
   * The base implementation of `_.isFunction` without support for environments
   * with incorrect `typeof` results.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   */
                        function baseIsFunction(value) {
                        }
                        /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
                        function baseToString(value) {
                        }
                        /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
                        function charsLeftIndex(string, chars) {
                        }
                        /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
                        function charsRightIndex(string, chars) {
                        }
                        /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @returns {number} Returns the sort order indicator for `object`.
   */
                        function compareAscending(object, other) {
                        }
                        /**
   * Used by `_.sortByOrder` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
   * a value is sorted in ascending order if its corresponding order is "asc", and
   * descending if "desc".
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
                        function compareMultiple(object, other, orders) {
                        }
                        /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
                        function deburrLetter(letter) {
                        }
                        /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
                        function escapeHtmlChar(chr) {
                        }
                        /**
   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @param {string} leadingChar The capture group for a leading character.
   * @param {string} whitespaceChar The capture group for a whitespace character.
   * @returns {string} Returns the escaped character.
   */
                        function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
                        }
                        /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
                        function escapeStringChar(chr) {
                        }
                        /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
                        function indexOfNaN(array, fromIndex, fromRight) {
                        }
                        /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
                        function isObjectLike(value) {
                        }
                        /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
                        function isSpace(charCode) {
                        }
                        /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
                        function replaceHolders(array, placeholder) {
                        }
                        /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate-value-free array.
   */
                        function sortedUniq(array, iteratee) {
                        }
                        /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
                        function trimmedLeftIndex(string) {
                        }
                        /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
                        function trimmedRightIndex(string) {
                        }
                        /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
                        function unescapeHtmlChar(chr) {
                        }
                        /*--------------------------------------------------------------------------*/
                        /**
   * Create a new pristine `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
                        function runInContext(context) {
                            // Avoid issues with some ES3 environments that attempt to use values, named
                            // after built-in constructors like `Object`, for the creation of literals.
                            // ES5 clears this up by stating that literals must use built-in constructors.
                            // See https://es5.github.io/#x11.1.5 for more details.
                            context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;
                            /** Native constructor references. */
                            var Array = context.Array, Date = context.Date, Error = context.Error, Function = context.Function, Math = context.Math, Number = context.Number, Object = context.Object, RegExp = context.RegExp, String = context.String, TypeError = context.TypeError;
                            /** Used for native method references. */
                            var arrayProto = Array.prototype, objectProto = Object.prototype, stringProto = String.prototype;
                            /** Used to resolve the decompiled source of functions. */
                            var fnToString = Function.prototype.toString;
                            /** Used to check objects for own properties. */
                            var hasOwnProperty = objectProto.hasOwnProperty;
                            /** Used to generate unique IDs. */
                            var idCounter = 0;
                            /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
                            var objToString = objectProto.toString;
                            /** Used to restore the original `_` reference in `_.noConflict`. */
                            var oldDash = root._;
                            /** Used to detect if a method is native. */
                            var reIsNative = RegExp('^' + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
                            /** Native method references. */
                            var ArrayBuffer = context.ArrayBuffer, clearTimeout = context.clearTimeout, parseFloat = context.parseFloat, pow = Math.pow, propertyIsEnumerable = objectProto.propertyIsEnumerable, Set = getNative(context, 'Set'), setTimeout = context.setTimeout, splice = arrayProto.splice, Uint8Array = context.Uint8Array, WeakMap = getNative(context, 'WeakMap');
                            /* Native method references for those with the same name as other `lodash` methods. */
                            var nativeCeil = Math.ceil, nativeCreate = getNative(Object, 'create'), nativeFloor = Math.floor, nativeIsArray = getNative(Array, 'isArray'), nativeIsFinite = context.isFinite, nativeKeys = getNative(Object, 'keys'), nativeMax = Math.max, nativeMin = Math.min, nativeNow = getNative(Date, 'now'), nativeParseInt = context.parseInt, nativeRandom = Math.random;
                            /** Used as references for `-Infinity` and `Infinity`. */
                            var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY, POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
                            /** Used as references for the maximum length and index of an array. */
                            var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
                            /**
     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
     * of an array-like value.
     */
                            var MAX_SAFE_INTEGER = 9007199254740991;
                            /** Used to store function metadata. */
                            var metaMap = WeakMap && new WeakMap();
                            /** Used to lookup unminified function names. */
                            var realNames = {};
                            /*------------------------------------------------------------------------*/
                            /**
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
     * Methods that operate on and return arrays, collections, and functions can
     * be chained together. Methods that retrieve a single value or may return a
     * primitive value will automatically end the chain returning the unwrapped
     * value. Explicit chaining may be enabled using `_.chain`. The execution of
     * chained methods is lazy, that is, execution is deferred until `_#value`
     * is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization strategy which merge iteratee calls; this can help
     * to avoid the creation of intermediate data structures and greatly reduce the
     * number of iteratee executions.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
     * `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
     * and `where`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
     * `unescape`, `uniqueId`, `value`, and `words`
     *
     * The wrapper method `sample` will return a wrapped value when `n` is provided,
     * otherwise an unwrapped value is returned.
     *
     * @name _
     * @constructor
     * @category Chain
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(total, n) {
     *   return total + n;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(n) {
     *   return n * n;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
                            function lodash(value) {
                            }
                            /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
                            function baseLodash() {
                            }
                            /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
     */
                            function LodashWrapper(value, chainAll, actions) {
                            }
                            /**
     * An object environment feature flags.
     *
     * @static
     * @memberOf _
     * @type Object
     */
                            var support = lodash.support = {};
                            /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
                            lodash.templateSettings = {
                                /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
                                'escape': reEscape,
                                /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
                                'evaluate': reEvaluate,
                                /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
                                'interpolate': reInterpolate,
                                /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
                                'variable': '',
                                /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
                                'imports': {
                                    /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
                                    '_': lodash
                                }
                            };
                            /*------------------------------------------------------------------------*/
                            /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
                            function LazyWrapper(value) {
                            }
                            /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
                            function lazyClone() {
                            }
                            /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
                            function lazyReverse() {
                            }
                            /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
                            function lazyValue() {
                            }
                            /*------------------------------------------------------------------------*/
                            /**
     * Creates a cache object to store key/value pairs.
     *
     * @private
     * @static
     * @name Cache
     * @memberOf _.memoize
     */
                            function MapCache() {
                            }
                            /**
     * Removes `key` and its value from the cache.
     *
     * @private
     * @name delete
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
     */
                            function mapDelete(key) {
                            }
                            /**
     * Gets the cached value for `key`.
     *
     * @private
     * @name get
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the cached value.
     */
                            function mapGet(key) {
                            }
                            /**
     * Checks if a cached value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
                            function mapHas(key) {
                            }
                            /**
     * Sets `value` to `key` of the cache.
     *
     * @private
     * @name set
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to cache.
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache object.
     */
                            function mapSet(key, value) {
                            }
                            /*------------------------------------------------------------------------*/
                            /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
                            function SetCache(values) {
                            }
                            /**
     * Checks if `value` is in `cache` mimicking the return signature of
     * `_.indexOf` by returning `0` if the value is found, else `-1`.
     *
     * @private
     * @param {Object} cache The cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `0` if `value` is found, else `-1`.
     */
                            function cacheIndexOf(cache, value) {
                            }
                            /**
     * Adds `value` to the cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
                            function cachePush(value) {
                            }
                            /*------------------------------------------------------------------------*/
                            /**
     * Creates a new array joining `array` with `other`.
     *
     * @private
     * @param {Array} array The array to join.
     * @param {Array} other The other array to join.
     * @returns {Array} Returns the new concatenated array.
     */
                            function arrayConcat(array, other) {
                            }
                            /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
                            function arrayCopy(source, array) {
                            }
                            /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
                            function arrayEach(array, iteratee) {
                                var index = -1, length = array.length;
                                while (++index < length) {
                                    if (iteratee(array[index], index, array) === false) {
                                        break;
                                    }
                                }
                                return array;
                            }
                            /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
                            function arrayEachRight(array, iteratee) {
                            }
                            /**
     * A specialized version of `_.every` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
                            function arrayEvery(array, predicate) {
                            }
                            /**
     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
     * with one argument: (value).
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
                            function arrayExtremum(array, iteratee, comparator, exValue) {
                            }
                            /**
     * A specialized version of `_.filter` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
                            function arrayFilter(array, predicate) {
                            }
                            /**
     * A specialized version of `_.map` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
                            function arrayMap(array, iteratee) {
                            }
                            /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
                            function arrayPush(array, values) {
                            }
                            /**
     * A specialized version of `_.reduce` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the first element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
                            function arrayReduce(array, iteratee, accumulator, initFromArray) {
                            }
                            /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the last element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
                            function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
                            }
                            /**
     * A specialized version of `_.some` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
                            function arraySome(array, predicate) {
                            }
                            /**
     * A specialized version of `_.sum` for arrays without support for callback
     * shorthands and `this` binding..
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
                            function arraySum(array, iteratee) {
                            }
                            /**
     * Used by `_.defaults` to customize its `_.assign` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
                            function assignDefaults(objectValue, sourceValue) {
                            }
                            /**
     * Used by `_.template` to customize its `_.assign` use.
     *
     * **Note:** This function is like `assignDefaults` except that it ignores
     * inherited property values when checking if a property is `undefined`.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @param {string} key The key associated with the object and source values.
     * @param {Object} object The destination object.
     * @returns {*} Returns the value to assign to the destination object.
     */
                            function assignOwnDefaults(objectValue, sourceValue, key, object) {
                            }
                            /**
     * A specialized version of `_.assign` for customizing assigned values without
     * support for argument juggling, multiple sources, and `this` binding `customizer`
     * functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     */
                            function assignWith(object, source, customizer) {
                            }
                            /**
     * The base implementation of `_.assign` without support for argument juggling,
     * multiple sources, and `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
                            function baseAssign(object, source) {
                            }
                            /**
     * The base implementation of `_.at` without support for string collections
     * and individual key arguments.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {number[]|string[]} props The property names or indexes of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
                            function baseAt(collection, props) {
                            }
                            /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
                            function baseCopy(source, props, object) {
                            }
                            /**
     * The base implementation of `_.callback` which supports specifying the
     * number of arguments to provide to `func`.
     *
     * @private
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
                            function baseCallback(func, thisArg, argCount) {
                            }
                            /**
     * The base implementation of `_.clone` without support for argument juggling
     * and `this` binding `customizer` functions.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The object `value` belongs to.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
                            function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
                            }
                            /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
                            var baseCreate = function () {
                                function object() {
                                }
                                return function (prototype) {
                                    if (isObject(prototype)) {
                                        object.prototype = prototype;
                                        var result = new object();
                                        object.prototype = undefined;
                                    }
                                    return result || {};
                                };
                            }();
                            /**
     * The base implementation of `_.delay` and `_.defer` which accepts an index
     * of where to slice the arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
                            function baseDelay(func, wait, args) {
                            }
                            /**
     * The base implementation of `_.difference` which accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     */
                            function baseDifference(array, values) {
                            }
                            /**
     * The base implementation of `_.forEach` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
                            var baseEach = createBaseEach(baseForOwn);
                            /**
     * The base implementation of `_.forEachRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
                            var baseEachRight = createBaseEach(baseForOwnRight, true);
                            /**
     * The base implementation of `_.every` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
                            function baseEvery(collection, predicate) {
                            }
                            /**
     * Gets the extremum value of `collection` invoking `iteratee` for each value
     * in `collection` to generate the criterion by which the value is ranked.
     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
                            function baseExtremum(collection, iteratee, comparator, exValue) {
                            }
                            /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
                            function baseFill(array, value, start, end) {
                            }
                            /**
     * The base implementation of `_.filter` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
                            function baseFilter(collection, predicate) {
                            }
                            /**
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
     * without support for callback shorthands and `this` binding, which iterates
     * over `collection` using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @param {boolean} [retKey] Specify returning the key of the found element
     *  instead of the element itself.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
                            function baseFind(collection, predicate, eachFunc, retKey) {
                            }
                            /**
     * The base implementation of `_.flatten` with added support for restricting
     * flattening and specifying the start index.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
                            function baseFlatten(array, isDeep, isStrict, result) {
                            }
                            /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
                            var baseFor = createBaseFor();
                            /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
                            var baseForRight = createBaseFor(true);
                            /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
                            function baseForIn(object, iteratee) {
                            }
                            /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
                            function baseForOwn(object, iteratee) {
                                return baseFor(object, iteratee, keys);
                            }
                            /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
                            function baseForOwnRight(object, iteratee) {
                            }
                            /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
                            function baseFunctions(object, props) {
                                var index = -1, length = props.length, resIndex = -1, result = [];
                                while (++index < length) {
                                    var key = props[index];
                                    if (isFunction(object[key])) {
                                        result[++resIndex] = key;
                                    }
                                }
                                return result;
                            }
                            /**
     * The base implementation of `get` without support for string paths
     * and default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path of the property to get.
     * @param {string} [pathKey] The key representation of path.
     * @returns {*} Returns the resolved value.
     */
                            function baseGet(object, path, pathKey) {
                            }
                            /**
     * The base implementation of `_.isEqual` without support for `this` binding
     * `customizer` functions.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
                            function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
                            }
                            /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
                            function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
                            }
                            /**
     * The base implementation of `_.isMatch` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} matchData The propery names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
                            function baseIsMatch(object, matchData, customizer) {
                            }
                            /**
     * The base implementation of `_.map` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
                            function baseMap(collection, iteratee) {
                            }
                            /**
     * The base implementation of `_.matches` which does not clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
                            function baseMatches(source) {
                            }
                            /**
     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to compare.
     * @returns {Function} Returns the new function.
     */
                            function baseMatchesProperty(path, srcValue) {
                            }
                            /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns `object`.
     */
                            function baseMerge(object, source, customizer, stackA, stackB) {
                            }
                            /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
                            function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
                            }
                            /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
                            function baseProperty(key) {
                                return function (object) {
                                    return object == null ? undefined : object[key];
                                };
                            }
                            /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
                            function basePropertyDeep(path) {
                            }
                            /**
     * The base implementation of `_.pullAt` without support for individual
     * index arguments and capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
                            function basePullAt(array, indexes) {
                            }
                            /**
     * The base implementation of `_.random` without support for argument juggling
     * and returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns the random number.
     */
                            function baseRandom(min, max) {
                            }
                            /**
     * The base implementation of `_.reduce` and `_.reduceRight` without support
     * for callback shorthands and `this` binding, which iterates over `collection`
     * using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initFromCollection Specify using the first or last element
     *  of `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
                            function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
                            }
                            /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
                            var baseSetData = !metaMap ? identity : function (func, data) {
                            };
                            /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
                            function baseSlice(array, start, end) {
                            }
                            /**
     * The base implementation of `_.some` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
                            function baseSome(collection, predicate) {
                            }
                            /**
     * The base implementation of `_.sortBy` which uses `comparer` to define
     * the sort order of `array` and replaces criteria objects with their
     * corresponding values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
                            function baseSortBy(array, comparer) {
                            }
                            /**
     * The base implementation of `_.sortByOrder` without param guards.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
                            function baseSortByOrder(collection, iteratees, orders) {
                            }
                            /**
     * The base implementation of `_.sum` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
                            function baseSum(collection, iteratee) {
                            }
                            /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
                            function baseUniq(array, iteratee) {
                            }
                            /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
                            function baseValues(object, props) {
                            }
                            /**
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
     * and `_.takeWhile` without support for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
                            function baseWhile(array, predicate, isDrop, fromRight) {
                            }
                            /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to peform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
                            function baseWrapperValue(value, actions) {
                            }
                            /**
     * Performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
                            function binaryIndex(array, value, retHighest) {
                            }
                            /**
     * This function is like `binaryIndex` except that it invokes `iteratee` for
     * `value` and each element of `array` to compute their sort ranking. The
     * iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
                            function binaryIndexBy(array, value, iteratee, retHighest) {
                            }
                            /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
                            function bindCallback(func, thisArg, argCount) {
                            }
                            /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
                            function bufferClone(buffer) {
                            }
                            /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
                            function composeArgs(args, partials, holders) {
                            }
                            /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
                            function composeArgsRight(args, partials, holders) {
                            }
                            /**
     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
                            function createAggregator(setter, initializer) {
                                return function (collection, iteratee, thisArg) {
                                };
                            }
                            /**
     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
                            function createAssigner(assigner) {
                                return restParam(function (object, sources) {
                                });
                            }
                            /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
                            function createBaseEach(eachFunc, fromRight) {
                                return function (collection, iteratee) {
                                };
                            }
                            /**
     * Creates a base function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
                            function createBaseFor(fromRight) {
                                return function (object, iteratee, keysFunc) {
                                    var iterable = toObject(object), props = keysFunc(object), length = props.length, index = fromRight ? length : -1;
                                    while (fromRight ? index-- : ++index < length) {
                                        var key = props[index];
                                        if (iteratee(iterable[key], key, iterable) === false) {
                                            break;
                                        }
                                    }
                                    return object;
                                };
                            }
                            /**
     * Creates a function that wraps `func` and invokes it with the `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new bound function.
     */
                            function createBindWrapper(func, thisArg) {
                            }
                            /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
                            function createCache(values) {
                            }
                            /**
     * Creates a function that produces compound words out of the words in a
     * given string.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
                            function createCompounder(callback) {
                                return function (string) {
                                };
                            }
                            /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
                            function createCtorWrapper(Ctor) {
                            }
                            /**
     * Creates a `_.curry` or `_.curryRight` function.
     *
     * @private
     * @param {boolean} flag The curry bit flag.
     * @returns {Function} Returns the new curry function.
     */
                            function createCurry(flag) {
                                function curryFunc(func, arity, guard) {
                                }
                                return curryFunc;
                            }
                            /**
     * Creates a `_.defaults` or `_.defaultsDeep` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Function} Returns the new defaults function.
     */
                            function createDefaults(assigner, customizer) {
                                return restParam(function (args) {
                                });
                            }
                            /**
     * Creates a `_.max` or `_.min` function.
     *
     * @private
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {Function} Returns the new extremum function.
     */
                            function createExtremum(comparator, exValue) {
                                return function (collection, iteratee, thisArg) {
                                };
                            }
                            /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
                            function createFind(eachFunc, fromRight) {
                                return function (collection, predicate, thisArg) {
                                };
                            }
                            /**
     * Creates a `_.findIndex` or `_.findLastIndex` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
                            function createFindIndex(fromRight) {
                                return function (array, predicate, thisArg) {
                                };
                            }
                            /**
     * Creates a `_.findKey` or `_.findLastKey` function.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new find function.
     */
                            function createFindKey(objectFunc) {
                                return function (object, predicate, thisArg) {
                                };
                            }
                            /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
                            function createFlow(fromRight) {
                                return function () {
                                };
                            }
                            /**
     * Creates a function for `_.forEach` or `_.forEachRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
                            function createForEach(arrayFunc, eachFunc) {
                                return function (collection, iteratee, thisArg) {
                                };
                            }
                            /**
     * Creates a function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
                            function createForIn(objectFunc) {
                                return function (object, iteratee, thisArg) {
                                };
                            }
                            /**
     * Creates a function for `_.forOwn` or `_.forOwnRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
                            function createForOwn(objectFunc) {
                                return function (object, iteratee, thisArg) {
                                };
                            }
                            /**
     * Creates a function for `_.mapKeys` or `_.mapValues`.
     *
     * @private
     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
     * @returns {Function} Returns the new map function.
     */
                            function createObjectMapper(isMapKeys) {
                                return function (object, iteratee, thisArg) {
                                };
                            }
                            /**
     * Creates a function for `_.padLeft` or `_.padRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify padding from the right.
     * @returns {Function} Returns the new pad function.
     */
                            function createPadDir(fromRight) {
                                return function (string, length, chars) {
                                };
                            }
                            /**
     * Creates a `_.partial` or `_.partialRight` function.
     *
     * @private
     * @param {boolean} flag The partial bit flag.
     * @returns {Function} Returns the new partial function.
     */
                            function createPartial(flag) {
                                var partialFunc = restParam(function (func, partials) {
                                });
                                return partialFunc;
                            }
                            /**
     * Creates a function for `_.reduce` or `_.reduceRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
                            function createReduce(arrayFunc, eachFunc) {
                                return function (collection, iteratee, accumulator, thisArg) {
                                };
                            }
                            /**
     * Creates a function that wraps `func` and invokes it with optional `this`
     * binding of, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
                            function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
                                var isAry = bitmask & ARY_FLAG, isBind = bitmask & BIND_FLAG, isBindKey = bitmask & BIND_KEY_FLAG, isCurry = bitmask & CURRY_FLAG, isCurryBound = bitmask & CURRY_BOUND_FLAG, isCurryRight = bitmask & CURRY_RIGHT_FLAG, Ctor = isBindKey ? undefined : createCtorWrapper(func);
                                function wrapper() {
                                }
                                return wrapper;
                            }
                            /**
     * Creates the padding required for `string` based on the given `length`.
     * The `chars` string is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the pad for `string`.
     */
                            function createPadding(string, length, chars) {
                            }
                            /**
     * Creates a function that wraps `func` and invokes it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to partially apply arguments to.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new bound function.
     */
                            function createPartialWrapper(func, bitmask, thisArg, partials) {
                            }
                            /**
     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
                            function createRound(methodName) {
                                var func = Math[methodName];
                                return function (number, precision) {
                                };
                            }
                            /**
     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
     *
     * @private
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {Function} Returns the new index function.
     */
                            function createSortedIndex(retHighest) {
                                return function (array, value, iteratee, thisArg) {
                                };
                            }
                            /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
                            function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                            }
                            /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing arrays.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
                            function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
                            }
                            /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
                            function equalByTag(object, other, tag) {
                            }
                            /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
                            function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
                            }
                            /**
     * Gets the appropriate "callback" function. If the `_.callback` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseCallback` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function} Returns the chosen function or its result.
     */
                            function getCallback(func, thisArg, argCount) {
                            }
                            /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
                            var getData = !metaMap ? noop : function (func) {
                            };
                            /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
                            function getFuncName(func) {
                            }
                            /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseIndexOf` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function|number} Returns the chosen function or its result.
     */
                            function getIndexOf(collection, target, fromIndex) {
                            }
                            /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
                            var getLength = baseProperty('length');
                            /**
     * Gets the propery names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
                            function getMatchData(object) {
                            }
                            /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
                            function getNative(object, key) {
                                var value = object == null ? undefined : object[key];
                                return isNative(value) ? value : undefined;
                            }
                            /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
                            function getView(start, end, transforms) {
                            }
                            /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
                            function initCloneArray(array) {
                            }
                            /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
                            function initCloneObject(object) {
                            }
                            /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
                            function initCloneByTag(object, tag, isDeep) {
                            }
                            /**
     * Invokes the method at `path` on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
                            function invokePath(object, path, args) {
                            }
                            /**
     * Checks if `value` is array-like.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     */
                            function isArrayLike(value) {
                                return value != null && isLength(getLength(value));
                            }
                            /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
                            function isIndex(value, length) {
                            }
                            /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
                            function isIterateeCall(value, index, object) {
                            }
                            /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
                            function isKey(value, object) {
                            }
                            /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
                            function isLaziable(func) {
                            }
                            /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
                            function isLength(value) {
                                return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
                            }
                            /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
                            function isStrictComparable(value) {
                            }
                            /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers required to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * augment function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * common case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
                            function mergeData(data, source) {
                            }
                            /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
                            function mergeDefaults(objectValue, sourceValue) {
                            }
                            /**
     * A specialized version of `_.pick` which picks `object` properties specified
     * by `props`.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
                            function pickByArray(object, props) {
                            }
                            /**
     * A specialized version of `_.pick` which picks `object` properties `predicate`
     * returns truthy for.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Object} Returns the new object.
     */
                            function pickByCallback(object, predicate) {
                            }
                            /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
                            function reorder(array, indexes) {
                            }
                            /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
                            var setData = function () {
                                var count = 0, lastCalled = 0;
                                return function (key, value) {
                                };
                            }();
                            /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
                            function shimKeys(object) {
                                var props = keysIn(object), propsLength = props.length, length = propsLength && object.length;
                                var allowIndexes = !!length && isLength(length) && (isArray(object) || isArguments(object));
                                var index = -1, result = [];
                                while (++index < propsLength) {
                                    var key = props[index];
                                    if (allowIndexes && isIndex(key, length) || hasOwnProperty.call(object, key)) {
                                        result.push(key);
                                    }
                                }
                                return result;
                            }
                            /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array|Object} Returns the array-like object.
     */
                            function toIterable(value) {
                            }
                            /**
     * Converts `value` to an object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
                            function toObject(value) {
                                return isObject(value) ? value : Object(value);
                            }
                            /**
     * Converts `value` to property path array if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
                            function toPath(value) {
                            }
                            /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
                            function wrapperClone(wrapper) {
                            }
                            /*------------------------------------------------------------------------*/
                            /**
     * Creates an array of elements split into groups the length of `size`.
     * If `collection` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
                            function chunk(array, size, guard) {
                            }
                            /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
                            function compact(array) {
                            }
                            /**
     * Creates an array of unique `array` values not included in the other
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3], [4, 2]);
     * // => [1, 3]
     */
                            var difference = restParam(function (array, values) {
                            });
                            /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
                            function drop(array, n, guard) {
                            }
                            /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
                            function dropRight(array, n, guard) {
                            }
                            /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that match the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [1]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
     * // => ['barney']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
                            function dropRightWhile(array, predicate, thisArg) {
                            }
                            /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropWhile(users, 'active', false), 'user');
     * // => ['pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
                            function dropWhile(array, predicate, thisArg) {
                            }
                            /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8], '*', 1, 2);
     * // => [4, '*', 8]
     */
                            function fill(array, value, start, end) {
                            }
                            /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(chr) {
     *   return chr.user == 'barney';
     * });
     * // => 0
     *
     * // using the `_.matches` callback shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findIndex(users, 'active', false);
     * // => 0
     *
     * // using the `_.property` callback shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
                            var findIndex = createFindIndex();
                            /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(chr) {
     *   return chr.user == 'pebbles';
     * });
     * // => 2
     *
     * // using the `_.matches` callback shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastIndex(users, 'active', false);
     * // => 2
     *
     * // using the `_.property` callback shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
                            var findLastIndex = createFindIndex(true);
                            /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias head
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([]);
     * // => undefined
     */
                            function first(array) {
                            }
                            /**
     * Flattens a nested array. If `isDeep` is `true` the array is recursively
     * flattened, otherwise it is only flattened a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     *
     * // using `isDeep`
     * _.flatten([1, [2, 3, [4]]], true);
     * // => [1, 2, 3, 4]
     */
                            function flatten(array, isDeep, guard) {
                            }
                            /**
     * Recursively flattens a nested array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
                            function flattenDeep(array) {
                            }
                            /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
     * performs a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     *
     * // performing a binary search
     * _.indexOf([1, 1, 2, 2], 2, true);
     * // => 2
     */
                            function indexOf(array, value, fromIndex) {
                            }
                            /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
                            function initial(array) {
                            }
                            /**
     * Creates an array of unique values that are included in all of the provided
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     * _.intersection([1, 2], [4, 2], [2, 1]);
     * // => [2]
     */
                            var intersection = restParam(function (arrays) {
                            });
                            /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
                            function last(array) {
                            }
                            /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
     *  or `true` to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     *
     * // performing a binary search
     * _.lastIndexOf([1, 1, 2, 2], 2, true);
     * // => 3
     */
                            function lastIndexOf(array, value, fromIndex) {
                            }
                            /**
     * Removes all provided values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
                            function pull() {
                            }
                            /**
     * Removes elements from `array` corresponding to the given indexes and returns
     * an array of the removed elements. Indexes may be specified as an array of
     * indexes or as individual arguments.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
                            var pullAt = restParam(function (array, indexes) {
                            });
                            /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
                            function remove(array, predicate, thisArg) {
                            }
                            /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias tail
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     */
                            function rest(array) {
                            }
                            /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of `Array#slice` to support node
     * lists in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
                            function slice(array, start, end) {
                            }
                            /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order. If an iteratee
     * function is provided it is invoked for `value` and each element of `array`
     * to compute their sort ranking. The iteratee is bound to `thisArg` and
     * invoked with one argument; (value).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 4, 5, 5], 5);
     * // => 2
     *
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
     *
     * // using an iteratee function
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
     *   return this.data[word];
     * }, dict);
     * // => 1
     *
     * // using the `_.property` callback shorthand
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 1
     */
                            var sortedIndex = createSortedIndex();
                            /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 4, 5, 5], 5);
     * // => 4
     */
                            var sortedLastIndex = createSortedIndex(true);
                            /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
                            function take(array, n, guard) {
                            }
                            /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
                            function takeRight(array, n, guard) {
                            }
                            /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
     * and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [2, 3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
     * // => []
     */
                            function takeRightWhile(array, predicate, thisArg) {
                            }
                            /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [1, 2]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeWhile(users, 'active', false), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeWhile(users, 'active'), 'user');
     * // => []
     */
                            function takeWhile(array, predicate, thisArg) {
                            }
                            /**
     * Creates an array of unique values, in order, from all of the provided arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([1, 2], [4, 2], [2, 1]);
     * // => [1, 2, 4]
     */
                            var union = restParam(function (arrays) {
                            });
                            /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurence of each element
     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
     * for sorted arrays. If an iteratee function is provided it is invoked for
     * each element in the array to generate the criterion by which uniqueness
     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, array).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {boolean} [isSorted] Specify the array is sorted.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new duplicate-value-free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2], true);
     * // => [1, 2]
     *
     * // using an iteratee function
     * _.uniq([1, 2.5, 1.5, 2], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => [1, 2.5]
     *
     * // using the `_.property` callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
                            function uniq(array, isSorted, iteratee, thisArg) {
                            }
                            /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
                            function unzip(array) {
                            }
                            /**
     * This method is like `_.unzip` except that it accepts an iteratee to specify
     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee] The function to combine regrouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
                            function unzipWith(array, iteratee, thisArg) {
                            }
                            /**
     * Creates an array excluding all provided values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
                            var without = restParam(function (array, values) {
                            });
                            /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([1, 2], [4, 2]);
     * // => [1, 4]
     */
                            function xor() {
                            }
                            /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
                            var zip = restParam(unzip);
                            /**
     * The inverse of `_.pairs`; this method returns an object composed from arrays
     * of property names and values. Provide either a single two dimensional array,
     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
     * and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Array
     * @param {Array} props The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
                            function zipObject(props, values) {
                            }
                            /**
     * This method is like `_.zip` except that it accepts an iteratee to specify
     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee] The function to combine grouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
     * // => [111, 222]
     */
                            var zipWith = restParam(function (arrays) {
                            });
                            /*------------------------------------------------------------------------*/
                            /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(users)
     *   .sortBy('age')
     *   .map(function(chr) {
     *     return chr.user + ' is ' + chr.age;
     *   })
     *   .first()
     *   .value();
     * // => 'pebbles is 1'
     */
                            function chain(value) {
                            }
                            /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
                            function tap(value, interceptor, thisArg) {
                            }
                            /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
                            function thru(value, interceptor, thisArg) {
                            }
                            /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).first();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users).chain()
     *   .first()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
                            function wrapperChain() {
                            }
                            /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
                            function wrapperCommit() {
                            }
                            /**
     * Creates a new array joining a wrapped array with any additional arrays
     * and/or values.
     *
     * @name concat
     * @memberOf _
     * @category Chain
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var wrapped = _(array).concat(2, [3], [[4]]);
     *
     * console.log(wrapped.value());
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
                            var wrapperConcat = restParam(function (values) {
                            });
                            /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).map(function(value) {
     *   return Math.pow(value, 2);
     * });
     *
     * var other = [3, 4];
     * var otherWrapped = wrapped.plant(other);
     *
     * otherWrapped.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
                            function wrapperPlant(value) {
                            }
                            /**
     * Reverses the wrapped array so the first element becomes the last, the
     * second element becomes the second to last, and so on.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
                            function wrapperReverse() {
                            }
                            /**
     * Produces the result of coercing the unwrapped value to a string.
     *
     * @name toString
     * @memberOf _
     * @category Chain
     * @returns {string} Returns the coerced string value.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
                            function wrapperToString() {
                            }
                            /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias run, toJSON, valueOf
     * @category Chain
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
                            function wrapperValue() {
                            }
                            /*------------------------------------------------------------------------*/
                            /**
     * Creates an array of elements corresponding to the given keys, or indexes,
     * of `collection`. Keys may be specified as individual arguments or as arrays
     * of keys.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [props] The property names
     *  or indexes of elements to pick, specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * _.at(['a', 'b', 'c'], [0, 2]);
     * // => ['a', 'c']
     *
     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
     * // => ['barney', 'pebbles']
     */
                            var at = restParam(function (collection, props) {
                            });
                            /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
                            var countBy = createAggregator(function (result, value, key) {
                            });
                            /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * The predicate is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.every(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.every(users, 'active');
     * // => false
     */
                            function every(collection, predicate, thisArg) {
                            }
                            /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.filter([4, 5, 6], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [4, 6]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.filter(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.filter(users, 'active'), 'user');
     * // => ['barney']
     */
                            function filter(collection, predicate, thisArg) {
                            }
                            /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.result(_.find(users, function(chr) {
     *   return chr.age < 40;
     * }), 'user');
     * // => 'barney'
     *
     * // using the `_.matches` callback shorthand
     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.result(_.find(users, 'active', false), 'user');
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.result(_.find(users, 'active'), 'user');
     * // => 'barney'
     */
                            var find = createFind(baseEach);
                            /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
                            var findLast = createFind(baseEachRight, true);
                            /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning the first element that has equivalent property
     * values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
     * // => 'barney'
     *
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
     * // => 'fred'
     */
                            function findWhere(collection, source) {
                            }
                            /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection). Iteratee functions may exit iteration early
     * by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from left to right and returns the array
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
     *   console.log(n, key);
     * });
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
     */
                            var forEach = createForEach(arrayEach, baseEach);
                            /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEachRight(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from right to left and returns the array
     */
                            var forEachRight = createForEach(arrayEachRight, baseEachRight);
                            /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using the `_.property` callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
                            var groupBy = createAggregator(function (result, value, key) {
                            });
                            /**
     * Checks if `value` is in `collection` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @alias contains, include
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} target The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
                            function includes(collection, target, fromIndex, guard) {
                            }
                            /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return String.fromCharCode(object.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return this.fromCharCode(object.code);
     * }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
                            var indexBy = createAggregator(function (result, value, key) {
                            });
                            /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it is
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
                            var invoke = restParam(function (collection, path, args) {
                            });
                            /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
     * `sum`, `uniq`, and `words`
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function timesThree(n) {
     *   return n * 3;
     * }
     *
     * _.map([1, 2], timesThree);
     * // => [3, 6]
     *
     * _.map({ 'a': 1, 'b': 2 }, timesThree);
     * // => [3, 6] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
                            function map(collection, iteratee, thisArg) {
                            }
                            /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, while the second of which
     * contains elements `predicate` returns falsey for. The predicate is bound
     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * _.partition([1, 2, 3], function(n) {
     *   return n % 2;
     * });
     * // => [[1, 3], [2]]
     *
     * _.partition([1.2, 2.3, 3.4], function(n) {
     *   return this.floor(n) % 2;
     * }, Math);
     * // => [[1.2, 3.4], [2.3]]
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * var mapper = function(array) {
     *   return _.pluck(array, 'user');
     * };
     *
     * // using the `_.matches` callback shorthand
     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
     * // => [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.map(_.partition(users, 'active', false), mapper);
     * // => [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` callback shorthand
     * _.map(_.partition(users, 'active'), mapper);
     * // => [['fred'], ['barney', 'pebbles']]
     */
                            var partition = createAggregator(function (result, value, key) {
                            }, function () {
                            });
                            /**
     * Gets the property value of `path` from all elements in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|string} path The path of the property to pluck.
     * @returns {Array} Returns the property values.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(users, 'user');
     * // => ['barney', 'fred']
     *
     * var userIndex = _.indexBy(users, 'user');
     * _.pluck(userIndex, 'age');
     * // => [36, 40] (iteration order is not guaranteed)
     */
                            function pluck(collection, path) {
                            }
                            /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
     * and `sortByOrder`
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(total, n) {
     *   return total + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
     */
                            var reduce = createReduce(arrayReduce, baseEach);
                            /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
                            var reduceRight = createReduce(arrayReduceRight, baseEachRight);
                            /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.reject([1, 2, 3, 4], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [1, 3]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.reject(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.reject(users, 'active'), 'user');
     * // => ['barney']
     */
                            function reject(collection, predicate, thisArg) {
                            }
                            /**
     * Gets a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s).
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
                            function sample(collection, n, guard) {
                            }
                            /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
                            function shuffle(collection) {
                            }
                            /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the size of `collection`.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
                            function size(collection) {
                            }
                            /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * The function returns as soon as it finds a passing value and does not iterate
     * over the entire collection. The predicate is bound to `thisArg` and invoked
     * with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.some(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.some(users, 'active');
     * // => true
     */
                            function some(collection, predicate, thisArg) {
                            }
                            /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through `iteratee`. This method performs
     * a stable sort, that is, it preserves the original sort order of equal elements.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return Math.sin(n);
     * });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return this.sin(n);
     * }, Math);
     * // => [3, 1, 2]
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' },
     *   { 'user': 'barney' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.sortBy(users, 'user'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
                            function sortBy(collection, iteratee, thisArg) {
                            }
                            /**
     * This method is like `_.sortBy` except that it can sort by multiple iteratees
     * or property names.
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
     *  The iteratees to sort by, specified as individual values or arrays of values.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.map(_.sortByAll(users, 'user', function(chr) {
     *   return Math.floor(chr.age / 10);
     * }), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
                            var sortByAll = restParam(function (collection, iteratees) {
                            });
                            /**
     * This method is like `_.sortByAll` except that it allows specifying the
     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
     * values are sorted in ascending order. Otherwise, a value is sorted in
     * ascending order if its corresponding order is "asc", and descending if "desc".
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
                            function sortByOrder(collection, iteratees, orders, guard) {
                            }
                            /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning an array of all elements that have equivalent
     * property values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
     * // => ['barney']
     *
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
     * // => ['fred']
     */
                            function where(collection, source) {
                            }
                            /*------------------------------------------------------------------------*/
                            /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Date
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
                            var now = nativeNow || function () {
                            };
                            /*------------------------------------------------------------------------*/
                            /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it is called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
                            function after(n, func) {
                            }
                            /**
     * Creates a function that accepts up to `n` arguments ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
                            function ary(func, n, guard) {
                            }
                            /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it is called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery('#add').on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
                            function before(n, func) {
                            }
                            /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method does not set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
                            var bind = restParam(function (func, thisArg, partials) {
                            });
                            /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all enumerable function
     * properties, own and inherited, of `object` are bound.
     *
     * **Note:** This method does not set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} [methodNames] The object method names to bind,
     *  specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs' when the element is clicked
     */
                            var bindAll = restParam(function (object, methodNames) {
                            });
                            /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
                            var bindKey = restParam(function (object, key, partials) {
                            });
                            /**
     * Creates a function that accepts one or more arguments of `func` that when
     * called either invokes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` may be specified
     * if `func.length` is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
                            var curry = createCurry(CURRY_FLAG);
                            /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
                            var curryRight = createCurry(CURRY_RIGHT_FLAG);
                            /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the debounced function return the result of the last
     * `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it is invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
                            function debounce(func, wait, options) {
                            }
                            /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
                            var defer = restParam(function (func, args) {
                            });
                            /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
                            var delay = restParam(function (func, wait, args) {
                            });
                            /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
                            var flow = createFlow();
                            /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @alias backflow, compose
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
                            var flowRight = createFlow(true);
                            /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is coerced to a string and used as the
     * cache key. The `func` is invoked with the `this` binding of the memoized
     * function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
     *
     * upperCase('fred');
     * // => 'FRED'
     *
     * // modifying the result cache
     * upperCase.cache.set('fred', 'BARNEY');
     * upperCase('fred');
     * // => 'BARNEY'
     *
     * // replacing `_.memoize.Cache`
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'barney' };
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'fred' }
     *
     * _.memoize.Cache = WeakMap;
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'barney' }
     */
                            function memoize(func, resolver) {
                            }
                            /**
     * Creates a function that runs each argument through a corresponding
     * transform function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified as individual functions or arrays of functions.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var modded = _.modArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * modded(1, 2);
     * // => [1, 4]
     *
     * modded(5, 10);
     * // => [25, 20]
     */
                            var modArgs = restParam(function (func, transforms) {
                            });
                            /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
                            function negate(predicate) {
                            }
                            /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
                            function once(func) {
                            }
                            /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
                            var partial = createPartial(PARTIAL_FLAG);
                            /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
                            var partialRight = createPartial(PARTIAL_RIGHT_FLAG);
                            /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     *
     * var map = _.rearg(_.map, [1, 0]);
     * map(function(n) {
     *   return n * 3;
     * }, [1, 2, 3]);
     * // => [3, 6, 9]
     */
                            var rearg = restParam(function (func, indexes) {
                            });
                            /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.restParam(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
                            function restParam(func, start) {
                                if (typeof func != 'function') {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                start = nativeMax(start === undefined ? func.length - 1 : +start || 0, 0);
                                return function () {
                                };
                            }
                            /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
                            function spread(func) {
                            }
                            /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed invocations. Provide an options object to indicate
     * that `func` should be invoked on the leading and/or trailing edge of the
     * `wait` timeout. Subsequent calls to the throttled function return the
     * result of the last `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
                            function throttle(func, wait, options) {
                            }
                            /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
                            function wrap(value, wrapper) {
                            }
                            /*------------------------------------------------------------------------*/
                            /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
     * otherwise they are assigned by reference. If `customizer` is provided it is
     * invoked to produce the cloned values. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is bound to
     * `thisArg` and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var shallow = _.clone(users);
     * shallow[0] === users[0];
     * // => true
     *
     * var deep = _.clone(users, true);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.clone(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 0
     */
                            function clone(value, isDeep, customizer, thisArg) {
                            }
                            /**
     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
     * to produce the cloned values. If `customizer` returns `undefined` cloning
     * is handled by the method instead. The `customizer` is bound to `thisArg`
     * and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var deep = _.cloneDeep(users);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.cloneDeep(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 20
     */
                            function cloneDeep(value, customizer, thisArg) {
                            }
                            /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
                            function gt(value, other) {
                            }
                            /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
                            function gte(value, other) {
                            }
                            /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
                            function isArguments(value) {
                            }
                            /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(function() { return arguments; }());
     * // => false
     */
                            var isArray = nativeIsArray || function (value) {
                            };
                            /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
                            function isBoolean(value) {
                            }
                            /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
                            function isDate(value) {
                            }
                            /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
                            function isElement(value) {
                            }
                            /**
     * Checks if `value` is empty. A value is considered empty unless it is an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
                            function isEmpty(value) {
                            }
                            /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent. If `customizer` is provided it is invoked to compare values.
     * If `customizer` returns `undefined` comparisons are handled by the method
     * instead. The `customizer` is bound to `thisArg` and invoked with three
     * arguments: (value, other [, index|key]).
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. Functions and DOM nodes
     * are **not** supported. Provide a customizer function to extend support
     * for comparing other values.
     *
     * @static
     * @memberOf _
     * @alias eq
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * object == other;
     * // => false
     *
     * _.isEqual(object, other);
     * // => true
     *
     * // using a customizer callback
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqual(array, other, function(value, other) {
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
     *     return true;
     *   }
     * });
     * // => true
     */
                            function isEqual(value, other, customizer, thisArg) {
                            }
                            /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
                            function isError(value) {
                            }
                            /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(10);
     * // => true
     *
     * _.isFinite('10');
     * // => false
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite(Object(10));
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
                            function isFinite(value) {
                            }
                            /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
                            function isFunction(value) {
                                // The use of `Object#toString` avoids issues with the `typeof` operator
                                // in older versions of Chrome and Safari which return 'function' for regexes
                                // and Safari 8 equivalents which return 'object' for typed array constructors.
                                return isObject(value) && objToString.call(value) == funcTag;
                            }
                            /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
                            function isObject(value) {
                                // Avoid a V8 JIT bug in Chrome 19-20.
                                // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
                                var type = typeof value;
                                return !!value && (type == 'object' || type == 'function');
                            }
                            /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values. If `customizer` is provided
     * it is invoked to compare values. If `customizer` returns `undefined`
     * comparisons are handled by the method instead. The `customizer` is bound
     * to `thisArg` and invoked with three arguments: (value, other, index|key).
     *
     * **Note:** This method supports comparing properties of arrays, booleans,
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
     * and DOM nodes are **not** supported. Provide a customizer function to extend
     * support for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     *
     * // using a customizer callback
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
                            function isMatch(object, source, customizer, thisArg) {
                            }
                            /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
                            function isNaN(value) {
                            }
                            /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
                            function isNative(value) {
                                if (value == null) {
                                    return false;
                                }
                                if (isFunction(value)) {
                                    return reIsNative.test(fnToString.call(value));
                                }
                                return isObjectLike(value) && reIsHostCtor.test(value);
                            }
                            /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
                            function isNull(value) {
                            }
                            /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(8.4);
     * // => true
     *
     * _.isNumber(NaN);
     * // => true
     *
     * _.isNumber('8.4');
     * // => false
     */
                            function isNumber(value) {
                            }
                            /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
                            function isPlainObject(value) {
                            }
                            /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
                            function isRegExp(value) {
                            }
                            /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
                            function isString(value) {
                            }
                            /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
                            function isTypedArray(value) {
                            }
                            /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
                            function isUndefined(value) {
                            }
                            /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
                            function lt(value, other) {
                            }
                            /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
                            function lte(value, other) {
                            }
                            /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * (function() {
     *   return _.toArray(arguments).slice(1);
     * }(1, 2, 3));
     * // => [2, 3]
     */
                            function toArray(value) {
                            }
                            /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
                            function toPlainObject(value) {
                            }
                            /*------------------------------------------------------------------------*/
                            /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * overwrite property assignments of previous sources. If `customizer` is
     * provided it is invoked to produce the merged values of the destination and
     * source properties. If `customizer` returns `undefined` merging is handled
     * by the method instead. The `customizer` is bound to `thisArg` and invoked
     * with five arguments: (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     *
     * // using a customizer callback
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(object, other, function(a, b) {
     *   if (_.isArray(a)) {
     *     return a.concat(b);
     *   }
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
                            var merge = createAssigner(baseMerge);
                            /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources overwrite property assignments of previous sources.
     * If `customizer` is provided it is invoked to produce the assigned values.
     * The `customizer` is bound to `thisArg` and invoked with five arguments:
     * (objectValue, sourceValue, key, object, source).
     *
     * **Note:** This method mutates `object` and is based on
     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using a customizer callback
     * var defaults = _.partialRight(_.assign, function(value, other) {
     *   return _.isUndefined(value) ? other : value;
     * });
     *
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
                            var assign = createAssigner(function (object, source, customizer) {
                            });
                            /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
                            function create(prototype, properties, guard) {
                            }
                            /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
                            var defaults = createDefaults(assign, assignDefaults);
                            /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
                            var defaultsDeep = createDefaults(merge, mergeDefaults);
                            /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` callback shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
                            var findKey = createFindKey(baseForOwn);
                            /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles` assuming `_.findKey` returns `barney`
     *
     * // using the `_.matches` callback shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
                            var findLastKey = createFindKey(baseForOwnRight);
                            /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
     */
                            var forIn = createForIn(baseFor);
                            /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
     */
                            var forInRight = createForIn(baseForRight);
                            /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The `iteratee` is bound to `thisArg` and invoked with
     * three arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' and 'b' (iteration order is not guaranteed)
     */
                            var forOwn = createForOwn(baseForOwn);
                            /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
     */
                            var forOwnRight = createForOwn(baseForOwnRight);
                            /**
     * Creates an array of function property names from all enumerable properties,
     * own and inherited, of `object`.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * _.functions(_);
     * // => ['after', 'ary', 'assign', ...]
     */
                            function functions(object) {
                            }
                            /**
     * Gets the property value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
                            function get(object, path, defaultValue) {
                            }
                            /**
     * Checks if `path` is a direct property.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     */
                            function has(object, path) {
                            }
                            /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiValue` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiValue`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
                            function invert(object, multiValue, guard) {
                            }
                            /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
                            var keys = !nativeKeys ? shimKeys : function (object) {
                                var Ctor = object == null ? undefined : object.constructor;
                                if (typeof Ctor == 'function' && Ctor.prototype === object || typeof object != 'function' && isArrayLike(object)) {
                                    return shimKeys(object);
                                }
                                return isObject(object) ? nativeKeys(object) : [];
                            };
                            /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
                            function keysIn(object) {
                                if (object == null) {
                                    return [];
                                }
                                if (!isObject(object)) {
                                    object = Object(object);
                                }
                                var length = object.length;
                                length = length && isLength(length) && (isArray(object) || isArguments(object)) && length || 0;
                                var Ctor = object.constructor, index = -1, isProto = typeof Ctor == 'function' && Ctor.prototype === object, result = Array(length), skipIndexes = length > 0;
                                while (++index < length) {
                                    result[index] = index + '';
                                }
                                for (var key in object) {
                                    if (!(skipIndexes && isIndex(key, length)) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                                        result.push(key);
                                    }
                                }
                                return result;
                            }
                            /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
                            var mapKeys = createObjectMapper(true);
                            /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, key, object).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
     *   return n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * // using the `_.property` callback shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
                            var mapValues = createObjectMapper();
                            /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to omit, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.omit(object, 'age');
     * // => { 'user': 'fred' }
     *
     * _.omit(object, _.isNumber);
     * // => { 'user': 'fred' }
     */
                            var omit = restParam(function (object, props) {
                            });
                            /**
     * Creates a two dimensional array of the key-value pairs for `object`,
     * e.g. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
     */
                            function pairs(object) {
                            }
                            /**
     * Creates an object composed of the picked `object` properties. Property
     * names may be specified as individual arguments or as arrays of property
     * names. If `predicate` is provided it is invoked for each property of `object`
     * picking the properties `predicate` returns truthy for. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.pick(object, 'user');
     * // => { 'user': 'fred' }
     *
     * _.pick(object, _.isString);
     * // => { 'user': 'fred' }
     */
                            var pick = restParam(function (object, props) {
                            });
                            /**
     * This method is like `_.get` except that if the resolved value is a function
     * it is invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a.b.c', 'default');
     * // => 'default'
     *
     * _.result(object, 'a.b.c', _.constant('default'));
     * // => 'default'
     */
                            function result(object, path, defaultValue) {
                            }
                            /**
     * Sets the property value of `path` on `object`. If a portion of `path`
     * does not exist it is created.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to augment.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
                            function set(object, path, value) {
                            }
                            /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
     * with four arguments: (accumulator, value, key, object). Iteratee functions
     * may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     */
                            function transform(object, iteratee, accumulator, thisArg) {
                            }
                            /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
                            function values(object) {
                            }
                            /**
     * Creates an array of the own and inherited enumerable property values
     * of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
                            function valuesIn(object) {
                            }
                            /*------------------------------------------------------------------------*/
                            /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it is set to `start` with `start` then set to `0`.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} n The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     */
                            function inRange(value, start, end) {
                            }
                            /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number is returned.
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
     * number is returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
                            function random(min, max, floating) {
                            }
                            /*------------------------------------------------------------------------*/
                            /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
                            var camelCase = createCompounder(function (result, word, index) {
                            });
                            /**
     * Capitalizes the first character of `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
                            function capitalize(string) {
                            }
                            /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
                            function deburr(string) {
                            }
                            /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
                            function endsWith(string, target, position) {
                            }
                            /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
                            function escape(string) {
                            }
                            /**
     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
     */
                            function escapeRegExp(string) {
                            }
                            /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
                            var kebabCase = createCompounder(function (result, word, index) {
                            });
                            /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
                            function pad(string, length, chars) {
                            }
                            /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padLeft('abc', 6);
     * // => '   abc'
     *
     * _.padLeft('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padLeft('abc', 3);
     * // => 'abc'
     */
                            var padLeft = createPadDir();
                            /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padRight('abc', 6);
     * // => 'abc   '
     *
     * _.padRight('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padRight('abc', 3);
     * // => 'abc'
     */
                            var padRight = createPadDir(true);
                            /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
                            function parseInt(string, radix, guard) {
                            }
                            /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
                            function repeat(string, n) {
                            }
                            /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
                            var snakeCase = createCompounder(function (result, word, index) {
                            });
                            /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
                            var startCase = createCompounder(function (result, word, index) {
                            });
                            /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
                            function startsWith(string, target, position) {
                            }
                            /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
                            function template(string, options, otherOptions) {
                            }
                            /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
                            function trim(string, chars, guard) {
                            }
                            /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  abc  ');
     * // => 'abc  '
     *
     * _.trimLeft('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
                            function trimLeft(string, chars, guard) {
                            }
                            /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  abc  ');
     * // => '  abc'
     *
     * _.trimRight('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
                            function trimRight(string, chars, guard) {
                            }
                            /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object|number} [options] The options object or maximum string length.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.trunc('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', 24);
     * // => 'hi-diddly-ho there, n...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
                            function trunc(string, options, guard) {
                            }
                            /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
                            function unescape(string) {
                            }
                            /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
                            function words(string, pattern, guard) {
                            }
                            /*------------------------------------------------------------------------*/
                            /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
                            var attempt = restParam(function (func, args) {
                            });
                            /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and arguments of the created function. If `func` is a property name the
     * created callback returns the property value for a given element. If `func`
     * is an object the created callback returns `true` for elements that contain
     * the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @alias iteratee
     * @category Utility
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt'
     *       ? object[match[1]] > match[3]
     *       : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(users, 'age__gt36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
                            function callback(func, thisArg, guard) {
                            }
                            /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
                            function constant(value) {
                            }
                            /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
                            function identity(value) {
                            }
                            /**
     * Creates a function that performs a deep comparison between a given object
     * and `source`, returning `true` if the given object has equivalent property
     * values, else `false`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
                            function matches(source) {
                            }
                            /**
     * Creates a function that compares the property value of `path` on a given
     * object to `value`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
                            function matchesProperty(path, srcValue) {
                            }
                            /**
     * Creates a function that invokes the method at `path` on a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
                            var method = restParam(function (path, args) {
                            });
                            /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path on `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
                            var methodOf = restParam(function (object, args) {
                            });
                            /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
                            function mixin(object, source, options) {
                                if (options == null) {
                                    var isObj = isObject(source), props = isObj ? keys(source) : undefined, methodNames = props && props.length ? baseFunctions(source, props) : undefined;
                                    if (!(methodNames ? methodNames.length : isObj)) {
                                        methodNames = false;
                                        options = source;
                                        source = object;
                                        object = this;
                                    }
                                }
                                if (!methodNames) {
                                    methodNames = baseFunctions(source, keys(source));
                                }
                                var chain = true, index = -1, isFunc = isFunction(object), length = methodNames.length;
                                if (options === false) {
                                    chain = false;
                                } else if (isObject(options) && 'chain' in options) {
                                    chain = options.chain;
                                }
                                while (++index < length) {
                                    var methodName = methodNames[index], func = source[methodName];
                                    object[methodName] = func;
                                    if (isFunc) {
                                        object.prototype[methodName] = function (func) {
                                            return function () {
                                            };
                                        }(func);
                                    }
                                }
                                return object;
                            }
                            /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
                            function noConflict() {
                            }
                            /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
                            function noop() {
                            }
                            /**
     * Creates a function that returns the property value at `path` on a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
                            function property(path) {
                            }
                            /**
     * The opposite of `_.property`; this method creates a function that returns
     * the property value at a given path on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
                            function propertyOf(object) {
                            }
                            /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. If `end` is not specified it is
     * set to `start` with `start` then set to `0`. If `end` is less than `start`
     * a zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
                            function range(start, end, step) {
                            }
                            /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
     * one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) {
     *   mage.castSpell(n);
     * });
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
     *
     * _.times(3, function(n) {
     *   this.cast(n);
     * }, mage);
     * // => also invokes `mage.castSpell(n)` three times
     */
                            function times(n, iteratee, thisArg) {
                            }
                            /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
                            function uniqueId(prefix) {
                            }
                            /*------------------------------------------------------------------------*/
                            /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number to add.
     * @param {number} addend The second number to add.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
                            function add(augend, addend) {
                            }
                            /**
     * Calculates `n` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
                            var ceil = createRound('ceil');
                            /**
     * Calculates `n` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
                            var floor = createRound('floor');
                            /**
     * Gets the maximum value of `collection`. If `collection` is empty or falsey
     * `-Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => -Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.max(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using the `_.property` callback shorthand
     * _.max(users, 'age');
     * // => { 'user': 'fred', 'age': 40 }
     */
                            var max = createExtremum(gt, NEGATIVE_INFINITY);
                            /**
     * Gets the minimum value of `collection`. If `collection` is empty or falsey
     * `Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.min(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // using the `_.property` callback shorthand
     * _.min(users, 'age');
     * // => { 'user': 'barney', 'age': 36 }
     */
                            var min = createExtremum(lt, POSITIVE_INFINITY);
                            /**
     * Calculates `n` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
                            var round = createRound('round');
                            /**
     * Gets the sum of the values in `collection`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 6]);
     * // => 10
     *
     * _.sum({ 'a': 4, 'b': 6 });
     * // => 10
     *
     * var objects = [
     *   { 'n': 4 },
     *   { 'n': 6 }
     * ];
     *
     * _.sum(objects, function(object) {
     *   return object.n;
     * });
     * // => 10
     *
     * // using the `_.property` callback shorthand
     * _.sum(objects, 'n');
     * // => 10
     */
                            function sum(collection, iteratee, thisArg) {
                            }
                            /*------------------------------------------------------------------------*/
                            // Ensure wrappers are instances of `baseLodash`.
                            lodash.prototype = baseLodash.prototype;
                            LodashWrapper.prototype = baseCreate(baseLodash.prototype);
                            LodashWrapper.prototype.constructor = LodashWrapper;
                            LazyWrapper.prototype = baseCreate(baseLodash.prototype);
                            LazyWrapper.prototype.constructor = LazyWrapper;
                            // Add functions to the `Map` cache.
                            MapCache.prototype['delete'] = mapDelete;
                            MapCache.prototype.get = mapGet;
                            MapCache.prototype.has = mapHas;
                            MapCache.prototype.set = mapSet;
                            // Add functions to the `Set` cache.
                            SetCache.prototype.push = cachePush;
                            // Assign cache to `_.memoize`.
                            memoize.Cache = MapCache;
                            // Add functions that return wrapped values when chaining.
                            lodash.after = after;
                            lodash.ary = ary;
                            lodash.assign = assign;
                            lodash.at = at;
                            lodash.before = before;
                            lodash.bind = bind;
                            lodash.bindAll = bindAll;
                            lodash.bindKey = bindKey;
                            lodash.callback = callback;
                            lodash.chain = chain;
                            lodash.chunk = chunk;
                            lodash.compact = compact;
                            lodash.constant = constant;
                            lodash.countBy = countBy;
                            lodash.create = create;
                            lodash.curry = curry;
                            lodash.curryRight = curryRight;
                            lodash.debounce = debounce;
                            lodash.defaults = defaults;
                            lodash.defaultsDeep = defaultsDeep;
                            lodash.defer = defer;
                            lodash.delay = delay;
                            lodash.difference = difference;
                            lodash.drop = drop;
                            lodash.dropRight = dropRight;
                            lodash.dropRightWhile = dropRightWhile;
                            lodash.dropWhile = dropWhile;
                            lodash.fill = fill;
                            lodash.filter = filter;
                            lodash.flatten = flatten;
                            lodash.flattenDeep = flattenDeep;
                            lodash.flow = flow;
                            lodash.flowRight = flowRight;
                            lodash.forEach = forEach;
                            lodash.forEachRight = forEachRight;
                            lodash.forIn = forIn;
                            lodash.forInRight = forInRight;
                            lodash.forOwn = forOwn;
                            lodash.forOwnRight = forOwnRight;
                            lodash.functions = functions;
                            lodash.groupBy = groupBy;
                            lodash.indexBy = indexBy;
                            lodash.initial = initial;
                            lodash.intersection = intersection;
                            lodash.invert = invert;
                            lodash.invoke = invoke;
                            lodash.keys = keys;
                            lodash.keysIn = keysIn;
                            lodash.map = map;
                            lodash.mapKeys = mapKeys;
                            lodash.mapValues = mapValues;
                            lodash.matches = matches;
                            lodash.matchesProperty = matchesProperty;
                            lodash.memoize = memoize;
                            lodash.merge = merge;
                            lodash.method = method;
                            lodash.methodOf = methodOf;
                            lodash.mixin = mixin;
                            lodash.modArgs = modArgs;
                            lodash.negate = negate;
                            lodash.omit = omit;
                            lodash.once = once;
                            lodash.pairs = pairs;
                            lodash.partial = partial;
                            lodash.partialRight = partialRight;
                            lodash.partition = partition;
                            lodash.pick = pick;
                            lodash.pluck = pluck;
                            lodash.property = property;
                            lodash.propertyOf = propertyOf;
                            lodash.pull = pull;
                            lodash.pullAt = pullAt;
                            lodash.range = range;
                            lodash.rearg = rearg;
                            lodash.reject = reject;
                            lodash.remove = remove;
                            lodash.rest = rest;
                            lodash.restParam = restParam;
                            lodash.set = set;
                            lodash.shuffle = shuffle;
                            lodash.slice = slice;
                            lodash.sortBy = sortBy;
                            lodash.sortByAll = sortByAll;
                            lodash.sortByOrder = sortByOrder;
                            lodash.spread = spread;
                            lodash.take = take;
                            lodash.takeRight = takeRight;
                            lodash.takeRightWhile = takeRightWhile;
                            lodash.takeWhile = takeWhile;
                            lodash.tap = tap;
                            lodash.throttle = throttle;
                            lodash.thru = thru;
                            lodash.times = times;
                            lodash.toArray = toArray;
                            lodash.toPlainObject = toPlainObject;
                            lodash.transform = transform;
                            lodash.union = union;
                            lodash.uniq = uniq;
                            lodash.unzip = unzip;
                            lodash.unzipWith = unzipWith;
                            lodash.values = values;
                            lodash.valuesIn = valuesIn;
                            lodash.where = where;
                            lodash.without = without;
                            lodash.wrap = wrap;
                            lodash.xor = xor;
                            lodash.zip = zip;
                            lodash.zipObject = zipObject;
                            lodash.zipWith = zipWith;
                            // Add aliases.
                            lodash.backflow = flowRight;
                            lodash.collect = map;
                            lodash.compose = flowRight;
                            lodash.each = forEach;
                            lodash.eachRight = forEachRight;
                            lodash.extend = assign;
                            lodash.iteratee = callback;
                            lodash.methods = functions;
                            lodash.object = zipObject;
                            lodash.select = filter;
                            lodash.tail = rest;
                            lodash.unique = uniq;
                            // Add functions to `lodash.prototype`.
                            mixin(lodash, lodash);
                            /*------------------------------------------------------------------------*/
                            // Add functions that return unwrapped values when chaining.
                            lodash.add = add;
                            lodash.attempt = attempt;
                            lodash.camelCase = camelCase;
                            lodash.capitalize = capitalize;
                            lodash.ceil = ceil;
                            lodash.clone = clone;
                            lodash.cloneDeep = cloneDeep;
                            lodash.deburr = deburr;
                            lodash.endsWith = endsWith;
                            lodash.escape = escape;
                            lodash.escapeRegExp = escapeRegExp;
                            lodash.every = every;
                            lodash.find = find;
                            lodash.findIndex = findIndex;
                            lodash.findKey = findKey;
                            lodash.findLast = findLast;
                            lodash.findLastIndex = findLastIndex;
                            lodash.findLastKey = findLastKey;
                            lodash.findWhere = findWhere;
                            lodash.first = first;
                            lodash.floor = floor;
                            lodash.get = get;
                            lodash.gt = gt;
                            lodash.gte = gte;
                            lodash.has = has;
                            lodash.identity = identity;
                            lodash.includes = includes;
                            lodash.indexOf = indexOf;
                            lodash.inRange = inRange;
                            lodash.isArguments = isArguments;
                            lodash.isArray = isArray;
                            lodash.isBoolean = isBoolean;
                            lodash.isDate = isDate;
                            lodash.isElement = isElement;
                            lodash.isEmpty = isEmpty;
                            lodash.isEqual = isEqual;
                            lodash.isError = isError;
                            lodash.isFinite = isFinite;
                            lodash.isFunction = isFunction;
                            lodash.isMatch = isMatch;
                            lodash.isNaN = isNaN;
                            lodash.isNative = isNative;
                            lodash.isNull = isNull;
                            lodash.isNumber = isNumber;
                            lodash.isObject = isObject;
                            lodash.isPlainObject = isPlainObject;
                            lodash.isRegExp = isRegExp;
                            lodash.isString = isString;
                            lodash.isTypedArray = isTypedArray;
                            lodash.isUndefined = isUndefined;
                            lodash.kebabCase = kebabCase;
                            lodash.last = last;
                            lodash.lastIndexOf = lastIndexOf;
                            lodash.lt = lt;
                            lodash.lte = lte;
                            lodash.max = max;
                            lodash.min = min;
                            lodash.noConflict = noConflict;
                            lodash.noop = noop;
                            lodash.now = now;
                            lodash.pad = pad;
                            lodash.padLeft = padLeft;
                            lodash.padRight = padRight;
                            lodash.parseInt = parseInt;
                            lodash.random = random;
                            lodash.reduce = reduce;
                            lodash.reduceRight = reduceRight;
                            lodash.repeat = repeat;
                            lodash.result = result;
                            lodash.round = round;
                            lodash.runInContext = runInContext;
                            lodash.size = size;
                            lodash.snakeCase = snakeCase;
                            lodash.some = some;
                            lodash.sortedIndex = sortedIndex;
                            lodash.sortedLastIndex = sortedLastIndex;
                            lodash.startCase = startCase;
                            lodash.startsWith = startsWith;
                            lodash.sum = sum;
                            lodash.template = template;
                            lodash.trim = trim;
                            lodash.trimLeft = trimLeft;
                            lodash.trimRight = trimRight;
                            lodash.trunc = trunc;
                            lodash.unescape = unescape;
                            lodash.uniqueId = uniqueId;
                            lodash.words = words;
                            // Add aliases.
                            lodash.all = every;
                            lodash.any = some;
                            lodash.contains = includes;
                            lodash.eq = isEqual;
                            lodash.detect = find;
                            lodash.foldl = reduce;
                            lodash.foldr = reduceRight;
                            lodash.head = first;
                            lodash.include = includes;
                            lodash.inject = reduce;
                            mixin(lodash, function () {
                                var source = {};
                                baseForOwn(lodash, function (func, methodName) {
                                    if (!lodash.prototype[methodName]) {
                                        source[methodName] = func;
                                    }
                                });
                                return source;
                            }(), false);
                            /*------------------------------------------------------------------------*/
                            // Add functions capable of returning wrapped and unwrapped values when chaining.
                            lodash.sample = sample;
                            lodash.prototype.sample = function (n) {
                            };
                            /*------------------------------------------------------------------------*/
                            /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
                            lodash.VERSION = VERSION;
                            // Assign default placeholders.
                            arrayEach([
                                'bind',
                                'bindKey',
                                'curry',
                                'curryRight',
                                'partial',
                                'partialRight'
                            ], function (methodName) {
                                lodash[methodName].placeholder = lodash;
                            });
                            // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
                            arrayEach([
                                'drop',
                                'take'
                            ], function (methodName, index) {
                                LazyWrapper.prototype[methodName] = function (n) {
                                };
                                LazyWrapper.prototype[methodName + 'Right'] = function (n) {
                                };
                            });
                            // Add `LazyWrapper` methods that accept an `iteratee` value.
                            arrayEach([
                                'filter',
                                'map',
                                'takeWhile'
                            ], function (methodName, index) {
                                var type = index + 1, isFilter = type != LAZY_MAP_FLAG;
                                LazyWrapper.prototype[methodName] = function (iteratee, thisArg) {
                                };
                            });
                            // Add `LazyWrapper` methods for `_.first` and `_.last`.
                            arrayEach([
                                'first',
                                'last'
                            ], function (methodName, index) {
                                var takeName = 'take' + (index ? 'Right' : '');
                                LazyWrapper.prototype[methodName] = function () {
                                };
                            });
                            // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
                            arrayEach([
                                'initial',
                                'rest'
                            ], function (methodName, index) {
                                var dropName = 'drop' + (index ? '' : 'Right');
                                LazyWrapper.prototype[methodName] = function () {
                                };
                            });
                            // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
                            arrayEach([
                                'pluck',
                                'where'
                            ], function (methodName, index) {
                                var operationName = index ? 'filter' : 'map', createCallback = index ? baseMatches : property;
                                LazyWrapper.prototype[methodName] = function (value) {
                                };
                            });
                            LazyWrapper.prototype.compact = function () {
                            };
                            LazyWrapper.prototype.reject = function (predicate, thisArg) {
                            };
                            LazyWrapper.prototype.slice = function (start, end) {
                            };
                            LazyWrapper.prototype.takeRightWhile = function (predicate, thisArg) {
                            };
                            LazyWrapper.prototype.toArray = function () {
                            };
                            // Add `LazyWrapper` methods to `lodash.prototype`.
                            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                                var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName), retUnwrapped = /^(?:first|last)$/.test(methodName), lodashFunc = lodash[retUnwrapped ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName];
                                if (!lodashFunc) {
                                    return;
                                }
                                lodash.prototype[methodName] = function () {
                                };
                            });
                            // Add `Array` and `String` methods to `lodash.prototype`.
                            arrayEach([
                                'join',
                                'pop',
                                'push',
                                'replace',
                                'shift',
                                'sort',
                                'splice',
                                'split',
                                'unshift'
                            ], function (methodName) {
                                var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru', retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);
                                lodash.prototype[methodName] = function () {
                                };
                            });
                            // Map minified function names to their real names.
                            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                                var lodashFunc = lodash[methodName];
                                if (lodashFunc) {
                                    var key = lodashFunc.name, names = realNames[key] || (realNames[key] = []);
                                    names.push({
                                        'name': methodName,
                                        'func': lodashFunc
                                    });
                                }
                            });
                            realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
                                    'name': 'wrapper',
                                    'func': undefined
                                }];
                            // Add functions to the lazy wrapper.
                            LazyWrapper.prototype.clone = lazyClone;
                            LazyWrapper.prototype.reverse = lazyReverse;
                            LazyWrapper.prototype.value = lazyValue;
                            // Add chaining functions to the `lodash` wrapper.
                            lodash.prototype.chain = wrapperChain;
                            lodash.prototype.commit = wrapperCommit;
                            lodash.prototype.concat = wrapperConcat;
                            lodash.prototype.plant = wrapperPlant;
                            lodash.prototype.reverse = wrapperReverse;
                            lodash.prototype.toString = wrapperToString;
                            lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
                            // Add function aliases to the `lodash` wrapper.
                            lodash.prototype.collect = lodash.prototype.map;
                            lodash.prototype.head = lodash.prototype.first;
                            lodash.prototype.select = lodash.prototype.filter;
                            lodash.prototype.tail = lodash.prototype.rest;
                            return lodash;
                        }
                        /*--------------------------------------------------------------------------*/
                        // Export lodash.
                        var _ = runInContext();
                        // Some AMD build optimizers like r.js check for condition patterns like the following:
                        if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
                            // Expose lodash to the global object when an AMD loader is present to avoid
                            // errors in cases where lodash is loaded by a script tag and not intended
                            // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
                            // more details.
                            root._ = _;
                            // Define as an anonymous module so, through path mapping, it can be
                            // referenced as the "underscore" module.
                            define(function () {
                            });
                        }    // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
                        else if (freeExports && freeModule) {
                            // Export for Node.js or RingoJS.
                            if (moduleExports) {
                                (freeModule.exports = _)._ = _;
                            }    // Export for Rhino with CommonJS support.
                            else {
                                freeExports._ = _;
                            }
                        } else {
                            // Export for a browser or Rhino.
                            root._ = _;
                        }
                    }.call(this));
                }.call(this, typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}));
            },
            {}
        ],
        39: [
            function (require, module, exports) {
                (function (process) {
                    var path = require(13);
                    var fs = require(3);
                    function Mime() {
                        // Map of extension -> mime type
                        this.types = Object.create(null);
                        // Map of mime type -> extension
                        this.extensions = Object.create(null);
                    }
                    /**
 * Define mimetype -> extension mappings.  Each key is a mime-type that maps
 * to an array of extensions associated with the type.  The first extension is
 * used as the default extension for the type.
 *
 * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
 *
 * @param map (Object) type definitions
 */
                    Mime.prototype.define = function (map) {
                        for (var type in map) {
                            var exts = map[type];
                            for (var i = 0; i < exts.length; i++) {
                                if (process.env.DEBUG_MIME && this.types[exts]) {
                                    console.warn(this._loading.replace(/.*\//, ''), 'changes "' + exts[i] + '" extension type from ' + this.types[exts] + ' to ' + type);
                                }
                                this.types[exts[i]] = type;
                            }
                            // Default extension is the first one we encounter
                            if (!this.extensions[type]) {
                                this.extensions[type] = exts[0];
                            }
                        }
                    };
                    /**
 * Load an Apache2-style ".types" file
 *
 * This may be called multiple times (it's expected).  Where files declare
 * overlapping types/extensions, the last file wins.
 *
 * @param file (String) path of file to load.
 */
                    Mime.prototype.load = function (file) {
                    };
                    /**
 * Lookup a mime type based on extension
 */
                    Mime.prototype.lookup = function (path, fallback) {
                        var ext = path.replace(/.*[\.\/\\]/, '').toLowerCase();
                        return this.types[ext] || fallback || this.default_type;
                    };
                    /**
 * Return file extension associated with a mime type
 */
                    Mime.prototype.extension = function (mimeType) {
                    };
                    // Default instance
                    var mime = new Mime();
                    // Define built-in types
                    mime.define(require(40));
                    // Default type
                    mime.default_type = mime.lookup('bin');
                    //
                    // Additional API specific to the default instance
                    //
                    mime.Mime = Mime;
                    /**
 * Lookup a charset based on mime type.
 */
                    mime.charsets = {
                        lookup: function (mimeType, fallback) {
                        }
                    };
                    module.exports = mime;
                }.call(this, require(14)));
            },
            {
                '13': 13,
                '14': 14,
                '3': 3,
                '40': 40
            }
        ],
        40: [
            function (require, module, exports) {
                module.exports = {
                    'application/andrew-inset': ['ez'],
                    'application/applixware': ['aw'],
                    'application/atom+xml': ['atom'],
                    'application/atomcat+xml': ['atomcat'],
                    'application/atomsvc+xml': ['atomsvc'],
                    'application/ccxml+xml': ['ccxml'],
                    'application/cdmi-capability': ['cdmia'],
                    'application/cdmi-container': ['cdmic'],
                    'application/cdmi-domain': ['cdmid'],
                    'application/cdmi-object': ['cdmio'],
                    'application/cdmi-queue': ['cdmiq'],
                    'application/cu-seeme': ['cu'],
                    'application/dash+xml': ['mdp'],
                    'application/davmount+xml': ['davmount'],
                    'application/docbook+xml': ['dbk'],
                    'application/dssc+der': ['dssc'],
                    'application/dssc+xml': ['xdssc'],
                    'application/ecmascript': ['ecma'],
                    'application/emma+xml': ['emma'],
                    'application/epub+zip': ['epub'],
                    'application/exi': ['exi'],
                    'application/font-tdpfr': ['pfr'],
                    'application/font-woff': ['woff'],
                    'application/font-woff2': ['woff2'],
                    'application/gml+xml': ['gml'],
                    'application/gpx+xml': ['gpx'],
                    'application/gxf': ['gxf'],
                    'application/hyperstudio': ['stk'],
                    'application/inkml+xml': [
                        'ink',
                        'inkml'
                    ],
                    'application/ipfix': ['ipfix'],
                    'application/java-archive': ['jar'],
                    'application/java-serialized-object': ['ser'],
                    'application/java-vm': ['class'],
                    'application/javascript': ['js'],
                    'application/json': [
                        'json',
                        'map'
                    ],
                    'application/json5': ['json5'],
                    'application/jsonml+json': ['jsonml'],
                    'application/lost+xml': ['lostxml'],
                    'application/mac-binhex40': ['hqx'],
                    'application/mac-compactpro': ['cpt'],
                    'application/mads+xml': ['mads'],
                    'application/marc': ['mrc'],
                    'application/marcxml+xml': ['mrcx'],
                    'application/mathematica': [
                        'ma',
                        'nb',
                        'mb'
                    ],
                    'application/mathml+xml': ['mathml'],
                    'application/mbox': ['mbox'],
                    'application/mediaservercontrol+xml': ['mscml'],
                    'application/metalink+xml': ['metalink'],
                    'application/metalink4+xml': ['meta4'],
                    'application/mets+xml': ['mets'],
                    'application/mods+xml': ['mods'],
                    'application/mp21': [
                        'm21',
                        'mp21'
                    ],
                    'application/mp4': [
                        'mp4s',
                        'm4p'
                    ],
                    'application/msword': [
                        'doc',
                        'dot'
                    ],
                    'application/mxf': ['mxf'],
                    'application/octet-stream': [
                        'bin',
                        'dms',
                        'lrf',
                        'mar',
                        'so',
                        'dist',
                        'distz',
                        'pkg',
                        'bpk',
                        'dump',
                        'elc',
                        'deploy',
                        'buffer'
                    ],
                    'application/oda': ['oda'],
                    'application/oebps-package+xml': ['opf'],
                    'application/ogg': ['ogx'],
                    'application/omdoc+xml': ['omdoc'],
                    'application/onenote': [
                        'onetoc',
                        'onetoc2',
                        'onetmp',
                        'onepkg'
                    ],
                    'application/oxps': ['oxps'],
                    'application/patch-ops-error+xml': ['xer'],
                    'application/pdf': ['pdf'],
                    'application/pgp-encrypted': ['pgp'],
                    'application/pgp-signature': [
                        'asc',
                        'sig'
                    ],
                    'application/pics-rules': ['prf'],
                    'application/pkcs10': ['p10'],
                    'application/pkcs7-mime': [
                        'p7m',
                        'p7c'
                    ],
                    'application/pkcs7-signature': ['p7s'],
                    'application/pkcs8': ['p8'],
                    'application/pkix-attr-cert': ['ac'],
                    'application/pkix-cert': ['cer'],
                    'application/pkix-crl': ['crl'],
                    'application/pkix-pkipath': ['pkipath'],
                    'application/pkixcmp': ['pki'],
                    'application/pls+xml': ['pls'],
                    'application/postscript': [
                        'ai',
                        'eps',
                        'ps'
                    ],
                    'application/prs.cww': ['cww'],
                    'application/pskc+xml': ['pskcxml'],
                    'application/rdf+xml': ['rdf'],
                    'application/reginfo+xml': ['rif'],
                    'application/relax-ng-compact-syntax': ['rnc'],
                    'application/resource-lists+xml': ['rl'],
                    'application/resource-lists-diff+xml': ['rld'],
                    'application/rls-services+xml': ['rs'],
                    'application/rpki-ghostbusters': ['gbr'],
                    'application/rpki-manifest': ['mft'],
                    'application/rpki-roa': ['roa'],
                    'application/rsd+xml': ['rsd'],
                    'application/rss+xml': ['rss'],
                    'application/rtf': ['rtf'],
                    'application/sbml+xml': ['sbml'],
                    'application/scvp-cv-request': ['scq'],
                    'application/scvp-cv-response': ['scs'],
                    'application/scvp-vp-request': ['spq'],
                    'application/scvp-vp-response': ['spp'],
                    'application/sdp': ['sdp'],
                    'application/set-payment-initiation': ['setpay'],
                    'application/set-registration-initiation': ['setreg'],
                    'application/shf+xml': ['shf'],
                    'application/smil+xml': [
                        'smi',
                        'smil'
                    ],
                    'application/sparql-query': ['rq'],
                    'application/sparql-results+xml': ['srx'],
                    'application/srgs': ['gram'],
                    'application/srgs+xml': ['grxml'],
                    'application/sru+xml': ['sru'],
                    'application/ssdl+xml': ['ssdl'],
                    'application/ssml+xml': ['ssml'],
                    'application/tei+xml': [
                        'tei',
                        'teicorpus'
                    ],
                    'application/thraud+xml': ['tfi'],
                    'application/timestamped-data': ['tsd'],
                    'application/vnd.3gpp.pic-bw-large': ['plb'],
                    'application/vnd.3gpp.pic-bw-small': ['psb'],
                    'application/vnd.3gpp.pic-bw-var': ['pvb'],
                    'application/vnd.3gpp2.tcap': ['tcap'],
                    'application/vnd.3m.post-it-notes': ['pwn'],
                    'application/vnd.accpac.simply.aso': ['aso'],
                    'application/vnd.accpac.simply.imp': ['imp'],
                    'application/vnd.acucobol': ['acu'],
                    'application/vnd.acucorp': [
                        'atc',
                        'acutc'
                    ],
                    'application/vnd.adobe.air-application-installer-package+zip': ['air'],
                    'application/vnd.adobe.formscentral.fcdt': ['fcdt'],
                    'application/vnd.adobe.fxp': [
                        'fxp',
                        'fxpl'
                    ],
                    'application/vnd.adobe.xdp+xml': ['xdp'],
                    'application/vnd.adobe.xfdf': ['xfdf'],
                    'application/vnd.ahead.space': ['ahead'],
                    'application/vnd.airzip.filesecure.azf': ['azf'],
                    'application/vnd.airzip.filesecure.azs': ['azs'],
                    'application/vnd.amazon.ebook': ['azw'],
                    'application/vnd.americandynamics.acc': ['acc'],
                    'application/vnd.amiga.ami': ['ami'],
                    'application/vnd.android.package-archive': ['apk'],
                    'application/vnd.anser-web-certificate-issue-initiation': ['cii'],
                    'application/vnd.anser-web-funds-transfer-initiation': ['fti'],
                    'application/vnd.antix.game-component': ['atx'],
                    'application/vnd.apple.installer+xml': ['mpkg'],
                    'application/vnd.apple.mpegurl': ['m3u8'],
                    'application/vnd.aristanetworks.swi': ['swi'],
                    'application/vnd.astraea-software.iota': ['iota'],
                    'application/vnd.audiograph': ['aep'],
                    'application/vnd.blueice.multipass': ['mpm'],
                    'application/vnd.bmi': ['bmi'],
                    'application/vnd.businessobjects': ['rep'],
                    'application/vnd.chemdraw+xml': ['cdxml'],
                    'application/vnd.chipnuts.karaoke-mmd': ['mmd'],
                    'application/vnd.cinderella': ['cdy'],
                    'application/vnd.claymore': ['cla'],
                    'application/vnd.cloanto.rp9': ['rp9'],
                    'application/vnd.clonk.c4group': [
                        'c4g',
                        'c4d',
                        'c4f',
                        'c4p',
                        'c4u'
                    ],
                    'application/vnd.cluetrust.cartomobile-config': ['c11amc'],
                    'application/vnd.cluetrust.cartomobile-config-pkg': ['c11amz'],
                    'application/vnd.commonspace': ['csp'],
                    'application/vnd.contact.cmsg': ['cdbcmsg'],
                    'application/vnd.cosmocaller': ['cmc'],
                    'application/vnd.crick.clicker': ['clkx'],
                    'application/vnd.crick.clicker.keyboard': ['clkk'],
                    'application/vnd.crick.clicker.palette': ['clkp'],
                    'application/vnd.crick.clicker.template': ['clkt'],
                    'application/vnd.crick.clicker.wordbank': ['clkw'],
                    'application/vnd.criticaltools.wbs+xml': ['wbs'],
                    'application/vnd.ctc-posml': ['pml'],
                    'application/vnd.cups-ppd': ['ppd'],
                    'application/vnd.curl.car': ['car'],
                    'application/vnd.curl.pcurl': ['pcurl'],
                    'application/vnd.dart': ['dart'],
                    'application/vnd.data-vision.rdz': ['rdz'],
                    'application/vnd.dece.data': [
                        'uvf',
                        'uvvf',
                        'uvd',
                        'uvvd'
                    ],
                    'application/vnd.dece.ttml+xml': [
                        'uvt',
                        'uvvt'
                    ],
                    'application/vnd.dece.unspecified': [
                        'uvx',
                        'uvvx'
                    ],
                    'application/vnd.dece.zip': [
                        'uvz',
                        'uvvz'
                    ],
                    'application/vnd.denovo.fcselayout-link': ['fe_launch'],
                    'application/vnd.dna': ['dna'],
                    'application/vnd.dolby.mlp': ['mlp'],
                    'application/vnd.dpgraph': ['dpg'],
                    'application/vnd.dreamfactory': ['dfac'],
                    'application/vnd.ds-keypoint': ['kpxx'],
                    'application/vnd.dvb.ait': ['ait'],
                    'application/vnd.dvb.service': ['svc'],
                    'application/vnd.dynageo': ['geo'],
                    'application/vnd.ecowin.chart': ['mag'],
                    'application/vnd.enliven': ['nml'],
                    'application/vnd.epson.esf': ['esf'],
                    'application/vnd.epson.msf': ['msf'],
                    'application/vnd.epson.quickanime': ['qam'],
                    'application/vnd.epson.salt': ['slt'],
                    'application/vnd.epson.ssf': ['ssf'],
                    'application/vnd.eszigno3+xml': [
                        'es3',
                        'et3'
                    ],
                    'application/vnd.ezpix-album': ['ez2'],
                    'application/vnd.ezpix-package': ['ez3'],
                    'application/vnd.fdf': ['fdf'],
                    'application/vnd.fdsn.mseed': ['mseed'],
                    'application/vnd.fdsn.seed': [
                        'seed',
                        'dataless'
                    ],
                    'application/vnd.flographit': ['gph'],
                    'application/vnd.fluxtime.clip': ['ftc'],
                    'application/vnd.framemaker': [
                        'fm',
                        'frame',
                        'maker',
                        'book'
                    ],
                    'application/vnd.frogans.fnc': ['fnc'],
                    'application/vnd.frogans.ltf': ['ltf'],
                    'application/vnd.fsc.weblaunch': ['fsc'],
                    'application/vnd.fujitsu.oasys': ['oas'],
                    'application/vnd.fujitsu.oasys2': ['oa2'],
                    'application/vnd.fujitsu.oasys3': ['oa3'],
                    'application/vnd.fujitsu.oasysgp': ['fg5'],
                    'application/vnd.fujitsu.oasysprs': ['bh2'],
                    'application/vnd.fujixerox.ddd': ['ddd'],
                    'application/vnd.fujixerox.docuworks': ['xdw'],
                    'application/vnd.fujixerox.docuworks.binder': ['xbd'],
                    'application/vnd.fuzzysheet': ['fzs'],
                    'application/vnd.genomatix.tuxedo': ['txd'],
                    'application/vnd.geogebra.file': ['ggb'],
                    'application/vnd.geogebra.tool': ['ggt'],
                    'application/vnd.geometry-explorer': [
                        'gex',
                        'gre'
                    ],
                    'application/vnd.geonext': ['gxt'],
                    'application/vnd.geoplan': ['g2w'],
                    'application/vnd.geospace': ['g3w'],
                    'application/vnd.gmx': ['gmx'],
                    'application/vnd.google-earth.kml+xml': ['kml'],
                    'application/vnd.google-earth.kmz': ['kmz'],
                    'application/vnd.grafeq': [
                        'gqf',
                        'gqs'
                    ],
                    'application/vnd.groove-account': ['gac'],
                    'application/vnd.groove-help': ['ghf'],
                    'application/vnd.groove-identity-message': ['gim'],
                    'application/vnd.groove-injector': ['grv'],
                    'application/vnd.groove-tool-message': ['gtm'],
                    'application/vnd.groove-tool-template': ['tpl'],
                    'application/vnd.groove-vcard': ['vcg'],
                    'application/vnd.hal+xml': ['hal'],
                    'application/vnd.handheld-entertainment+xml': ['zmm'],
                    'application/vnd.hbci': ['hbci'],
                    'application/vnd.hhe.lesson-player': ['les'],
                    'application/vnd.hp-hpgl': ['hpgl'],
                    'application/vnd.hp-hpid': ['hpid'],
                    'application/vnd.hp-hps': ['hps'],
                    'application/vnd.hp-jlyt': ['jlt'],
                    'application/vnd.hp-pcl': ['pcl'],
                    'application/vnd.hp-pclxl': ['pclxl'],
                    'application/vnd.ibm.minipay': ['mpy'],
                    'application/vnd.ibm.modcap': [
                        'afp',
                        'listafp',
                        'list3820'
                    ],
                    'application/vnd.ibm.rights-management': ['irm'],
                    'application/vnd.ibm.secure-container': ['sc'],
                    'application/vnd.iccprofile': [
                        'icc',
                        'icm'
                    ],
                    'application/vnd.igloader': ['igl'],
                    'application/vnd.immervision-ivp': ['ivp'],
                    'application/vnd.immervision-ivu': ['ivu'],
                    'application/vnd.insors.igm': ['igm'],
                    'application/vnd.intercon.formnet': [
                        'xpw',
                        'xpx'
                    ],
                    'application/vnd.intergeo': ['i2g'],
                    'application/vnd.intu.qbo': ['qbo'],
                    'application/vnd.intu.qfx': ['qfx'],
                    'application/vnd.ipunplugged.rcprofile': ['rcprofile'],
                    'application/vnd.irepository.package+xml': ['irp'],
                    'application/vnd.is-xpr': ['xpr'],
                    'application/vnd.isac.fcs': ['fcs'],
                    'application/vnd.jam': ['jam'],
                    'application/vnd.jcp.javame.midlet-rms': ['rms'],
                    'application/vnd.jisp': ['jisp'],
                    'application/vnd.joost.joda-archive': ['joda'],
                    'application/vnd.kahootz': [
                        'ktz',
                        'ktr'
                    ],
                    'application/vnd.kde.karbon': ['karbon'],
                    'application/vnd.kde.kchart': ['chrt'],
                    'application/vnd.kde.kformula': ['kfo'],
                    'application/vnd.kde.kivio': ['flw'],
                    'application/vnd.kde.kontour': ['kon'],
                    'application/vnd.kde.kpresenter': [
                        'kpr',
                        'kpt'
                    ],
                    'application/vnd.kde.kspread': ['ksp'],
                    'application/vnd.kde.kword': [
                        'kwd',
                        'kwt'
                    ],
                    'application/vnd.kenameaapp': ['htke'],
                    'application/vnd.kidspiration': ['kia'],
                    'application/vnd.kinar': [
                        'kne',
                        'knp'
                    ],
                    'application/vnd.koan': [
                        'skp',
                        'skd',
                        'skt',
                        'skm'
                    ],
                    'application/vnd.kodak-descriptor': ['sse'],
                    'application/vnd.las.las+xml': ['lasxml'],
                    'application/vnd.llamagraphics.life-balance.desktop': ['lbd'],
                    'application/vnd.llamagraphics.life-balance.exchange+xml': ['lbe'],
                    'application/vnd.lotus-1-2-3': ['123'],
                    'application/vnd.lotus-approach': ['apr'],
                    'application/vnd.lotus-freelance': ['pre'],
                    'application/vnd.lotus-notes': ['nsf'],
                    'application/vnd.lotus-organizer': ['org'],
                    'application/vnd.lotus-screencam': ['scm'],
                    'application/vnd.lotus-wordpro': ['lwp'],
                    'application/vnd.macports.portpkg': ['portpkg'],
                    'application/vnd.mcd': ['mcd'],
                    'application/vnd.medcalcdata': ['mc1'],
                    'application/vnd.mediastation.cdkey': ['cdkey'],
                    'application/vnd.mfer': ['mwf'],
                    'application/vnd.mfmp': ['mfm'],
                    'application/vnd.micrografx.flo': ['flo'],
                    'application/vnd.micrografx.igx': ['igx'],
                    'application/vnd.mif': ['mif'],
                    'application/vnd.mobius.daf': ['daf'],
                    'application/vnd.mobius.dis': ['dis'],
                    'application/vnd.mobius.mbk': ['mbk'],
                    'application/vnd.mobius.mqy': ['mqy'],
                    'application/vnd.mobius.msl': ['msl'],
                    'application/vnd.mobius.plc': ['plc'],
                    'application/vnd.mobius.txf': ['txf'],
                    'application/vnd.mophun.application': ['mpn'],
                    'application/vnd.mophun.certificate': ['mpc'],
                    'application/vnd.mozilla.xul+xml': ['xul'],
                    'application/vnd.ms-artgalry': ['cil'],
                    'application/vnd.ms-cab-compressed': ['cab'],
                    'application/vnd.ms-excel': [
                        'xls',
                        'xlm',
                        'xla',
                        'xlc',
                        'xlt',
                        'xlw'
                    ],
                    'application/vnd.ms-excel.addin.macroenabled.12': ['xlam'],
                    'application/vnd.ms-excel.sheet.binary.macroenabled.12': ['xlsb'],
                    'application/vnd.ms-excel.sheet.macroenabled.12': ['xlsm'],
                    'application/vnd.ms-excel.template.macroenabled.12': ['xltm'],
                    'application/vnd.ms-fontobject': ['eot'],
                    'application/vnd.ms-htmlhelp': ['chm'],
                    'application/vnd.ms-ims': ['ims'],
                    'application/vnd.ms-lrm': ['lrm'],
                    'application/vnd.ms-officetheme': ['thmx'],
                    'application/vnd.ms-pki.seccat': ['cat'],
                    'application/vnd.ms-pki.stl': ['stl'],
                    'application/vnd.ms-powerpoint': [
                        'ppt',
                        'pps',
                        'pot'
                    ],
                    'application/vnd.ms-powerpoint.addin.macroenabled.12': ['ppam'],
                    'application/vnd.ms-powerpoint.presentation.macroenabled.12': ['pptm'],
                    'application/vnd.ms-powerpoint.slide.macroenabled.12': ['sldm'],
                    'application/vnd.ms-powerpoint.slideshow.macroenabled.12': ['ppsm'],
                    'application/vnd.ms-powerpoint.template.macroenabled.12': ['potm'],
                    'application/vnd.ms-project': [
                        'mpp',
                        'mpt'
                    ],
                    'application/vnd.ms-word.document.macroenabled.12': ['docm'],
                    'application/vnd.ms-word.template.macroenabled.12': ['dotm'],
                    'application/vnd.ms-works': [
                        'wps',
                        'wks',
                        'wcm',
                        'wdb'
                    ],
                    'application/vnd.ms-wpl': ['wpl'],
                    'application/vnd.ms-xpsdocument': ['xps'],
                    'application/vnd.mseq': ['mseq'],
                    'application/vnd.musician': ['mus'],
                    'application/vnd.muvee.style': ['msty'],
                    'application/vnd.mynfc': ['taglet'],
                    'application/vnd.neurolanguage.nlu': ['nlu'],
                    'application/vnd.nitf': [
                        'ntf',
                        'nitf'
                    ],
                    'application/vnd.noblenet-directory': ['nnd'],
                    'application/vnd.noblenet-sealer': ['nns'],
                    'application/vnd.noblenet-web': ['nnw'],
                    'application/vnd.nokia.n-gage.data': ['ngdat'],
                    'application/vnd.nokia.radio-preset': ['rpst'],
                    'application/vnd.nokia.radio-presets': ['rpss'],
                    'application/vnd.novadigm.edm': ['edm'],
                    'application/vnd.novadigm.edx': ['edx'],
                    'application/vnd.novadigm.ext': ['ext'],
                    'application/vnd.oasis.opendocument.chart': ['odc'],
                    'application/vnd.oasis.opendocument.chart-template': ['otc'],
                    'application/vnd.oasis.opendocument.database': ['odb'],
                    'application/vnd.oasis.opendocument.formula': ['odf'],
                    'application/vnd.oasis.opendocument.formula-template': ['odft'],
                    'application/vnd.oasis.opendocument.graphics': ['odg'],
                    'application/vnd.oasis.opendocument.graphics-template': ['otg'],
                    'application/vnd.oasis.opendocument.image': ['odi'],
                    'application/vnd.oasis.opendocument.image-template': ['oti'],
                    'application/vnd.oasis.opendocument.presentation': ['odp'],
                    'application/vnd.oasis.opendocument.presentation-template': ['otp'],
                    'application/vnd.oasis.opendocument.spreadsheet': ['ods'],
                    'application/vnd.oasis.opendocument.spreadsheet-template': ['ots'],
                    'application/vnd.oasis.opendocument.text': ['odt'],
                    'application/vnd.oasis.opendocument.text-master': ['odm'],
                    'application/vnd.oasis.opendocument.text-template': ['ott'],
                    'application/vnd.oasis.opendocument.text-web': ['oth'],
                    'application/vnd.olpc-sugar': ['xo'],
                    'application/vnd.oma.dd2+xml': ['dd2'],
                    'application/vnd.openofficeorg.extension': ['oxt'],
                    'application/vnd.openxmlformats-officedocument.presentationml.presentation': ['pptx'],
                    'application/vnd.openxmlformats-officedocument.presentationml.slide': ['sldx'],
                    'application/vnd.openxmlformats-officedocument.presentationml.slideshow': ['ppsx'],
                    'application/vnd.openxmlformats-officedocument.presentationml.template': ['potx'],
                    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['xlsx'],
                    'application/vnd.openxmlformats-officedocument.spreadsheetml.template': ['xltx'],
                    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['docx'],
                    'application/vnd.openxmlformats-officedocument.wordprocessingml.template': ['dotx'],
                    'application/vnd.osgeo.mapguide.package': ['mgp'],
                    'application/vnd.osgi.dp': ['dp'],
                    'application/vnd.osgi.subsystem': ['esa'],
                    'application/vnd.palm': [
                        'pdb',
                        'pqa',
                        'oprc'
                    ],
                    'application/vnd.pawaafile': ['paw'],
                    'application/vnd.pg.format': ['str'],
                    'application/vnd.pg.osasli': ['ei6'],
                    'application/vnd.picsel': ['efif'],
                    'application/vnd.pmi.widget': ['wg'],
                    'application/vnd.pocketlearn': ['plf'],
                    'application/vnd.powerbuilder6': ['pbd'],
                    'application/vnd.previewsystems.box': ['box'],
                    'application/vnd.proteus.magazine': ['mgz'],
                    'application/vnd.publishare-delta-tree': ['qps'],
                    'application/vnd.pvi.ptid1': ['ptid'],
                    'application/vnd.quark.quarkxpress': [
                        'qxd',
                        'qxt',
                        'qwd',
                        'qwt',
                        'qxl',
                        'qxb'
                    ],
                    'application/vnd.realvnc.bed': ['bed'],
                    'application/vnd.recordare.musicxml': ['mxl'],
                    'application/vnd.recordare.musicxml+xml': ['musicxml'],
                    'application/vnd.rig.cryptonote': ['cryptonote'],
                    'application/vnd.rim.cod': ['cod'],
                    'application/vnd.rn-realmedia': ['rm'],
                    'application/vnd.rn-realmedia-vbr': ['rmvb'],
                    'application/vnd.route66.link66+xml': ['link66'],
                    'application/vnd.sailingtracker.track': ['st'],
                    'application/vnd.seemail': ['see'],
                    'application/vnd.sema': ['sema'],
                    'application/vnd.semd': ['semd'],
                    'application/vnd.semf': ['semf'],
                    'application/vnd.shana.informed.formdata': ['ifm'],
                    'application/vnd.shana.informed.formtemplate': ['itp'],
                    'application/vnd.shana.informed.interchange': ['iif'],
                    'application/vnd.shana.informed.package': ['ipk'],
                    'application/vnd.simtech-mindmapper': [
                        'twd',
                        'twds'
                    ],
                    'application/vnd.smaf': ['mmf'],
                    'application/vnd.smart.teacher': ['teacher'],
                    'application/vnd.solent.sdkm+xml': [
                        'sdkm',
                        'sdkd'
                    ],
                    'application/vnd.spotfire.dxp': ['dxp'],
                    'application/vnd.spotfire.sfs': ['sfs'],
                    'application/vnd.stardivision.calc': ['sdc'],
                    'application/vnd.stardivision.draw': ['sda'],
                    'application/vnd.stardivision.impress': ['sdd'],
                    'application/vnd.stardivision.math': ['smf'],
                    'application/vnd.stardivision.writer': [
                        'sdw',
                        'vor'
                    ],
                    'application/vnd.stardivision.writer-global': ['sgl'],
                    'application/vnd.stepmania.package': ['smzip'],
                    'application/vnd.stepmania.stepchart': ['sm'],
                    'application/vnd.sun.xml.calc': ['sxc'],
                    'application/vnd.sun.xml.calc.template': ['stc'],
                    'application/vnd.sun.xml.draw': ['sxd'],
                    'application/vnd.sun.xml.draw.template': ['std'],
                    'application/vnd.sun.xml.impress': ['sxi'],
                    'application/vnd.sun.xml.impress.template': ['sti'],
                    'application/vnd.sun.xml.math': ['sxm'],
                    'application/vnd.sun.xml.writer': ['sxw'],
                    'application/vnd.sun.xml.writer.global': ['sxg'],
                    'application/vnd.sun.xml.writer.template': ['stw'],
                    'application/vnd.sus-calendar': [
                        'sus',
                        'susp'
                    ],
                    'application/vnd.svd': ['svd'],
                    'application/vnd.symbian.install': [
                        'sis',
                        'sisx'
                    ],
                    'application/vnd.syncml+xml': ['xsm'],
                    'application/vnd.syncml.dm+wbxml': ['bdm'],
                    'application/vnd.syncml.dm+xml': ['xdm'],
                    'application/vnd.tao.intent-module-archive': ['tao'],
                    'application/vnd.tcpdump.pcap': [
                        'pcap',
                        'cap',
                        'dmp'
                    ],
                    'application/vnd.tmobile-livetv': ['tmo'],
                    'application/vnd.trid.tpt': ['tpt'],
                    'application/vnd.triscape.mxs': ['mxs'],
                    'application/vnd.trueapp': ['tra'],
                    'application/vnd.ufdl': [
                        'ufd',
                        'ufdl'
                    ],
                    'application/vnd.uiq.theme': ['utz'],
                    'application/vnd.umajin': ['umj'],
                    'application/vnd.unity': ['unityweb'],
                    'application/vnd.uoml+xml': ['uoml'],
                    'application/vnd.vcx': ['vcx'],
                    'application/vnd.visio': [
                        'vsd',
                        'vst',
                        'vss',
                        'vsw'
                    ],
                    'application/vnd.visionary': ['vis'],
                    'application/vnd.vsf': ['vsf'],
                    'application/vnd.wap.wbxml': ['wbxml'],
                    'application/vnd.wap.wmlc': ['wmlc'],
                    'application/vnd.wap.wmlscriptc': ['wmlsc'],
                    'application/vnd.webturbo': ['wtb'],
                    'application/vnd.wolfram.player': ['nbp'],
                    'application/vnd.wordperfect': ['wpd'],
                    'application/vnd.wqd': ['wqd'],
                    'application/vnd.wt.stf': ['stf'],
                    'application/vnd.xara': ['xar'],
                    'application/vnd.xfdl': ['xfdl'],
                    'application/vnd.yamaha.hv-dic': ['hvd'],
                    'application/vnd.yamaha.hv-script': ['hvs'],
                    'application/vnd.yamaha.hv-voice': ['hvp'],
                    'application/vnd.yamaha.openscoreformat': ['osf'],
                    'application/vnd.yamaha.openscoreformat.osfpvg+xml': ['osfpvg'],
                    'application/vnd.yamaha.smaf-audio': ['saf'],
                    'application/vnd.yamaha.smaf-phrase': ['spf'],
                    'application/vnd.yellowriver-custom-menu': ['cmp'],
                    'application/vnd.zul': [
                        'zir',
                        'zirz'
                    ],
                    'application/vnd.zzazz.deck+xml': ['zaz'],
                    'application/voicexml+xml': ['vxml'],
                    'application/widget': ['wgt'],
                    'application/winhlp': ['hlp'],
                    'application/wsdl+xml': ['wsdl'],
                    'application/wspolicy+xml': ['wspolicy'],
                    'application/x-7z-compressed': ['7z'],
                    'application/x-abiword': ['abw'],
                    'application/x-ace-compressed': ['ace'],
                    'application/x-apple-diskimage': ['dmg'],
                    'application/x-authorware-bin': [
                        'aab',
                        'x32',
                        'u32',
                        'vox'
                    ],
                    'application/x-authorware-map': ['aam'],
                    'application/x-authorware-seg': ['aas'],
                    'application/x-bcpio': ['bcpio'],
                    'application/x-bittorrent': ['torrent'],
                    'application/x-blorb': [
                        'blb',
                        'blorb'
                    ],
                    'application/x-bzip': ['bz'],
                    'application/x-bzip2': [
                        'bz2',
                        'boz'
                    ],
                    'application/x-cbr': [
                        'cbr',
                        'cba',
                        'cbt',
                        'cbz',
                        'cb7'
                    ],
                    'application/x-cdlink': ['vcd'],
                    'application/x-cfs-compressed': ['cfs'],
                    'application/x-chat': ['chat'],
                    'application/x-chess-pgn': ['pgn'],
                    'application/x-chrome-extension': ['crx'],
                    'application/x-conference': ['nsc'],
                    'application/x-cpio': ['cpio'],
                    'application/x-csh': ['csh'],
                    'application/x-debian-package': [
                        'deb',
                        'udeb'
                    ],
                    'application/x-dgc-compressed': ['dgc'],
                    'application/x-director': [
                        'dir',
                        'dcr',
                        'dxr',
                        'cst',
                        'cct',
                        'cxt',
                        'w3d',
                        'fgd',
                        'swa'
                    ],
                    'application/x-doom': ['wad'],
                    'application/x-dtbncx+xml': ['ncx'],
                    'application/x-dtbook+xml': ['dtb'],
                    'application/x-dtbresource+xml': ['res'],
                    'application/x-dvi': ['dvi'],
                    'application/x-envoy': ['evy'],
                    'application/x-eva': ['eva'],
                    'application/x-font-bdf': ['bdf'],
                    'application/x-font-ghostscript': ['gsf'],
                    'application/x-font-linux-psf': ['psf'],
                    'application/x-font-otf': ['otf'],
                    'application/x-font-pcf': ['pcf'],
                    'application/x-font-snf': ['snf'],
                    'application/x-font-ttf': [
                        'ttf',
                        'ttc'
                    ],
                    'application/x-font-type1': [
                        'pfa',
                        'pfb',
                        'pfm',
                        'afm'
                    ],
                    'application/x-freearc': ['arc'],
                    'application/x-futuresplash': ['spl'],
                    'application/x-gca-compressed': ['gca'],
                    'application/x-glulx': ['ulx'],
                    'application/x-gnumeric': ['gnumeric'],
                    'application/x-gramps-xml': ['gramps'],
                    'application/x-gtar': ['gtar'],
                    'application/x-hdf': ['hdf'],
                    'application/x-install-instructions': ['install'],
                    'application/x-iso9660-image': ['iso'],
                    'application/x-java-jnlp-file': ['jnlp'],
                    'application/x-latex': ['latex'],
                    'application/x-lua-bytecode': ['luac'],
                    'application/x-lzh-compressed': [
                        'lzh',
                        'lha'
                    ],
                    'application/x-mie': ['mie'],
                    'application/x-mobipocket-ebook': [
                        'prc',
                        'mobi'
                    ],
                    'application/x-ms-application': ['application'],
                    'application/x-ms-shortcut': ['lnk'],
                    'application/x-ms-wmd': ['wmd'],
                    'application/x-ms-wmz': ['wmz'],
                    'application/x-ms-xbap': ['xbap'],
                    'application/x-msaccess': ['mdb'],
                    'application/x-msbinder': ['obd'],
                    'application/x-mscardfile': ['crd'],
                    'application/x-msclip': ['clp'],
                    'application/x-msdownload': [
                        'exe',
                        'dll',
                        'com',
                        'bat',
                        'msi'
                    ],
                    'application/x-msmediaview': [
                        'mvb',
                        'm13',
                        'm14'
                    ],
                    'application/x-msmetafile': [
                        'wmf',
                        'wmz',
                        'emf',
                        'emz'
                    ],
                    'application/x-msmoney': ['mny'],
                    'application/x-mspublisher': ['pub'],
                    'application/x-msschedule': ['scd'],
                    'application/x-msterminal': ['trm'],
                    'application/x-mswrite': ['wri'],
                    'application/x-netcdf': [
                        'nc',
                        'cdf'
                    ],
                    'application/x-nzb': ['nzb'],
                    'application/x-pkcs12': [
                        'p12',
                        'pfx'
                    ],
                    'application/x-pkcs7-certificates': [
                        'p7b',
                        'spc'
                    ],
                    'application/x-pkcs7-certreqresp': ['p7r'],
                    'application/x-rar-compressed': ['rar'],
                    'application/x-research-info-systems': ['ris'],
                    'application/x-sh': ['sh'],
                    'application/x-shar': ['shar'],
                    'application/x-shockwave-flash': ['swf'],
                    'application/x-silverlight-app': ['xap'],
                    'application/x-sql': ['sql'],
                    'application/x-stuffit': ['sit'],
                    'application/x-stuffitx': ['sitx'],
                    'application/x-subrip': ['srt'],
                    'application/x-sv4cpio': ['sv4cpio'],
                    'application/x-sv4crc': ['sv4crc'],
                    'application/x-t3vm-image': ['t3'],
                    'application/x-tads': ['gam'],
                    'application/x-tar': ['tar'],
                    'application/x-tcl': ['tcl'],
                    'application/x-tex': ['tex'],
                    'application/x-tex-tfm': ['tfm'],
                    'application/x-texinfo': [
                        'texinfo',
                        'texi'
                    ],
                    'application/x-tgif': ['obj'],
                    'application/x-ustar': ['ustar'],
                    'application/x-wais-source': ['src'],
                    'application/x-web-app-manifest+json': ['webapp'],
                    'application/x-x509-ca-cert': [
                        'der',
                        'crt'
                    ],
                    'application/x-xfig': ['fig'],
                    'application/x-xliff+xml': ['xlf'],
                    'application/x-xpinstall': ['xpi'],
                    'application/x-xz': ['xz'],
                    'application/x-zmachine': [
                        'z1',
                        'z2',
                        'z3',
                        'z4',
                        'z5',
                        'z6',
                        'z7',
                        'z8'
                    ],
                    'application/xaml+xml': ['xaml'],
                    'application/xcap-diff+xml': ['xdf'],
                    'application/xenc+xml': ['xenc'],
                    'application/xhtml+xml': [
                        'xhtml',
                        'xht'
                    ],
                    'application/xml': [
                        'xml',
                        'xsl',
                        'xsd'
                    ],
                    'application/xml-dtd': ['dtd'],
                    'application/xop+xml': ['xop'],
                    'application/xproc+xml': ['xpl'],
                    'application/xslt+xml': ['xslt'],
                    'application/xspf+xml': ['xspf'],
                    'application/xv+xml': [
                        'mxml',
                        'xhvml',
                        'xvml',
                        'xvm'
                    ],
                    'application/yang': ['yang'],
                    'application/yin+xml': ['yin'],
                    'application/zip': ['zip'],
                    'audio/adpcm': ['adp'],
                    'audio/basic': [
                        'au',
                        'snd'
                    ],
                    'audio/midi': [
                        'mid',
                        'midi',
                        'kar',
                        'rmi'
                    ],
                    'audio/mp4': [
                        'mp4a',
                        'm4a'
                    ],
                    'audio/mpeg': [
                        'mpga',
                        'mp2',
                        'mp2a',
                        'mp3',
                        'm2a',
                        'm3a'
                    ],
                    'audio/ogg': [
                        'oga',
                        'ogg',
                        'spx'
                    ],
                    'audio/s3m': ['s3m'],
                    'audio/silk': ['sil'],
                    'audio/vnd.dece.audio': [
                        'uva',
                        'uvva'
                    ],
                    'audio/vnd.digital-winds': ['eol'],
                    'audio/vnd.dra': ['dra'],
                    'audio/vnd.dts': ['dts'],
                    'audio/vnd.dts.hd': ['dtshd'],
                    'audio/vnd.lucent.voice': ['lvp'],
                    'audio/vnd.ms-playready.media.pya': ['pya'],
                    'audio/vnd.nuera.ecelp4800': ['ecelp4800'],
                    'audio/vnd.nuera.ecelp7470': ['ecelp7470'],
                    'audio/vnd.nuera.ecelp9600': ['ecelp9600'],
                    'audio/vnd.rip': ['rip'],
                    'audio/webm': ['weba'],
                    'audio/x-aac': ['aac'],
                    'audio/x-aiff': [
                        'aif',
                        'aiff',
                        'aifc'
                    ],
                    'audio/x-caf': ['caf'],
                    'audio/x-flac': ['flac'],
                    'audio/x-matroska': ['mka'],
                    'audio/x-mpegurl': ['m3u'],
                    'audio/x-ms-wax': ['wax'],
                    'audio/x-ms-wma': ['wma'],
                    'audio/x-pn-realaudio': [
                        'ram',
                        'ra'
                    ],
                    'audio/x-pn-realaudio-plugin': ['rmp'],
                    'audio/x-wav': ['wav'],
                    'audio/xm': ['xm'],
                    'chemical/x-cdx': ['cdx'],
                    'chemical/x-cif': ['cif'],
                    'chemical/x-cmdf': ['cmdf'],
                    'chemical/x-cml': ['cml'],
                    'chemical/x-csml': ['csml'],
                    'chemical/x-xyz': ['xyz'],
                    'font/opentype': ['otf'],
                    'image/bmp': ['bmp'],
                    'image/cgm': ['cgm'],
                    'image/g3fax': ['g3'],
                    'image/gif': ['gif'],
                    'image/ief': ['ief'],
                    'image/jpeg': [
                        'jpeg',
                        'jpg',
                        'jpe'
                    ],
                    'image/ktx': ['ktx'],
                    'image/png': ['png'],
                    'image/prs.btif': ['btif'],
                    'image/sgi': ['sgi'],
                    'image/svg+xml': [
                        'svg',
                        'svgz'
                    ],
                    'image/tiff': [
                        'tiff',
                        'tif'
                    ],
                    'image/vnd.adobe.photoshop': ['psd'],
                    'image/vnd.dece.graphic': [
                        'uvi',
                        'uvvi',
                        'uvg',
                        'uvvg'
                    ],
                    'image/vnd.djvu': [
                        'djvu',
                        'djv'
                    ],
                    'image/vnd.dvb.subtitle': ['sub'],
                    'image/vnd.dwg': ['dwg'],
                    'image/vnd.dxf': ['dxf'],
                    'image/vnd.fastbidsheet': ['fbs'],
                    'image/vnd.fpx': ['fpx'],
                    'image/vnd.fst': ['fst'],
                    'image/vnd.fujixerox.edmics-mmr': ['mmr'],
                    'image/vnd.fujixerox.edmics-rlc': ['rlc'],
                    'image/vnd.ms-modi': ['mdi'],
                    'image/vnd.ms-photo': ['wdp'],
                    'image/vnd.net-fpx': ['npx'],
                    'image/vnd.wap.wbmp': ['wbmp'],
                    'image/vnd.xiff': ['xif'],
                    'image/webp': ['webp'],
                    'image/x-3ds': ['3ds'],
                    'image/x-cmu-raster': ['ras'],
                    'image/x-cmx': ['cmx'],
                    'image/x-freehand': [
                        'fh',
                        'fhc',
                        'fh4',
                        'fh5',
                        'fh7'
                    ],
                    'image/x-icon': ['ico'],
                    'image/x-mrsid-image': ['sid'],
                    'image/x-pcx': ['pcx'],
                    'image/x-pict': [
                        'pic',
                        'pct'
                    ],
                    'image/x-portable-anymap': ['pnm'],
                    'image/x-portable-bitmap': ['pbm'],
                    'image/x-portable-graymap': ['pgm'],
                    'image/x-portable-pixmap': ['ppm'],
                    'image/x-rgb': ['rgb'],
                    'image/x-tga': ['tga'],
                    'image/x-xbitmap': ['xbm'],
                    'image/x-xpixmap': ['xpm'],
                    'image/x-xwindowdump': ['xwd'],
                    'message/rfc822': [
                        'eml',
                        'mime'
                    ],
                    'model/iges': [
                        'igs',
                        'iges'
                    ],
                    'model/mesh': [
                        'msh',
                        'mesh',
                        'silo'
                    ],
                    'model/vnd.collada+xml': ['dae'],
                    'model/vnd.dwf': ['dwf'],
                    'model/vnd.gdl': ['gdl'],
                    'model/vnd.gtw': ['gtw'],
                    'model/vnd.mts': ['mts'],
                    'model/vnd.vtu': ['vtu'],
                    'model/vrml': [
                        'wrl',
                        'vrml'
                    ],
                    'model/x3d+binary': [
                        'x3db',
                        'x3dbz'
                    ],
                    'model/x3d+vrml': [
                        'x3dv',
                        'x3dvz'
                    ],
                    'model/x3d+xml': [
                        'x3d',
                        'x3dz'
                    ],
                    'text/cache-manifest': [
                        'appcache',
                        'manifest'
                    ],
                    'text/calendar': [
                        'ics',
                        'ifb'
                    ],
                    'text/coffeescript': ['coffee'],
                    'text/css': ['css'],
                    'text/csv': ['csv'],
                    'text/hjson': ['hjson'],
                    'text/html': [
                        'html',
                        'htm'
                    ],
                    'text/jade': ['jade'],
                    'text/jsx': ['jsx'],
                    'text/less': ['less'],
                    'text/n3': ['n3'],
                    'text/plain': [
                        'txt',
                        'text',
                        'conf',
                        'def',
                        'list',
                        'log',
                        'in',
                        'ini'
                    ],
                    'text/prs.lines.tag': ['dsc'],
                    'text/richtext': ['rtx'],
                    'text/sgml': [
                        'sgml',
                        'sgm'
                    ],
                    'text/stylus': [
                        'stylus',
                        'styl'
                    ],
                    'text/tab-separated-values': ['tsv'],
                    'text/troff': [
                        't',
                        'tr',
                        'roff',
                        'man',
                        'me',
                        'ms'
                    ],
                    'text/turtle': ['ttl'],
                    'text/uri-list': [
                        'uri',
                        'uris',
                        'urls'
                    ],
                    'text/vcard': ['vcard'],
                    'text/vnd.curl': ['curl'],
                    'text/vnd.curl.dcurl': ['dcurl'],
                    'text/vnd.curl.mcurl': ['mcurl'],
                    'text/vnd.curl.scurl': ['scurl'],
                    'text/vnd.dvb.subtitle': ['sub'],
                    'text/vnd.fly': ['fly'],
                    'text/vnd.fmi.flexstor': ['flx'],
                    'text/vnd.graphviz': ['gv'],
                    'text/vnd.in3d.3dml': ['3dml'],
                    'text/vnd.in3d.spot': ['spot'],
                    'text/vnd.sun.j2me.app-descriptor': ['jad'],
                    'text/vnd.wap.wml': ['wml'],
                    'text/vnd.wap.wmlscript': ['wmls'],
                    'text/vtt': ['vtt'],
                    'text/x-asm': [
                        's',
                        'asm'
                    ],
                    'text/x-c': [
                        'c',
                        'cc',
                        'cxx',
                        'cpp',
                        'h',
                        'hh',
                        'dic'
                    ],
                    'text/x-component': ['htc'],
                    'text/x-fortran': [
                        'f',
                        'for',
                        'f77',
                        'f90'
                    ],
                    'text/x-handlebars-template': ['hbs'],
                    'text/x-java-source': ['java'],
                    'text/x-lua': ['lua'],
                    'text/x-markdown': [
                        'markdown',
                        'md',
                        'mkd'
                    ],
                    'text/x-nfo': ['nfo'],
                    'text/x-opml': ['opml'],
                    'text/x-pascal': [
                        'p',
                        'pas'
                    ],
                    'text/x-sass': ['sass'],
                    'text/x-scss': ['scss'],
                    'text/x-setext': ['etx'],
                    'text/x-sfv': ['sfv'],
                    'text/x-uuencode': ['uu'],
                    'text/x-vcalendar': ['vcs'],
                    'text/x-vcard': ['vcf'],
                    'text/yaml': [
                        'yaml',
                        'yml'
                    ],
                    'video/3gpp': ['3gp'],
                    'video/3gpp2': ['3g2'],
                    'video/h261': ['h261'],
                    'video/h263': ['h263'],
                    'video/h264': ['h264'],
                    'video/jpeg': ['jpgv'],
                    'video/jpm': [
                        'jpm',
                        'jpgm'
                    ],
                    'video/mj2': [
                        'mj2',
                        'mjp2'
                    ],
                    'video/mp2t': ['ts'],
                    'video/mp4': [
                        'mp4',
                        'mp4v',
                        'mpg4'
                    ],
                    'video/mpeg': [
                        'mpeg',
                        'mpg',
                        'mpe',
                        'm1v',
                        'm2v'
                    ],
                    'video/ogg': ['ogv'],
                    'video/quicktime': [
                        'qt',
                        'mov'
                    ],
                    'video/vnd.dece.hd': [
                        'uvh',
                        'uvvh'
                    ],
                    'video/vnd.dece.mobile': [
                        'uvm',
                        'uvvm'
                    ],
                    'video/vnd.dece.pd': [
                        'uvp',
                        'uvvp'
                    ],
                    'video/vnd.dece.sd': [
                        'uvs',
                        'uvvs'
                    ],
                    'video/vnd.dece.video': [
                        'uvv',
                        'uvvv'
                    ],
                    'video/vnd.dvb.file': ['dvb'],
                    'video/vnd.fvt': ['fvt'],
                    'video/vnd.mpegurl': [
                        'mxu',
                        'm4u'
                    ],
                    'video/vnd.ms-playready.media.pyv': ['pyv'],
                    'video/vnd.uvvu.mp4': [
                        'uvu',
                        'uvvu'
                    ],
                    'video/vnd.vivo': ['viv'],
                    'video/webm': ['webm'],
                    'video/x-f4v': ['f4v'],
                    'video/x-fli': ['fli'],
                    'video/x-flv': ['flv'],
                    'video/x-m4v': ['m4v'],
                    'video/x-matroska': [
                        'mkv',
                        'mk3d',
                        'mks'
                    ],
                    'video/x-mng': ['mng'],
                    'video/x-ms-asf': [
                        'asf',
                        'asx'
                    ],
                    'video/x-ms-vob': ['vob'],
                    'video/x-ms-wm': ['wm'],
                    'video/x-ms-wmv': ['wmv'],
                    'video/x-ms-wmx': ['wmx'],
                    'video/x-ms-wvx': ['wvx'],
                    'video/x-msvideo': ['avi'],
                    'video/x-sgi-movie': ['movie'],
                    'video/x-smv': ['smv'],
                    'x-conference/x-cooltalk': ['ice']
                };
            },
            {}
        ],
        41: [
            function (require, module, exports) {
                module.exports = {
                    'name': 'magicpen-media',
                    'version': '1.5.1',
                    'description': 'Add media support to magicpen (images, audio, video)',
                    'repository': {
                        'type': 'git',
                        'url': 'git+https://github.com/unexpectedjs/magicpen-media.git'
                    },
                    'main': 'lib/magicPenMedia.js',
                    'author': {
                        'name': 'Andreas Lind',
                        'email': 'andreas@one.com'
                    },
                    'devDependencies': {
                        'browserify': '8.1.1',
                        'bundle-collapser': '1.2.0',
                        'coveralls': '2.11.2',
                        'istanbul': '0.3.17',
                        'jshint': '2.8.0',
                        'magicpen': '4.12.0',
                        'mocha': '2.2.5',
                        'sinon': '1.15.4',
                        'unexpected': '9.0.0',
                        'unexpected-fs': '1.1.0',
                        'unexpected-sinon': '6.4.1'
                    },
                    'files': [
                        'lib',
                        'magicPenMedia.min.js'
                    ],
                    'scripts': {
                        'lint': 'jshint .',
                        'test': 'mocha && npm run lint',
                        'travis': 'npm test && npm run coverage && (<coverage/lcov.info coveralls || true)',
                        'coverage': 'NODE_ENV=development istanbul cover --report text --report lcov _mocha -- --reporter dot && echo google-chrome coverage/lcov-report/index.html',
                        'prepublish': 'browserify -p bundle-collapser/plugin -e lib/magicPenMedia -s magicPenMedia > magicPenMedia.min.js'
                    },
                    'dependencies': {
                        'gettemporaryfilepath': '0.0.1',
                        'lodash': '3.10.0',
                        'mime': '1.3.4'
                    },
                    'gitHead': '44fd081de7cb0e90b0e478cc32e92cbae746374e',
                    'bugs': { 'url': 'https://github.com/unexpectedjs/magicpen-media/issues' },
                    'homepage': 'https://github.com/unexpectedjs/magicpen-media#readme',
                    '_id': 'magicpen-media@1.5.1',
                    '_shasum': '645151a756f3b1f3f31bd7aa37bea6d214400098',
                    '_from': 'magicpen-media@>=1.5.0 <2.0.0',
                    '_npmVersion': '2.13.4',
                    '_nodeVersion': '0.10.38',
                    '_npmUser': {
                        'name': 'papandreou',
                        'email': 'andreas@one.com'
                    },
                    'dist': {
                        'shasum': '645151a756f3b1f3f31bd7aa37bea6d214400098',
                        'tarball': 'https://registry.npmjs.org/magicpen-media/-/magicpen-media-1.5.1.tgz'
                    },
                    'maintainers': [{
                            'name': 'papandreou',
                            'email': 'andreas@one.com'
                        }],
                    'directories': {},
                    '_resolved': 'https://registry.npmjs.org/magicpen-media/-/magicpen-media-1.5.1.tgz',
                    'readme': 'ERROR: No README data found!'
                };
            },
            {}
        ],
        42: [
            function (require, module, exports) {
                var foldHeaderLine = require(53), formatHeaderName = require(54), isRegExp = require(57), rfc2231 = require(76);
                function Headers(obj, doNotStringify) {
                    this.valuesByName = {};
                    this.populate(obj, doNotStringify);
                }
                Headers.prototype.isMessyHeaders = true;
                Headers.prototype.serializeHeaderValue = function (parsedHeaderValue) {
                    return parsedHeaderValue;
                };
                Headers.prototype.parseHeaderValue = function (serializedHeaderValue) {
                    return String(serializedHeaderValue);
                };
                Headers.prototype.populate = function (obj, doNotStringify) {
                    if (typeof obj === 'string') {
                        this.populateFromString(obj);
                    } else if (obj && typeof obj === 'object') {
                        if (obj instanceof Headers) {
                            this.populateFromObject(obj.valuesByName, doNotStringify);
                        } else {
                            this.populateFromObject(obj, doNotStringify);
                        }
                    }
                    return this;
                };
                Headers.prototype.populateFromString = function (str) {
                    this.populateFromStringAndReturnBodyStartIndex(str);
                    return this;
                };
                Headers.prototype.populateFromStringAndReturnBodyStartIndex = function (str) {
                    var that = this, state = 'startLine', currentHeaderName = '', currentValue = '';
                    function flush() {
                        if (currentHeaderName.length > 0) {
                            that.set(currentHeaderName, currentValue);
                        }
                        currentHeaderName = '';
                        currentValue = '';
                        state = 'startLine';
                    }
                    for (var i = 0; i < str.length; i += 1) {
                        var ch = str[i];
                        if (state === 'startLine') {
                            if (ch === ':') {
                                state = 'startHeaderValue';
                            } else if (ch === '\r' || ch === '\n') {
                                // Parse error or terminating CRLFCRLF
                                if (ch === '\r' && str[i + 1] === '\n' || ch === '\n' && str[i + 1] === '\r') {
                                    i += 2;
                                } else {
                                    i += 1;
                                }
                                flush();
                                return i;
                            } else {
                                currentHeaderName += ch;
                            }
                        } else if (state === 'startHeaderValue' || state === 'headerValue') {
                            if (state === 'startHeaderValue') {
                                if (ch === ' ') {
                                    // Ignore space after :
                                    continue;
                                } else {
                                    state = 'headerValue';
                                }
                            }
                            if (ch === '\r') {
                                if (str[i + 1] === '\n') {
                                    if (/[ \t]/.test(str[i + 2])) {
                                        // Skip past CRLF fold
                                        i += 1;
                                    } else {
                                        i += 1;
                                        flush();
                                    }
                                } else if (/[ \t]/.test(str[i + 1])) {
                                } else {
                                    flush();
                                }
                            } else if (ch === '\n') {
                                if (str[i + 1] === '\r') {
                                    if (/[ \t]/.test(str[i + 2])) {
                                        // Skip past LFCR fold
                                        i += 1;
                                    } else {
                                        i += 1;
                                        flush();
                                    }
                                } else if (/[ \t]/.test(str[i + 1])) {
                                } else {
                                    flush();
                                }
                            } else {
                                currentValue += ch;
                            }
                        }
                    }
                    flush();
                    return i;
                };
                Headers.prototype.populateFromObject = function (valuesByName, doNotStringify) {
                    Object.keys(valuesByName).forEach(function (headerName) {
                        var value = valuesByName[headerName], headerNameLowerCase = headerName.toLowerCase();
                        if (Array.isArray(value)) {
                            if (!doNotStringify) {
                                value = value.map(function (serializedHeaderValue) {
                                    return this.parseHeaderValue(serializedHeaderValue);
                                }, this);
                            }
                            if (this.valuesByName[headerNameLowerCase]) {
                                Array.prototype.push.apply(this.valuesByName[headerNameLowerCase], value);
                            } else {
                                this.valuesByName[headerNameLowerCase] = [].concat(value);
                            }
                        } else if (typeof value === 'undefined' && !doNotStringify) {
                            // Hmm, this might not behave as intended when the header occurs multiple times in the object with different casing
                            delete this.valuesByName[headerNameLowerCase];
                        } else {
                            if (!doNotStringify) {
                                value = this.parseHeaderValue(value);
                            }
                            if (this.valuesByName[headerNameLowerCase]) {
                                this.valuesByName[headerNameLowerCase].push(value);
                            } else {
                                this.valuesByName[headerNameLowerCase] = [value];
                            }
                        }
                    }, this);
                    return this;
                };
                Headers.prototype.get = function (headerName, valueNumber) {
                    valueNumber = valueNumber || 0;
                    var values = this.valuesByName[headerName.toLowerCase()];
                    if (values) {
                        return values[valueNumber];
                    }
                };
                Headers.prototype.getAll = function (headerName) {
                    var values = this.valuesByName[headerName.toLowerCase()];
                    if (values) {
                        return [].concat(values);
                    }
                };
                Headers.prototype.getNames = function () {
                    return Object.keys(this.valuesByName);
                };
                Headers.prototype.count = function (headerName) {
                };
                Headers.prototype.set = function (headerName, valueOrValues, valueNumber) {
                    if (headerName && typeof headerName === 'object') {
                        Object.keys(headerName).forEach(function (key) {
                        }, this);
                    } else {
                        var headerNameLowerCase = headerName.toLowerCase();
                        if (Array.isArray(valueOrValues)) {
                            if (typeof valueNumber !== 'undefined') {
                                throw new Error('Headers.set: valueNumber not supported when the values are provided as an array');
                            }
                            if (valueOrValues.length === 0) {
                                delete this.valuesByName[headerNameLowerCase];
                            } else {
                                this.valuesByName[headerNameLowerCase] = valueOrValues.map(function (value) {
                                    return this.parseHeaderValue(value);
                                }, this);
                            }
                        } else if (typeof valueNumber === 'number' && Array.isArray(this.valuesByName[headerNameLowerCase]) && valueNumber < this.valuesByName[headerNameLowerCase].length) {
                            this.valuesByName[headerNameLowerCase][valueNumber] = this.parseHeaderValue(valueOrValues);
                        } else {
                            (this.valuesByName[headerNameLowerCase] = this.valuesByName[headerNameLowerCase] || []).push(this.parseHeaderValue(valueOrValues));
                        }
                    }
                };
                Headers.prototype.remove = function (headerNameOrObj, valueOrValuesOrValueNumber) {
                    var numRemoved = 0;
                    if (headerNameOrObj && typeof headerNameOrObj === 'object') {
                        Object.keys(headerNameOrObj).forEach(function (headerName) {
                        }, this);
                        return numRemoved;
                    }
                    var headerNameLowerCase = headerNameOrObj.toLowerCase(), values = this.valuesByName[headerNameLowerCase];
                    if (!values) {
                        return 0;
                    } else if (typeof valueOrValuesOrValueNumber === 'undefined') {
                        delete this.valuesByName[headerNameLowerCase];
                        return values.length;
                    } else if (Array.isArray(valueOrValuesOrValueNumber)) {
                        valueOrValuesOrValueNumber.forEach(function (value) {
                        }, this);
                        return numRemoved;
                    } else if (typeof valueOrValuesOrValueNumber === 'number') {
                        if (values.length === 1 && valueOrValuesOrValueNumber === 0) {
                            delete this.valuesByName[headerNameLowerCase];
                            numRemoved = 1;
                        } else if (valueOrValuesOrValueNumber < values.length) {
                            values.splice(valueOrValuesOrValueNumber, 1);
                            numRemoved = 1;
                        }
                    } else {
                        var value = String(valueOrValuesOrValueNumber), index = values.indexOf(value);
                        if (index !== -1) {
                            if (index === 0 && values.length === 1) {
                                delete this.valuesByName[headerNameLowerCase];
                            } else {
                                values.splice(index, 1);
                            }
                            numRemoved = 1;
                        }
                    }
                    return numRemoved;
                };
                // has('Content-Length')
                // has('Content-Type', 'text/html');
                // has('Cookie', ['foo=bar', 'baz=quux']);
                Headers.prototype.has = function (headerName, stringOrArrayOrRegExp) {
                    var values = this.valuesByName[headerName.toLowerCase()];
                    if (typeof stringOrArrayOrRegExp === 'undefined') {
                        return !!values;
                    } else if (typeof values === 'undefined') {
                        return false;
                    } else {
                        if (Array.isArray(stringOrArrayOrRegExp)) {
                            return stringOrArrayOrRegExp.every(function (expectedValue) {
                            });
                        } else {
                            return values.length === 1 && values[0] === String(stringOrArrayOrRegExp);
                        }
                    }
                };
                Headers.prototype.parameter = function (headerName, attributeName, attributeValue) {
                    var headerValue = this.get(headerName, 0), rfc2231DisabledForThisHeader = this.isMessyHeadersWithRfc2047 && headerName.toLowerCase() === 'content-type';
                    if (headerValue) {
                        // FIXME: Will break if a quoted parameter value contains a semicolon
                        var tokens = headerValue.split(/\s*;\s*/), parameters = {}, usesRfc2231 = false;
                        for (var i = 1; i < tokens.length; i += 1) {
                            var matchKeyValue = tokens[i].match(/^([^=]+)=(.*)$/);
                            if (matchKeyValue && !(matchKeyValue[1] in parameters)) {
                                var parameterName = matchKeyValue[1], value = matchKeyValue[2], matchQuotedValue = value.match(/^"(.*)"$/);
                                if (matchQuotedValue) {
                                    value = matchQuotedValue[1].replace(/\\/, '');
                                }
                                if (!usesRfc2231 && /\*$/.test(parameterName)) {
                                    usesRfc2231 = true;
                                }
                                parameters[parameterName] = value;
                            }
                        }
                        if (usesRfc2231 && !rfc2231DisabledForThisHeader) {
                            parameters = rfc2231.unfoldAndDecodeParameters(parameters);
                        }
                        if (attributeName) {
                            if (attributeValue) {
                                parameters[attributeName] = attributeValue;
                                var tokensAfterUpdate = [tokens[0]];
                                if (!rfc2231DisabledForThisHeader) {
                                    parameters = rfc2231.encodeAndFoldParameters(parameters);
                                }
                                Object.keys(parameters).forEach(function (parameterName) {
                                });
                                this.set(headerName, tokensAfterUpdate.join('; '), 0);
                            } else {
                                return parameters[attributeName];
                            }
                        } else {
                            return parameters;
                        }
                    }
                };
                Headers.prototype.equals = function (other) {
                };
                Headers.prototype.clone = function () {
                    var clone = new Headers();
                    this.getNames().forEach(function (headerName) {
                        clone.set(headerName, this.getAll(headerName));
                    }, this);
                    return clone;
                };
                Headers.prototype.toString = function (maxLineLength) {
                    var result = '', lowerCaseHeaderNames = this.getNames();
                    lowerCaseHeaderNames.forEach(function (lowerCaseHeaderName) {
                        this.valuesByName[lowerCaseHeaderName].forEach(function (value) {
                            result += formatHeaderName(lowerCaseHeaderName) + ': ' + foldHeaderLine(this.serializeHeaderValue(value), maxLineLength, maxLineLength - lowerCaseHeaderName.length - 2) + '\r\n';
                        }, this);
                    }, this);
                    return result;
                };
                Headers.prototype.toCanonicalObject = function () {
                };
                Headers.prototype.toJSON = function () {
                    var obj = {};
                    this.getNames().forEach(function (lowerCaseHeaderName) {
                        var values = this.getAll(lowerCaseHeaderName);
                        if (values.length === 1) {
                            obj[formatHeaderName(lowerCaseHeaderName)] = this.get(lowerCaseHeaderName);
                        } else {
                            obj[formatHeaderName(lowerCaseHeaderName)] = this.getAll(lowerCaseHeaderName);
                        }
                    }, this);
                    return obj;
                };
                module.exports = Headers;
            },
            {
                '53': 53,
                '54': 54,
                '57': 57,
                '76': 76
            }
        ],
        43: [
            function (require, module, exports) {
                var Headers = require(42), rfc2047 = require(72), util = require(35);
                function HeadersWithRfc2047(obj, doNotStringify) {
                }
                util.inherits(HeadersWithRfc2047, Headers);
                HeadersWithRfc2047.prototype.isMessyHeadersWithRfc2047 = true;
                HeadersWithRfc2047.prototype.serializeHeaderValue = function (parsedHeaderValue) {
                };
                HeadersWithRfc2047.prototype.parseHeaderValue = function (serializedHeaderValue) {
                };
                module.exports = HeadersWithRfc2047;
            },
            {
                '35': 35,
                '42': 42,
                '72': 72
            }
        ],
        44: [
            function (require, module, exports) {
                var HttpExchange = require(45);
                function HttpConversation(obj) {
                    obj = obj || {};
                    this.exchanges = (obj.exchanges || []).map(function (httpExchange) {
                        if (httpExchange instanceof HttpExchange) {
                            return httpExchange;
                        } else {
                            return new HttpExchange(httpExchange);
                        }
                    });
                }
                HttpConversation.prototype.isMessyHttpConversation = true;
                HttpConversation.prototype.clone = function () {
                };
                HttpConversation.prototype.toString = function (maxLineLength) {
                };
                HttpConversation.prototype.equals = function (other) {
                };
                HttpConversation.prototype.toJSON = function () {
                };
                module.exports = HttpConversation;
            },
            { '45': 45 }
        ],
        45: [
            function (require, module, exports) {
                var HttpRequest = require(46), HttpResponse = require(47);
                function HttpExchange(obj) {
                    obj = obj || {};
                    if (typeof obj.request !== 'undefined') {
                        this.request = obj.request instanceof HttpRequest ? obj.request : new HttpRequest(obj.request);
                    }
                    if (typeof obj.response !== 'undefined') {
                        this.response = obj.response instanceof HttpResponse ? obj.response : new HttpResponse(obj.response);
                    }
                }
                HttpExchange.prototype.isMessyHttpExchange = true;
                HttpExchange.prototype.clone = function () {
                };
                HttpExchange.prototype.toString = function (maxLineLength) {
                };
                HttpExchange.prototype.equals = function (other) {
                };
                HttpExchange.prototype.toJSON = function () {
                };
                module.exports = HttpExchange;
            },
            {
                '46': 46,
                '47': 47
            }
        ],
        46: [
            function (require, module, exports) {
                (function (Buffer) {
                    /*global btoa*/
                    var Message = require(49), RequestLine = require(50), util = require(35), _ = require(80);
                    function HttpRequest(obj) {
                        this.requestLine = new RequestLine();
                        this.encrypted = false;
                        Message.call(this, obj);
                    }
                    HttpRequest.metadataPropertyNames = [
                        'host',
                        'port',
                        'encrypted',
                        'cert',
                        'key',
                        'ca',
                        'rejectUnauthorized'
                    ];
                    HttpRequest.propertyNames = Message.propertyNames.concat(HttpRequest.metadataPropertyNames).concat(RequestLine.propertyNames).concat(['requestLine']);
                    util.inherits(HttpRequest, Message);
                    HttpRequest.prototype.isMessyHttpRequest = true;
                    HttpRequest.prototype.populate = function (obj) {
                        if (obj && typeof obj === 'object' && (typeof Buffer === 'undefined' || !Buffer.isBuffer(obj))) {
                            this.populateFromObject(obj);
                        } else {
                            Message.prototype.populate.call(this, obj);
                        }
                        return this;
                    };
                    HttpRequest.prototype.populateFromObject = function (obj) {
                        Message.prototype.populateFromObject.call(this, obj);
                        HttpRequest.metadataPropertyNames.forEach(function (metadataPropertyName) {
                            if (typeof obj[metadataPropertyName] !== 'undefined') {
                                this[metadataPropertyName] = obj[metadataPropertyName];
                            }
                        }, this);
                        if (typeof obj.url === 'string') {
                            var fragments = obj.url.split(' ');
                            if (fragments.length > 1) {
                                this.method = fragments.shift();
                            }
                            if (fragments.length > 0) {
                                this._updateUrl(fragments[0]);
                                obj = _.extend({}, obj);
                                obj.url = this.path;
                            }
                            if (fragments.length > 1) {
                                this.protocol = fragments[1];
                            }
                        }
                        if (typeof obj.requestLine !== 'undefined') {
                            this.requestLine.populate(obj.requestLine);
                        }
                        this.requestLine.populateFromObject(_.omit(obj, 'url'));
                        return this;
                    };
                    function safeDecodeURIComponent(str) {
                    }
                    HttpRequest.prototype.populateFromString = function (str) {
                        var matchRequestLine = str.match(/^([^\r\n]*)(\r\n?|\n\r?|$)/);
                        if (matchRequestLine) {
                            Message.prototype.populateFromString.call(this, str.substr(matchRequestLine[0].length));
                            var requestLineStr = matchRequestLine[1], requestLineFragments = requestLineStr.split(' ');
                            if (requestLineFragments.length === 1) {
                                requestLineFragments.unshift('GET');
                            }
                            if (requestLineFragments.length >= 2) {
                                this.url = requestLineFragments[1];
                                requestLineFragments[1] = this.requestLine.url;
                            }
                            requestLineStr = requestLineFragments.join(' ');
                            this.requestLine.populateFromString(requestLineStr);
                        }
                        return this;
                    };
                    HttpRequest.prototype.populateFromBuffer = function (buffer) {
                    };
                    Object.defineProperty(HttpRequest.prototype, 'basicAuthCredentials', {
                        get: function () {
                        }
                    });
                    Object.defineProperty(HttpRequest.prototype, 'username', {
                        get: function () {
                        }
                    });
                    Object.defineProperty(HttpRequest.prototype, 'password', {
                        get: function () {
                        }
                    });
                    Object.defineProperty(HttpRequest.prototype, 'url', {
                        get: function () {
                            var host = this.host;
                            if (host) {
                                var port = this.port, encrypted = this.encrypted, basicAuthCredentials = this.basicAuthCredentials;
                                return 'http' + (encrypted ? 's' : '') + '://' + (basicAuthCredentials ? encodeURIComponent(basicAuthCredentials.username) + (basicAuthCredentials.password ? ':' + encodeURIComponent(basicAuthCredentials.password) : '') + '@' : '') + host + (typeof port === 'number' && port !== (encrypted ? 443 : 80) ? ':' + port : '') + (this.requestLine.url || '/');
                            } else {
                                return this.requestLine.url || '/';
                            }
                        },
                        set: function (url) {
                            this.host = undefined;
                            this.port = undefined;
                            this._updateUrl(url, true);
                        }
                    });
                    HttpRequest.prototype._updateUrl = function (url, invokedAsSetter) {
                        var fragments = url.split(' ');
                        if (fragments.length > 1) {
                            this.method = fragments.shift();
                        }
                        if (fragments.length > 0) {
                            var matchUrl = fragments[0].match(/^(https?:)\/\/(?:([^:@\/]+(?::[^@\/]+?))@)?((?:[a-z0-9](?:[\-a-z0-9]*[a-z0-9])?\.)*[a-z][\-a-z]*[a-z]|(?:(?:[0-9]|1?[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}(?:[0-9]|1?[0-9][0-9]|2[0-4][0-9]|25[0-5]))(:\d{1,5})?(\/[\w\-\.~%!$&'\(\)*+,;=:@\/]*(?:\?[\w\-\.~%!$&'\(\)*+,;=:@\/?]*)?(?:#[\w\-\.~%!$&'\(\)*+,;=:@\/?#]*)?)?$/);
                            if (matchUrl) {
                                var protocol = matchUrl[1], auth = matchUrl[2], host = matchUrl[3], port = matchUrl[4], path = matchUrl[5];
                                if (!this.headers.has('Host')) {
                                    this.headers.set('Host', host + (port || ''));
                                }
                                if (typeof this.host !== 'undefined' && this.host !== host) {
                                    throw new Error('the host property and the url specify different hosts, ' + this.host + ' vs. ' + host);
                                }
                                this.host = host;
                                if (typeof port !== 'undefined') {
                                    port = parseInt(port.substr(1), 10);
                                    if (typeof this.port !== 'undefined' && this.port !== port) {
                                        throw new Error('the port property and the url specify different ports, ' + this.port + ' vs. ' + port);
                                    }
                                    this.port = port;
                                } else if (typeof this.port === 'undefined') {
                                    if (protocol === 'https:') {
                                        this.port = 443;
                                    } else {
                                        this.port = 80;
                                    }
                                }
                                if (invokedAsSetter) {
                                    this.headers.remove('Authorization');
                                }
                                if (typeof auth === 'string' && auth.length > 0) {
                                    var authFragments = auth.split(':'), username = safeDecodeURIComponent(authFragments.shift()), password = safeDecodeURIComponent(authFragments.join(':'));
                                    this.headers.set('Authorization', 'Basic ' + (typeof Buffer !== 'undefined' ? new Buffer(username + ':' + password, 'utf-8').toString('base64') : btoa(auth)));
                                }
                                this.encrypted = protocol === 'https:';
                                this.requestLine.url = path || '/';
                            } else {
                                this.requestLine.url = fragments[0] || '/';
                            }
                        }
                        if (fragments.length >= 2) {
                            this.protocol = fragments[2];
                        }
                    };
                    HttpRequest.prototype.clone = function () {
                    };
                    HttpRequest.prototype.toString = function (maxLineLength) {
                    };
                    HttpRequest.prototype.equals = function (other) {
                    };
                    RequestLine.propertyNames.forEach(function (requestLinePropertyName) {
                        if (requestLinePropertyName !== 'url') {
                            Object.defineProperty(HttpRequest.prototype, requestLinePropertyName, {
                                enumerable: true,
                                get: function () {
                                    return this.requestLine[requestLinePropertyName];
                                },
                                set: function (value) {
                                    this.requestLine[requestLinePropertyName] = value;
                                }
                            });
                        }
                    });
                    HttpRequest.prototype.toJSON = function () {
                    };
                    module.exports = HttpRequest;
                }.call(this, require(5).Buffer));
            },
            {
                '35': 35,
                '49': 49,
                '5': 5,
                '50': 50,
                '80': 80
            }
        ],
        47: [
            function (require, module, exports) {
                (function (Buffer) {
                    var Message = require(49), StatusLine = require(51), util = require(35), _ = require(80);
                    function HttpResponse(obj) {
                        this.statusLine = new StatusLine();
                        Message.call(this, obj);
                    }
                    HttpResponse.propertyNames = Message.propertyNames.concat(StatusLine.propertyNames).concat(['statusLine']);
                    util.inherits(HttpResponse, Message);
                    HttpResponse.prototype.isMessyHttpResponse = true;
                    HttpResponse.prototype.populate = function (obj) {
                        if (typeof obj === 'number') {
                            this.populateFromObject({ statusCode: obj });
                        } else if (obj && typeof obj === 'object' && (typeof Buffer === 'undefined' || !Buffer.isBuffer(obj))) {
                            this.populateFromObject(obj);
                        } else {
                            Message.prototype.populate.call(this, obj);
                        }
                        return this;
                    };
                    HttpResponse.prototype.populateFromObject = function (obj) {
                        Message.prototype.populateFromObject.call(this, obj);
                        if (typeof obj.statusLine !== 'undefined') {
                            this.statusLine.populate(obj.statusLine);
                        }
                        this.statusLine.populateFromObject(obj);
                        return this;
                    };
                    HttpResponse.prototype.populateFromString = function (str) {
                        var matchStatusLine = str.match(/^([^\r\n]*)(\r\n?|\n\r?|$)/);
                        if (matchStatusLine) {
                            this.statusLine.populateFromString(matchStatusLine[1]);
                            Message.prototype.populateFromString.call(this, str.substr(matchStatusLine[0].length));
                        }
                        return this;
                    };
                    HttpResponse.prototype.populateFromBuffer = function (buffer) {
                    };
                    HttpResponse.prototype.clone = function () {
                    };
                    HttpResponse.prototype.toString = function (maxLineLength) {
                    };
                    HttpResponse.prototype.equals = function (other) {
                    };
                    StatusLine.propertyNames.forEach(function (statusLinePropertyName) {
                        Object.defineProperty(HttpResponse.prototype, statusLinePropertyName, {
                            enumerable: true,
                            get: function () {
                                return this.statusLine[statusLinePropertyName];
                            },
                            set: function (value) {
                            }
                        });
                    });
                    HttpResponse.prototype.toJSON = function () {
                        return _.extend(Message.prototype.toJSON.call(this), this.statusLine.toJSON());
                    };
                    module.exports = HttpResponse;
                }.call(this, require(5).Buffer));
            },
            {
                '35': 35,
                '49': 49,
                '5': 5,
                '51': 51,
                '80': 80
            }
        ],
        48: [
            function (require, module, exports) {
                var Message = require(49), HeadersWithRfc2047 = require(43), util = require(35);
                function Mail(obj) {
                }
                util.inherits(Mail, Message);
                Mail.prototype.isMessyMail = true;
                Mail.prototype.HeadersConstructor = HeadersWithRfc2047;
                module.exports = Mail;
            },
            {
                '35': 35,
                '43': 43,
                '49': 49
            }
        ],
        49: [
            function (require, module, exports) {
                (function (Buffer) {
                    /*global unescape, btoa, atob, JSON*/
                    var Headers = require(42), isRegExp = require(57), iconvLite = require(69), quotedPrintable = require(71), decodeChunkedTransferEncoding = require(52), zlib;
                    try {
                        zlib = require('' + 'zlib');
                    } catch (e) {
                    }
                    function isDefined(obj) {
                        return obj !== null && typeof obj !== 'undefined';
                    }
                    function quoteRegExp(str) {
                        return str.replace(/[-\\^$*+?.()|[\]{}]/g, '\\$&');
                    }
                    function Message(obj) {
                        this.headers = new this.HeadersConstructor();
                        this.populate(obj);
                    }
                    // Descending priority:
                    var bodyPropertyNames = [
                        'parts',
                        'body',
                        'unchunkedBody',
                        'rawBody'
                    ];
                    Message.propertyNames = [
                        'headers',
                        'fileName',
                        'isJson',
                        'isMultipart',
                        'boundary',
                        'charset'
                    ].concat(bodyPropertyNames);
                    Message.prototype.isMessyMessage = true;
                    Message.prototype.HeadersConstructor = Headers;
                    Message.prototype.populate = function (obj) {
                        if (typeof Buffer === 'function' && Buffer.isBuffer(obj)) {
                            this.populateFromBuffer(obj);
                        } else if (typeof obj === 'string') {
                            this.populateFromString(obj);
                        } else if (obj && typeof obj === 'object') {
                            this.populateFromObject(obj);
                        }
                        return this;
                    };
                    Message.prototype.populateFromObject = function (obj) {
                        if (typeof obj.headers !== 'undefined') {
                            this.headers.populate(obj.headers);
                        }
                        if (typeof obj.parts !== 'undefined') {
                            this.parts = (Array.isArray(obj.parts) ? obj.parts : [obj.parts]).map(function (part) {
                            });
                        } else if (typeof obj.rawBody !== 'undefined') {
                            this.rawBody = obj.rawBody;
                        } else if (typeof obj.body !== 'undefined') {
                            if (typeof Buffer !== 'undefined' && Buffer.isBuffer(obj.body)) {
                                this.unchunkedBody = obj.body;
                            } else {
                                this.body = obj.body;
                            }
                        } else if (typeof obj.unchunkedBody !== 'undefined') {
                            this.unchunkedBody = obj.unchunkedBody;
                        }
                        return this;
                    };
                    Message.prototype.populateFromBuffer = function (buffer) {
                        // Hack: Interpret non-ASCII in headers as iso-8859-1:
                        var str = '';
                        for (var i = 0; i < buffer.length; i += 1) {
                            var octet = buffer[i];
                            if (octet > 127) {
                                str += unescape('%' + octet.toString(16));
                            } else {
                                str += String.fromCharCode(octet);
                            }
                            if (/\r\r$|\n\n$|\r\n\r\n$|\n\r\n\r$/.test(str)) {
                                i += 1;
                                if (i < buffer.length) {
                                    this.rawBody = buffer.slice(i);
                                }
                                break;
                            }
                        }
                        this.headers.populateFromString(str, true);
                        return this;
                    };
                    Message.prototype.populateFromString = function (str) {
                        var bodyStartIndex = this.headers.populateFromStringAndReturnBodyStartIndex(str);
                        if (bodyStartIndex < str.length) {
                            this.rawBody = str.substr(bodyStartIndex);
                        }
                        return this;
                    };
                    Object.defineProperty(Message.prototype, 'hasTextualContentType', {
                        get: function () {
                            var contentType = this.headers.get('Content-Type');
                            if (typeof contentType === 'string') {
                                contentType = contentType.toLowerCase().trim().replace(/\s*;.*$/, '');
                                return /^text\//.test(contentType) || /^application\/(?:json|javascript)$/.test(contentType) || /^application\/xml/.test(contentType) || /^application\/x-www-form-urlencoded\b/.test(contentType) || /\+xml$/.test(contentType) || /\+json$/.test(contentType);
                            }
                            return false;
                        }
                    });
                    Object.defineProperty(Message.prototype, 'isJson', {
                        get: function () {
                            return /^application\/json\b|\+json\b/i.test(this.headers.get('Content-Type'));
                        }
                    });
                    Object.defineProperty(Message.prototype, 'charset', {
                        get: function () {
                            var charset = this.headers.parameter('Content-Type', 'charset');
                            if (charset) {
                                return charset;
                            }
                            var contentType = this.headers.get('Content-Type');
                            if (contentType && /^application\/json\b|\+json\b/i.test(contentType)) {
                                return 'utf-8';
                            }
                            return 'iso-8859-1';
                        }
                    });
                    Object.defineProperty(Message.prototype, 'isMultipart', {
                        enumerable: true,
                        get: function () {
                            return /^multipart\//.test(this.headers.get('Content-Type'));
                        }
                    });
                    Object.defineProperty(Message.prototype, 'boundary', {
                        enumerable: true,
                        get: function () {
                            return this.isMultipart && this.headers.parameter('Content-Type', 'boundary');
                        }
                    });
                    Object.defineProperty(Message.prototype, '_bodyMustBeBuffer', {
                        get: function () {
                            if (this._parts) {
                                return this._parts.some(function (part) {
                                    return part._bodyMustBeBuffer;
                                });
                            } else {
                                return typeof Buffer === 'function' && Buffer.isBuffer(this.body);
                            }
                        }
                    });
                    Object.defineProperty(Message.prototype, 'unchunkedBody', {
                        enumerable: true,
                        get: function () {
                            if (!isDefined(this._unchunkedBody)) {
                                if (isDefined(this._rawBody)) {
                                    this._unchunkedBody = this._rawBody;
                                    var transferEncoding = this.headers.get('Transfer-Encoding');
                                    if (transferEncoding && transferEncoding === 'chunked') {
                                        try {
                                            this._unchunkedBody = decodeChunkedTransferEncoding(this._unchunkedBody);
                                        } catch (e) {
                                        }
                                    }
                                } else if (isDefined(this._body) || isDefined(this._parts)) {
                                    this._unchunkedBody = this.body;
                                    if ((this.isJson && typeof this._unchunkedBody !== 'undefined' || this._unchunkedBody && typeof this._unchunkedBody === 'object') && (typeof Buffer === 'undefined' || !Buffer.isBuffer(this._unchunkedBody))) {
                                        try {
                                            this._unchunkedBody = JSON.stringify(this._unchunkedBody);
                                        } catch (e) {
                                        }
                                    }
                                    var charset = this.charset;
                                    if (/^utf-?8$/i.test(charset) && typeof Buffer !== 'undefined') {
                                        this._unchunkedBody = new Buffer(this._unchunkedBody, 'utf-8');
                                    } else if (iconvLite.encodingExists(charset) && !/^utf-?8$/i.test(charset)) {
                                        this._unchunkedBody = iconvLite.encode(this._unchunkedBody, charset);
                                    }
                                    var contentTransferEncoding = this.headers.get('Content-Transfer-Encoding');
                                    if (contentTransferEncoding) {
                                        contentTransferEncoding = contentTransferEncoding.trim().toLowerCase();
                                        if (contentTransferEncoding === 'base64') {
                                            if (typeof Buffer !== 'undefined') {
                                                if (!Buffer.isBuffer(this._unchunkedBody)) {
                                                    this._unchunkedBody = new Buffer(this._unchunkedBody, 'utf-8');
                                                }
                                                this._unchunkedBody = this.rawBody.toString('base64');
                                            } else {
                                                this._unchunkedBody = btoa(this._unchunkedBody);
                                            }
                                        } else if (contentTransferEncoding === 'quoted-printable') {
                                            if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this._unchunkedBody)) {
                                                this._unchunkedBody = this._unchunkedBody.toString('binary');
                                            }
                                            this._unchunkedBody = quotedPrintable.encode(this._unchunkedBody);
                                        }
                                    }
                                    if (zlib && zlib.gzipSync) {
                                        var contentEncoding = this.headers.get('Content-Encoding');
                                        if (contentEncoding) {
                                            contentEncoding = contentEncoding.trim().toLowerCase();
                                            if (contentEncoding === 'gzip' || contentEncoding === 'deflate') {
                                                try {
                                                    this._unchunkedBody = zlib[contentEncoding === 'gzip' ? 'gzipSync' : 'deflateSync'](this._unchunkedBody || '');
                                                } catch (e) {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            return this._unchunkedBody;
                        },
                        set: function (unchunkedBody) {
                            this._unchunkedBody = unchunkedBody;
                            this._body = null;
                            this._rawBody = null;
                            this._parts = null;
                        }
                    });
                    Object.defineProperty(Message.prototype, 'rawBody', {
                        enumerable: true,
                        get: function () {
                            if (!isDefined(this._rawBody) && (isDefined(this._body) || isDefined(this._parts) || isDefined(this._unchunkedBody))) {
                                this._rawBody = this.unchunkedBody;
                                var transferEncoding = this.headers.get('Transfer-Encoding');
                                if (transferEncoding && transferEncoding === 'chunked') {
                                    if (typeof Buffer !== 'undefined' && !Buffer.isBuffer(this._rawBody)) {
                                        this._rawBody = new Buffer(this._rawBody, 'utf-8');
                                    }
                                    var chunks = [];
                                    if (this._rawBody.length > 0) {
                                        chunks.push(new Buffer(this._rawBody.length.toString(16) + '\r\n', 'ascii'), this._rawBody, new Buffer('\r\n', 'ascii'));
                                    }
                                    chunks.push(new Buffer('0\r\n\r\n', 'ascii'));
                                    this._rawBody = Buffer.concat(chunks);
                                }
                            }
                            return this._rawBody;
                        },
                        set: function (rawBody) {
                            this._rawBody = rawBody;
                            this._unchunkedBody = null;
                            this._body = null;
                            this._parts = null;
                        }
                    });
                    Object.defineProperty(Message.prototype, 'body', {
                        enumerable: true,
                        get: function () {
                            if (this._parts) {
                                if (this._parts.length === 0) {
                                    return;
                                } else {
                                    var boundary = this.boundary || '';
                                    if (this._bodyMustBeBuffer) {
                                        var chunks = [];
                                        this._parts.forEach(function (part, i) {
                                        }, this);
                                        chunks.push(new Buffer('\r\n--' + boundary + '--\r\n'));
                                        return Buffer.concat(chunks);
                                    } else {
                                        return '--' + boundary + '\r\n' + this._parts.join('\r\n--' + boundary + '\r\n') + '\r\n--' + boundary + '--\r\n';
                                    }
                                }
                            } else if (!isDefined(this._body) && (isDefined(this._rawBody) || isDefined(this._unchunkedBody))) {
                                this._body = this.unchunkedBody;
                                if (zlib && zlib.gunzipSync) {
                                    var contentEncoding = this.headers.get('Content-Encoding');
                                    if (contentEncoding) {
                                        contentEncoding = contentEncoding.trim().toLowerCase();
                                        if (contentEncoding === 'gzip' || contentEncoding === 'deflate') {
                                            if (typeof Buffer !== 'undefined' && !Buffer.isBuffer(this._rawBody)) {
                                                this._rawBody = new Buffer(this._rawBody, 'utf-8');
                                            }
                                            try {
                                                this._body = zlib[contentEncoding === 'gzip' ? 'gunzipSync' : 'inflateSync'](this._body);
                                            } catch (e) {
                                            }
                                        }
                                    }
                                }
                                var contentTransferEncoding = this.headers.get('Content-Transfer-Encoding'), contentTransferEncodingIsHonored = !contentTransferEncoding;
                                if (contentTransferEncoding) {
                                    contentTransferEncoding = contentTransferEncoding.trim().toLowerCase();
                                    if (contentTransferEncoding === 'quoted-printable') {
                                        if (typeof Buffer === 'function' && Buffer.isBuffer(this._body)) {
                                            this._body = this._body.toString('ascii');
                                        }
                                        var qpDecodedBodyAsByteString = quotedPrintable.decode(this._body);
                                        this._body = new Buffer(qpDecodedBodyAsByteString.length);
                                        for (var i = 0; i < qpDecodedBodyAsByteString.length; i += 1) {
                                            this._body[i] = qpDecodedBodyAsByteString.charCodeAt(i);
                                        }
                                        contentTransferEncodingIsHonored = true;
                                    } else if (contentTransferEncoding === 'base64') {
                                        if (typeof Buffer === 'function' && Buffer.isBuffer(this._body)) {
                                            this._body = this._body.toString('ascii');
                                        }
                                        if (typeof Buffer !== 'undefined') {
                                            this._body = new Buffer(this._body, 'base64');
                                        } else {
                                            this._body = atob(this._body);
                                        }
                                        contentTransferEncodingIsHonored = true;
                                    } else if (contentTransferEncoding === '8bit' || contentTransferEncoding === '7bit') {
                                        contentTransferEncodingIsHonored = true;
                                    }
                                }
                                if (this.hasTextualContentType && contentTransferEncodingIsHonored && this._body && typeof this._body !== 'string') {
                                    var charset = this.charset;
                                    if (iconvLite.encodingExists(charset)) {
                                        this._body = iconvLite.decode(this._body, charset);
                                    }
                                }
                                if (this.isJson && typeof this._body === 'string') {
                                    try {
                                        this._body = JSON.parse(this._body);
                                    } catch (e) {
                                    }
                                }
                            }
                            return this._body;
                        },
                        set: function (body) {
                            this._body = body;
                            if (this.isJson && typeof this._body === 'string') {
                                try {
                                    this._body = JSON.parse(this._body);
                                } catch (e) {
                                }
                            }
                            this._rawBody = null;
                            this._unchunkedBody = null;
                            this._parts = null;
                        }
                    });
                    Object.defineProperty(Message.prototype, 'parts', {
                        enumerable: true,
                        set: function (parts) {
                        },
                        get: function () {
                            if (!this._parts && this.isMultipart) {
                                var boundary = this.boundary || '', bodyAsString;
                                if (typeof Buffer === 'function' && Buffer.isBuffer(this.body)) {
                                    bodyAsString = this.body.toString('ascii');
                                } else {
                                    bodyAsString = this.body;
                                }
                                var boundaryRegExp = new RegExp('(^|\r\n?|\n\r?)--' + quoteRegExp(boundary) + '(--)?(?:\r\n?|\n\r?|$)', 'g'), startIndex = -1, parts = [], match;
                                // TODO: Basic validation of end marker etc.
                                while (match = boundaryRegExp.exec(bodyAsString)) {
                                    var index = match.index;
                                    if (startIndex !== -1) {
                                        parts.push(new Message(this.body.slice(startIndex, index)));
                                    }
                                    startIndex = index + match[0].length;
                                }
                                if (parts.length > 0) {
                                    this._parts = parts;
                                }
                            }
                            return this._parts;
                        }
                    });
                    Object.defineProperty(Message.prototype, 'fileName', {
                        get: function () {
                            return this.headers.parameter('Content-Disposition', 'filename') || this.isMessyMail && this.headers.parameter('Content-Type', 'name');
                        },
                        set: function (fileName) {
                        }
                    });
                    function buffersEqual(a, b) {
                    }
                    function isNonBufferNonRegExpObject(obj) {
                    }
                    Message.prototype.clone = function () {
                    };
                    Message.prototype.serialize = function (maxLineLength, forceString) {
                        if (typeof maxLineLength === 'undefined') {
                            maxLineLength = 72;
                        }
                        var result = this.headers.toString(maxLineLength);
                        if (typeof this.body !== 'undefined') {
                            result += '\r\n';
                            if (this.body && typeof this.body === 'object' && isNonBufferNonRegExpObject(this.body)) {
                                result += JSON.stringify(this.body);
                            } else {
                                if (!forceString && this._bodyMustBeBuffer) {
                                    result = Buffer.concat([
                                        new Buffer(result),
                                        this.body
                                    ]);
                                } else {
                                    result += this.body;
                                }
                            }
                        }
                        return result;
                    };
                    Message.prototype.toString = function (maxLineLength) {
                        return this.serialize(maxLineLength, true);
                    };
                    Message.prototype.equals = function (other) {
                    };
                    Message.prototype.hasEmptyBody = function () {
                        if (typeof this.body === 'string') {
                            return this.body.length === 0;
                        } else if (typeof Buffer === 'function' && Buffer.isBuffer(this.body)) {
                            return this.body.length === 0;
                        } else if (this.body && typeof this.body === 'object') {
                            return false;
                        } else {
                            return true;
                        }
                    };
                    Message.prototype.toJSON = function () {
                        var obj = {};
                        if (this.headers.getNames().length > 0) {
                            obj.headers = this.headers.toJSON();
                        }
                        bodyPropertyNames.some(function (bodyPropertyName) {
                            var propertyValue = this['_' + bodyPropertyName];
                            if (propertyValue !== null && typeof propertyValue !== 'undefined') {
                                // An empty string is OK, but we use both null and undefined
                                if (bodyPropertyName === 'parts') {
                                    propertyValue = propertyValue.map(function (part) {
                                    });
                                }
                                obj[bodyPropertyName] = propertyValue;
                                return true;
                            }
                        }, this);
                        return obj;
                    };
                    module.exports = Message;
                }.call(this, require(5).Buffer));
            },
            {
                '42': 42,
                '5': 5,
                '52': 52,
                '57': 57,
                '69': 69,
                '71': 71
            }
        ],
        50: [
            function (require, module, exports) {
                (function (Buffer) {
                    function RequestLine(obj) {
                        this.populate(obj);
                    }
                    RequestLine.nonComputedPropertyNames = [
                        'method',
                        'url',
                        'protocolName',
                        'protocolVersion'
                    ];
                    RequestLine.propertyNames = [
                        'protocol',
                        'path',
                        'search',
                        'query'
                    ].concat(RequestLine.nonComputedPropertyNames);
                    RequestLine.prototype.isMessyRequestLine = true;
                    RequestLine.prototype.populate = function (obj) {
                        if (obj && typeof obj === 'object' && !Buffer.isBuffer(obj)) {
                            this.populateFromObject(obj);
                        } else if (typeof obj === 'string') {
                            this.populateFromString(obj);
                        }
                        return this;
                    };
                    RequestLine.prototype.populateFromObject = function (obj) {
                        RequestLine.propertyNames.forEach(function (propertyName) {
                            if (typeof obj[propertyName] !== 'undefined') {
                                this[propertyName] = obj[propertyName];
                            }
                        }, this);
                        return this;
                    };
                    RequestLine.prototype.populateProtocolFromString = function (str) {
                        if (str !== '') {
                            var protocolFragments = str.split('/');
                            if (protocolFragments.length === 2) {
                                this.protocolName = protocolFragments[0];
                                this.protocolVersion = protocolFragments[1];
                            } else {
                                throw new Error('Could not parse protocol: ' + str);
                            }
                        }
                        return this;
                    };
                    RequestLine.prototype.populateFromString = function (str) {
                        if (str !== '') {
                            var requestLineFragments = str.split(/\s+/);
                            if (requestLineFragments.length > 3) {
                                throw new Error('Could not parse request line: ' + str);
                            } else {
                                if (requestLineFragments.length > 0) {
                                    this.method = requestLineFragments[0].toUpperCase();
                                }
                                if (requestLineFragments.length > 1) {
                                    this.url = requestLineFragments[1];
                                }
                                if (requestLineFragments.length > 2) {
                                    this.populateProtocolFromString(requestLineFragments[2]);
                                }
                            }
                        }
                        return this;
                    };
                    RequestLine.prototype.populateUrlFromString = function (url) {
                        var matchUrl = url.match(/^([^?]*)(\?.*)?$/);
                        this.path = matchUrl[1] ? matchUrl[1].replace(/^\/?/, '/') : '/';
                        this.search = matchUrl[2] || undefined;
                        return this;
                    };
                    Object.defineProperty(RequestLine.prototype, 'protocol', {
                        enumerable: true,
                        get: function () {
                            var fragments = [];
                            if (typeof this.protocolName !== 'undefined') {
                                fragments.push(String(this.protocolName).toUpperCase());
                            }
                            if (typeof this.protocolVersion !== 'undefined') {
                                fragments.push('/' + this.protocolVersion);
                            }
                            if (fragments.length > 0) {
                                return fragments.join('');
                            }
                        },
                        set: function (protocol) {
                            this.populateProtocolFromString(protocol);
                        }
                    });
                    Object.defineProperty(RequestLine.prototype, 'url', {
                        enumerable: true,
                        get: function () {
                            return (this.path || '') + (this.search || '');
                        },
                        set: function (url) {
                            this.populateUrlFromString(url);
                        }
                    });
                    Object.defineProperty(RequestLine.prototype, 'query', {
                        enumerable: true,
                        get: function () {
                            return typeof this.search === 'undefined' ? undefined : String(this.search).replace(/^\?/, '');
                        },
                        set: function (query) {
                        }
                    });
                    RequestLine.prototype.clone = function () {
                        return new RequestLine(this);
                    };
                    RequestLine.prototype.toString = function (maxLineLength) {
                        return String(this.method).toUpperCase() + (typeof this.url === 'string' ? ' ' + this.url + (typeof this.protocol === 'string' ? ' ' + this.protocol : '') : '');
                    };
                    RequestLine.prototype.equals = function (other) {
                        return this === other || other instanceof RequestLine && this.method === other.method && (this.path || '') === (other.path || '') && (this.search || '') === (other.search || '') && this.protocolName === other.protocolName && this.protocolVersion === other.protocolVersion;
                    };
                    RequestLine.prototype.toJSON = function () {
                    };
                    module.exports = RequestLine;
                }.call(this, { 'isBuffer': require(11) }));
            },
            { '11': 11 }
        ],
        51: [
            function (require, module, exports) {
                (function (Buffer) {
                    function StatusLine(obj) {
                        this.populate(obj);
                    }
                    StatusLine.nonComputedPropertyNames = [
                        'protocolName',
                        'protocolVersion',
                        'statusCode',
                        'statusMessage'
                    ];
                    StatusLine.propertyNames = ['protocol'].concat(StatusLine.nonComputedPropertyNames);
                    StatusLine.prototype.isMessyStatusLine = true;
                    StatusLine.prototype.populate = function (obj) {
                        if (typeof obj === 'number') {
                            this.populateFromObject({ statusCode: obj });
                        } else if (typeof obj === 'string') {
                            this.populateFromString(obj);
                        } else if (obj && typeof obj === 'object' && !Buffer.isBuffer(obj)) {
                            this.populateFromObject(obj);
                        }
                        return this;
                    };
                    StatusLine.prototype.populateFromObject = function (obj) {
                        StatusLine.propertyNames.forEach(function (propertyName) {
                            if (typeof obj[propertyName] !== 'undefined') {
                                this[propertyName] = obj[propertyName];
                            }
                        }, this);
                        return this;
                    };
                    StatusLine.prototype.populateFromString = function (str) {
                        var statusLineFragments = str.split(/\s+/);
                        if (statusLineFragments.length > 0) {
                            this.populateProtocolFromString(statusLineFragments[0]);
                        }
                        if (statusLineFragments.length > 1) {
                            this.statusCode = parseInt(statusLineFragments[1], 10);
                        }
                        if (statusLineFragments.length > 2) {
                            this.statusMessage = statusLineFragments.slice(2).join(' ');
                        }
                        return this;
                    };
                    StatusLine.prototype.populateProtocolFromString = function (protocol) {
                        if (protocol !== '') {
                            var protocolFragments = protocol.split('/');
                            if (protocolFragments.length === 2) {
                                this.protocolName = protocolFragments[0];
                                this.protocolVersion = protocolFragments[1];
                            } else {
                                throw new Error('Could not parse protocol: ' + protocol);
                            }
                        }
                        return this;
                    };
                    Object.defineProperty(StatusLine.prototype, 'protocol', {
                        enumerable: true,
                        get: function () {
                            var fragments = [];
                            if (typeof this.protocolName !== 'undefined') {
                                fragments.push(String(this.protocolName).toUpperCase());
                            }
                            if (typeof this.protocolVersion !== 'undefined') {
                                fragments.push(this.protocolVersion);
                            }
                            if (fragments.length > 0) {
                                return fragments.join('/');
                            }
                        },
                        set: function (protocol) {
                            this.populateProtocolFromString(protocol);
                        }
                    });
                    StatusLine.prototype.clone = function () {
                        return new StatusLine(this);
                    };
                    StatusLine.prototype.toString = function () {
                        return this.protocol + ' ' + this.statusCode + ' ' + this.statusMessage;
                    };
                    StatusLine.prototype.equals = function (other) {
                        return this === other || other instanceof StatusLine && this.protocolName === other.protocolName && this.protocolVersion === other.protocolVersion && this.statusCode === other.statusCode && this.statusMessage === other.statusMessage;
                    };
                    StatusLine.prototype.toJSON = function () {
                        var obj = {};
                        StatusLine.nonComputedPropertyNames.forEach(function (propertyName) {
                            if (typeof this[propertyName] !== 'undefined') {
                                obj[propertyName] = this[propertyName];
                            }
                        }, this);
                        return obj;
                    };
                    module.exports = StatusLine;
                }.call(this, { 'isBuffer': require(11) }));
            },
            { '11': 11 }
        ],
        52: [
            function (require, module, exports) {
                (function (Buffer) {
                    module.exports = function decodeTransferEncodingChunked(body) {
                        var chunks = [], index = 0, nextChunkLength, nextChunkLengthHex;
                        if (typeof Buffer !== 'undefined' && Buffer.isBuffer(body)) {
                            while (index < body.length) {
                                nextChunkLengthHex = '';
                                while (index < body.length && body[index] !== 13) {
                                    var hexChar = String.fromCharCode(body[index]);
                                    if (!/[0-9a-f]/i.test(hexChar)) {
                                        throw new Error('decodeTransferEncodingChunked: Invalid hex char when decoding chunk length: ' + hexChar);
                                    }
                                    nextChunkLengthHex += hexChar;
                                    index += 1;
                                }
                                if (body[index] === 13 && body[index + 1] === 10) {
                                    index += 2;
                                    nextChunkLength = parseInt(nextChunkLengthHex, 16);
                                    if (nextChunkLength === 0) {
                                        return Buffer.concat(chunks);
                                    } else if (nextChunkLength > 0 && body.length >= index + nextChunkLength) {
                                        chunks.push(body.slice(index, index + nextChunkLength));
                                        index += nextChunkLength;
                                        // We do a best effort and exit if we've reached the end of some partial body
                                        if (index === body.length || index + 2 === body.length && body[index] === 13 && body[index + 1] === 10) {
                                            return Buffer.concat(chunks);
                                        }
                                        if (index + 2 >= body.length || body[index] !== 13 || body[index + 1] !== 10) {
                                            throw new Error('decodeTransferEncodingChunked: Parse error, expecting \\r\\n after chunk');
                                        } else {
                                            index += 2;
                                        }
                                    } else {
                                        throw new Error('decodeTransferEncodingChunked: Parse error, not enough data to consume a chunk of ' + nextChunkLength + ' byte(s)');
                                    }
                                } else {
                                    throw new Error('decodeTransferEncodingChunked: Parse error, expecting \\r\\n after chunk length');
                                }
                            }
                        } else {
                            // Assume string
                            while (index < body.length) {
                                nextChunkLengthHex = '';
                                while (index < body.length && body[index] !== '\r') {
                                    nextChunkLengthHex += body[index];
                                    index += 1;
                                }
                                if (body[index] === '\r' && body[index + 1] === '\n') {
                                    index += 2;
                                    nextChunkLength = parseInt(nextChunkLengthHex, 16);
                                    if (nextChunkLength === 0) {
                                        return chunks.join('');
                                    } else if (nextChunkLength > 0 && body.length >= index + nextChunkLength) {
                                        chunks.push(body.slice(index, index + nextChunkLength));
                                        index += nextChunkLength;
                                        // We do a best effort and exit if we've reached the end of some partial body
                                        if (index === body.length || index + 2 === body.length && body[index] === '\r' && body[index + 1] === '\n') {
                                            return chunks.join('');
                                        }
                                        if (index + 2 >= body.length || body[index] !== '\r' || body[index + 1] !== '\n') {
                                            throw new Error('decodeTransferEncodingChunked: Parse error, expecting \\r\\n after chunk');
                                        } else {
                                            index += 2;
                                        }
                                    } else {
                                        throw new Error('decodeTransferEncodingChunked: Parse error, not enough data to consume a chunk of ' + nextChunkLength + ' byte(s)');
                                    }
                                } else {
                                    throw new Error('decodeTransferEncodingChunked: Parse error, expecting \\r\\n after chunk length');
                                }
                            }
                        }
                    };
                }.call(this, require(5).Buffer));
            },
            { '5': 5 }
        ],
        53: [
            function (require, module, exports) {
                module.exports = function foldHeaderLine(str, maxLength, firstLineMaxLength) {
                    maxLength = maxLength || 78;
                    firstLineMaxLength = firstLineMaxLength || maxLength;
                    if (str.length <= firstLineMaxLength) {
                        return str;
                    }
                    var result = '', currentLineStartIndex = 0, lastSpaceIndex = -1, lastSpace, isFirstLine = true;
                    for (var i = 0; i < str.length; i += 1) {
                        if (/^\s$/.test(str[i])) {
                            lastSpaceIndex = i;
                            lastSpace = str[i];
                        }
                        if (i - currentLineStartIndex >= (isFirstLine ? firstLineMaxLength : maxLength - 1) && lastSpaceIndex !== -1) {
                            result += (isFirstLine ? '' : '\r\n' + lastSpace) + str.substring(currentLineStartIndex, lastSpaceIndex);
                            isFirstLine = false;
                            i = lastSpaceIndex;
                            currentLineStartIndex = i + 1;
                            lastSpaceIndex = -1;
                        }
                    }
                    if (i > currentLineStartIndex) {
                        result += (isFirstLine ? '' : '\r\n' + lastSpace) + str.substring(currentLineStartIndex, str.length);
                    }
                    return result;
                };
            },
            {}
        ],
        54: [
            function (require, module, exports) {
                var headerNameSpecialCases = require(55);
                /**
 * Convert a header name to its canonical form,
 * e.g. "content-length" => "Content-Length".
 * @param headerName the header name (case insensitive)
 * @return {String} the formatted header name
 */
                function formatHeaderName(headerName) {
                    var lowerCasedHeaderName = headerName.toLowerCase();
                    if (headerNameSpecialCases.hasOwnProperty(lowerCasedHeaderName)) {
                        return headerNameSpecialCases[lowerCasedHeaderName];
                    } else {
                        // Make sure that the first char and all chars following a dash are upper-case:
                        return lowerCasedHeaderName.replace(/(^|-)([a-z])/g, function ($0, optionalLeadingDash, ch) {
                            return optionalLeadingDash + ch.toUpperCase();
                        });
                    }
                }
                module.exports = formatHeaderName;
            },
            { '55': 55 }
        ],
        55: [
            function (require, module, exports) {
                // Headers that cannot be canonicalized by naive camel casing:
                module.exports = {
                    'a-im': 'A-IM',
                    bcc: 'BCC',
                    cc: 'CC',
                    'content-md5': 'Content-MD5',
                    'c-pep': 'C-PEP',
                    'c-pep-info': 'C-PEP-Info',
                    'content-features': 'Content-features',
                    'content-id': 'Content-ID',
                    dasl: 'DASL',
                    dav: 'DAV',
                    'dl-expansion-history': 'DL-Expansion-History',
                    'differential-id': 'Differential-ID',
                    'discarded-x400-ipms-extensions': 'Discarded-X400-IPMS-Extensions',
                    'discarded-x400-mts-extensions': 'Discarded-X400-MTS-Extensions',
                    'dkim-signature': 'DKIM-Signature',
                    'ediint-features': 'EDIINT-Features',
                    'jabber-id': 'Jabber-ID',
                    'list-id': 'List-ID',
                    'mime-version': 'MIME-Version',
                    'message-id': 'Message-ID',
                    'mmhs-exempted-address': 'MMHS-Exempted-Address',
                    'mmhs-extended-authorisation-info': 'MMHS-Extended-Authorisation-Info',
                    'mmhs-subject-indicator-codes': 'MMHS-Subject-Indicator-Codes',
                    'mmhs-handling-instructions': 'MMHS-Handling-Instructions',
                    'mmhs-message-instructions': 'MMHS-Message-Instructions',
                    'mmhs-codress-message-indicator': 'MMHS-Codress-Message-Indicator',
                    'mmhs-originator-reference': 'MMHS-Originator-Reference',
                    'mmhs-primary-precedence': 'MMHS-Primary-Precedence',
                    'mmhs-copy-precedence': 'MMHS-Copy-Precedence',
                    'mmhs-message-type': 'MMHS-Message-Type',
                    'mmhs-other-receipients-indicator-to': 'MMHS-Other-Recipients-Indicator-To',
                    'mmhs-other-recipients-indicator-cc': 'MMHS-Other-Recipients-Indicator-CC',
                    'mmhs-acp127-message-identifier': 'MMHS-Acp127-Message-Identifier',
                    'mmhs-originator-plad': 'MMHS-Originator-PLAD',
                    'mt-priority': 'MT-Priority',
                    'nntp-posting-date': 'NNTP-Posting-Date',
                    'nntp-posting-host': 'NNTP-Posting-Host',
                    'original-message-id': 'Original-Message-ID',
                    dnt: 'DNT',
                    etag: 'ETag',
                    p3p: 'P3P',
                    pep: 'PEP̈́',
                    'pics-label': 'PICS-Label',
                    'prevent-nondelivery-report': 'Prevent-NonDelivery-Report',
                    profileobject: 'ProfileObject',
                    'received-spf': 'Received-SPF',
                    'resent-message-id': 'Resent-Message-ID',
                    'sec-websocket-accept': 'Sec-WebSocket-Accept',
                    'sec-websocket-extensions': 'Sec-WebSocket-Extensions',
                    'sec-websocket-key': 'Sec-WebSocket-Key',
                    'sec-websocket-protocol': 'Sec-WebSocket-Protocol',
                    'sec-websocket-version': 'Sec-WebSocket-Version',
                    slug: 'SLUG',
                    soapaction: 'SoapAction',
                    'status-uri': 'Status-URI',
                    subok: 'SubOK',
                    tcn: 'TCN',
                    te: 'TE',
                    'ua-color': 'UA-Color',
                    'ua-media': 'UA-Media',
                    'ua-pixels': 'UA-Pixels',
                    'ua-resolution': 'UA-Resolution',
                    'ua-windowpixels': 'UA-Windowpixels',
                    uri: 'URI',
                    'vbr-info': 'VBR-Info',
                    'www-authenticate': 'WWW-Authenticate',
                    'x400-mts-identifier': 'X400-MTS-Identifier',
                    'x-att-deviceid': 'X-ATT-DeviceId',
                    'x-cdn': 'X-CDN',
                    'x-csa-complaints': 'x-csa-complaints',
                    'x-originating-ip': 'X-Originating-IP',
                    'x-riferimento-message-id': 'X-Riferimento-Message-ID',
                    'x-sg-eid': 'X-SG-EID',
                    'x-tiporicevuta': 'X-TipoRicevuta',
                    'x-ua-compatible': 'X-UA-Compatible',
                    'x-verificasicurezza': 'X-VerificaSicurezza',
                    'x-xss-protection': 'X-XSS-Protection'
                };
            },
            {}
        ],
        56: [
            function (require, module, exports) {
                module.exports = {
                    Headers: require(42),
                    Message: require(49),
                    Mail: require(48),
                    RequestLine: require(50),
                    HttpRequest: require(46),
                    StatusLine: require(51),
                    HttpResponse: require(47),
                    HttpExchange: require(45),
                    HttpConversation: require(44),
                    formatHeaderName: require(54),
                    foldHeaderLine: require(53),
                    headerNameSpecialCases: require(55)
                };
            },
            {
                '42': 42,
                '44': 44,
                '45': 45,
                '46': 46,
                '47': 47,
                '48': 48,
                '49': 49,
                '50': 50,
                '51': 51,
                '53': 53,
                '54': 54,
                '55': 55
            }
        ],
        57: [
            function (require, module, exports) {
                module.exports = function isRegExp(re) {
                };
            },
            {}
        ],
        58: [
            function (require, module, exports) {
                'use strict';
                // Multibyte codec. In this scheme, a character is represented by 1 or more bytes.
                // Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.
                // To save memory and loading time, we read table files only when requested.
                exports._dbcs = DBCSCodec;
                var UNASSIGNED = -1, GB18030_CODE = -2, SEQ_START = -10, NODE_START = -1000, UNASSIGNED_NODE = new Array(256), DEF_CHAR = -1;
                for (var i = 0; i < 256; i++)
                    UNASSIGNED_NODE[i] = UNASSIGNED;
                // Class DBCSCodec reads and initializes mapping tables.
                function DBCSCodec(codecOptions, iconv) {
                }
                DBCSCodec.prototype.encoder = DBCSEncoder;
                DBCSCodec.prototype.decoder = DBCSDecoder;
                // Decoder helpers
                DBCSCodec.prototype._getDecodeTrieNode = function (addr) {
                };
                DBCSCodec.prototype._addDecodeChunk = function (chunk) {
                };
                // Encoder helpers
                DBCSCodec.prototype._getEncodeBucket = function (uCode) {
                };
                DBCSCodec.prototype._setEncodeChar = function (uCode, dbcsCode) {
                };
                DBCSCodec.prototype._setEncodeSequence = function (seq, dbcsCode) {
                };
                DBCSCodec.prototype._fillEncodeTable = function (nodeIdx, prefix, skipEncodeChars) {
                };
                // == Encoder ==================================================================
                function DBCSEncoder(options, codec) {
                }
                DBCSEncoder.prototype.write = function (str) {
                };
                DBCSEncoder.prototype.end = function () {
                };
                // Export for testing
                DBCSEncoder.prototype.findIdx = findIdx;
                // == Decoder ==================================================================
                function DBCSDecoder(options, codec) {
                }
                DBCSDecoder.prototype.write = function (buf) {
                };
                DBCSDecoder.prototype.end = function () {
                };
                // Binary search for GB18030. Returns largest i such that table[i] <= val.
                function findIdx(table, val) {
                }
            },
            {}
        ],
        59: [
            function (require, module, exports) {
                'use strict';
                // Description of supported double byte encodings and aliases.
                // Tables are not require()-d until they are needed to speed up library load.
                // require()-s are direct to support Browserify.
                module.exports = {
                    // == Japanese/ShiftJIS ====================================================
                    // All japanese encodings are based on JIS X set of standards:
                    // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
                    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
                    //              Has several variations in 1978, 1983, 1990 and 1997.
                    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
                    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
                    //              2 planes, first is superset of 0208, second - revised 0212.
                    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)
                    // Byte encodings are:
                    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
                    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
                    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
                    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
                    //               0x00-0x7F       - lower part of 0201
                    //               0x8E, 0xA1-0xDF - upper part of 0201
                    //               (0xA1-0xFE)x2   - 0208 plane (94x94).
                    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
                    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
                    //               Used as-is in ISO2022 family.
                    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
                    //                0201-1976 Roman, 0208-1978, 0208-1983.
                    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
                    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
                    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
                    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
                    //
                    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
                    //
                    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html
                    'shiftjis': {
                        type: '_dbcs',
                        table: function () {
                        },
                        encodeAdd: {
                            '\xA5': 92,
                            '\u203E': 126
                        },
                        encodeSkipVals: [{
                                from: 60736,
                                to: 63808
                            }]
                    },
                    'csshiftjis': 'shiftjis',
                    'mskanji': 'shiftjis',
                    'sjis': 'shiftjis',
                    'windows31j': 'shiftjis',
                    'xsjis': 'shiftjis',
                    'windows932': 'shiftjis',
                    '932': 'shiftjis',
                    'cp932': 'shiftjis',
                    'eucjp': {
                        type: '_dbcs',
                        table: function () {
                        },
                        encodeAdd: {
                            '\xA5': 92,
                            '\u203E': 126
                        }
                    },
                    // TODO: KDDI extension to Shift_JIS
                    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
                    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.
                    // == Chinese/GBK ==========================================================
                    // http://en.wikipedia.org/wiki/GBK
                    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
                    'gb2312': 'cp936',
                    'gb231280': 'cp936',
                    'gb23121980': 'cp936',
                    'csgb2312': 'cp936',
                    'csiso58gb231280': 'cp936',
                    'euccn': 'cp936',
                    'isoir58': 'gbk',
                    // Microsoft's CP936 is a subset and approximation of GBK.
                    // TODO: Euro = 0x80 in cp936, but not in GBK (where it's valid but undefined)
                    'windows936': 'cp936',
                    '936': 'cp936',
                    'cp936': {
                        type: '_dbcs',
                        table: function () {
                        }
                    },
                    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
                    'gbk': {
                        type: '_dbcs',
                        table: function () {
                        }
                    },
                    'xgbk': 'gbk',
                    // GB18030 is an algorithmic extension of GBK.
                    'gb18030': {
                        type: '_dbcs',
                        table: function () {
                        },
                        gb18030: function () {
                        }
                    },
                    'chinese': 'gb18030',
                    // TODO: Support GB18030 (~27000 chars + whole unicode mapping, cp54936)
                    // http://icu-project.org/docs/papers/gb18030.html
                    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
                    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
                    // == Korean ===============================================================
                    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
                    'windows949': 'cp949',
                    '949': 'cp949',
                    'cp949': {
                        type: '_dbcs',
                        table: function () {
                        }
                    },
                    'cseuckr': 'cp949',
                    'csksc56011987': 'cp949',
                    'euckr': 'cp949',
                    'isoir149': 'cp949',
                    'korean': 'cp949',
                    'ksc56011987': 'cp949',
                    'ksc56011989': 'cp949',
                    'ksc5601': 'cp949',
                    // == Big5/Taiwan/Hong Kong ================================================
                    // There are lots of tables for Big5 and cp950. Please see the following links for history:
                    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
                    // Variations, in roughly number of defined chars:
                    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
                    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
                    //  * Big5-2003 (Taiwan standard) almost superset of cp950.
                    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
                    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
                    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
                    //    Plus, it has 4 combining sequences.
                    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
                    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
                    //    Implementations are not consistent within browsers; sometimes labeled as just big5.
                    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
                    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
                    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
                    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
                    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
                    // 
                    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
                    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.
                    'windows950': 'cp950',
                    '950': 'cp950',
                    'cp950': {
                        type: '_dbcs',
                        table: function () {
                        }
                    },
                    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
                    'big5': 'big5hkscs',
                    'big5hkscs': {
                        type: '_dbcs',
                        table: function () {
                        },
                        encodeSkipVals: [41676]
                    },
                    'cnbig5': 'big5hkscs',
                    'csbig5': 'big5hkscs',
                    'xxbig5': 'big5hkscs'
                };
            },
            {}
        ],
        60: [
            function (require, module, exports) {
                'use strict';
                // Update this array if you add/rename/remove files in this directory.
                // We support Browserify by skipping automatic module discovery and requiring modules directly.
                var modules = [
                    require(61),
                    require(65),
                    require(66),
                    require(62),
                    require(64),
                    require(63),
                    require(58),
                    require(59)
                ];
                // Put all encoding/alias/codec definitions to single object and export it. 
                for (var i = 0; i < modules.length; i++) {
                    var module = modules[i];
                    for (var enc in module)
                        if (Object.prototype.hasOwnProperty.call(module, enc))
                            exports[enc] = module[enc];
                }
            },
            {
                '58': 58,
                '59': 59,
                '61': 61,
                '62': 62,
                '63': 63,
                '64': 64,
                '65': 65,
                '66': 66
            }
        ],
        61: [
            function (require, module, exports) {
                (function (Buffer) {
                    'use strict';
                    // Export Node.js internal encodings.
                    module.exports = {
                        // Encodings
                        utf8: {
                            type: '_internal',
                            bomAware: true
                        },
                        cesu8: {
                            type: '_internal',
                            bomAware: true
                        },
                        unicode11utf8: 'utf8',
                        ucs2: {
                            type: '_internal',
                            bomAware: true
                        },
                        utf16le: 'ucs2',
                        binary: { type: '_internal' },
                        base64: { type: '_internal' },
                        hex: { type: '_internal' },
                        // Codec.
                        _internal: InternalCodec
                    };
                    //------------------------------------------------------------------------------
                    function InternalCodec(codecOptions, iconv) {
                        this.enc = codecOptions.encodingName;
                        this.bomAware = codecOptions.bomAware;
                        if (this.enc === 'base64')
                            this.encoder = InternalEncoderBase64;
                        else if (this.enc === 'cesu8') {
                            this.enc = 'utf8';
                            // Use utf8 for decoding.
                            this.encoder = InternalEncoderCesu8;
                            // Add decoder for versions of Node not supporting CESU-8
                            if (new Buffer('eda080', 'hex').toString().length == 3) {
                                this.decoder = InternalDecoderCesu8;
                                this.defaultCharUnicode = iconv.defaultCharUnicode;
                            }
                        }
                    }
                    InternalCodec.prototype.encoder = InternalEncoder;
                    InternalCodec.prototype.decoder = InternalDecoder;
                    //------------------------------------------------------------------------------
                    // We use node.js internal decoder. Its signature is the same as ours.
                    var StringDecoder = require(32).StringDecoder;
                    if (!StringDecoder.prototype.end)
                        // Node v0.8 doesn't have this method.
                        StringDecoder.prototype.end = function () {
                        };
                    function InternalDecoder(options, codec) {
                        StringDecoder.call(this, codec.enc);
                    }
                    InternalDecoder.prototype = StringDecoder.prototype;
                    //------------------------------------------------------------------------------
                    // Encoder is mostly trivial
                    function InternalEncoder(options, codec) {
                    }
                    InternalEncoder.prototype.write = function (str) {
                    };
                    InternalEncoder.prototype.end = function () {
                    };
                    //------------------------------------------------------------------------------
                    // Except base64 encoder, which must keep its state.
                    function InternalEncoderBase64(options, codec) {
                    }
                    InternalEncoderBase64.prototype.write = function (str) {
                    };
                    InternalEncoderBase64.prototype.end = function () {
                    };
                    //------------------------------------------------------------------------------
                    // CESU-8 encoder is also special.
                    function InternalEncoderCesu8(options, codec) {
                    }
                    InternalEncoderCesu8.prototype.write = function (str) {
                    };
                    InternalEncoderCesu8.prototype.end = function () {
                    };
                    //------------------------------------------------------------------------------
                    // CESU-8 decoder is not implemented in Node v4.0+
                    function InternalDecoderCesu8(options, codec) {
                    }
                    InternalDecoderCesu8.prototype.write = function (buf) {
                    };
                    InternalDecoderCesu8.prototype.end = function () {
                    };
                }.call(this, require(5).Buffer));
            },
            {
                '32': 32,
                '5': 5
            }
        ],
        62: [
            function (require, module, exports) {
                (function (Buffer) {
                    'use strict';
                    // Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that
                    // correspond to encoded bytes (if 128 - then lower half is ASCII). 
                    exports._sbcs = SBCSCodec;
                    function SBCSCodec(codecOptions, iconv) {
                        if (!codecOptions)
                            throw new Error('SBCS codec is called without the data.');
                        // Prepare char buffer for decoding.
                        if (!codecOptions.chars || codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256)
                            throw new Error('Encoding \'' + codecOptions.type + '\' has incorrect \'chars\' (must be of len 128 or 256)');
                        if (codecOptions.chars.length === 128) {
                            var asciiString = '';
                            for (var i = 0; i < 128; i++)
                                asciiString += String.fromCharCode(i);
                            codecOptions.chars = asciiString + codecOptions.chars;
                        }
                        this.decodeBuf = new Buffer(codecOptions.chars, 'ucs2');
                        // Encoding buffer.
                        var encodeBuf = new Buffer(65536);
                        encodeBuf.fill(iconv.defaultCharSingleByte.charCodeAt(0));
                        for (var i = 0; i < codecOptions.chars.length; i++)
                            encodeBuf[codecOptions.chars.charCodeAt(i)] = i;
                        this.encodeBuf = encodeBuf;
                    }
                    SBCSCodec.prototype.encoder = SBCSEncoder;
                    SBCSCodec.prototype.decoder = SBCSDecoder;
                    function SBCSEncoder(options, codec) {
                    }
                    SBCSEncoder.prototype.write = function (str) {
                    };
                    SBCSEncoder.prototype.end = function () {
                    };
                    function SBCSDecoder(options, codec) {
                        this.decodeBuf = codec.decodeBuf;
                    }
                    SBCSDecoder.prototype.write = function (buf) {
                        // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
                        var decodeBuf = this.decodeBuf;
                        var newBuf = new Buffer(buf.length * 2);
                        var idx1 = 0, idx2 = 0;
                        for (var i = 0; i < buf.length; i++) {
                            idx1 = buf[i] * 2;
                            idx2 = i * 2;
                            newBuf[idx2] = decodeBuf[idx1];
                            newBuf[idx2 + 1] = decodeBuf[idx1 + 1];
                        }
                        return newBuf.toString('ucs2');
                    };
                    SBCSDecoder.prototype.end = function () {
                    };
                }.call(this, require(5).Buffer));
            },
            { '5': 5 }
        ],
        63: [
            function (require, module, exports) {
                'use strict';
                // Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.
                module.exports = {
                    '437': 'cp437',
                    '737': 'cp737',
                    '775': 'cp775',
                    '850': 'cp850',
                    '852': 'cp852',
                    '855': 'cp855',
                    '856': 'cp856',
                    '857': 'cp857',
                    '858': 'cp858',
                    '860': 'cp860',
                    '861': 'cp861',
                    '862': 'cp862',
                    '863': 'cp863',
                    '864': 'cp864',
                    '865': 'cp865',
                    '866': 'cp866',
                    '869': 'cp869',
                    '874': 'windows874',
                    '922': 'cp922',
                    '1046': 'cp1046',
                    '1124': 'cp1124',
                    '1125': 'cp1125',
                    '1129': 'cp1129',
                    '1133': 'cp1133',
                    '1161': 'cp1161',
                    '1162': 'cp1162',
                    '1163': 'cp1163',
                    '1250': 'windows1250',
                    '1251': 'windows1251',
                    '1252': 'windows1252',
                    '1253': 'windows1253',
                    '1254': 'windows1254',
                    '1255': 'windows1255',
                    '1256': 'windows1256',
                    '1257': 'windows1257',
                    '1258': 'windows1258',
                    '28591': 'iso88591',
                    '28592': 'iso88592',
                    '28593': 'iso88593',
                    '28594': 'iso88594',
                    '28595': 'iso88595',
                    '28596': 'iso88596',
                    '28597': 'iso88597',
                    '28598': 'iso88598',
                    '28599': 'iso88599',
                    '28600': 'iso885910',
                    '28601': 'iso885911',
                    '28603': 'iso885913',
                    '28604': 'iso885914',
                    '28605': 'iso885915',
                    '28606': 'iso885916',
                    'windows874': {
                        'type': '_sbcs',
                        'chars': '\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\u2026\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xA0กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู\uFFFD\uFFFD\uFFFD\uFFFD\u0E3Fเแโใไๅๆ็่้๊๋์ํ๎\u0E4F๐๑๒๓๔๕๖๗๘๙\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD'
                    },
                    'win874': 'windows874',
                    'cp874': 'windows874',
                    'windows1250': {
                        'type': '_sbcs',
                        'chars': '\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030Š\u2039ŚŤŽŹ\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122š\u203Aśťžź\xA0ˇ\u02D8Ł\xA4Ą\xA6\xA7\xA8\xA9Ş\xAB\xAC\xAD\xAEŻ\xB0\xB1\u02DBł\xB4µ\xB6\xB7\xB8ąş\xBBĽ\u02DDľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ\xD7ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö\xF7řůúűüýţ\u02D9'
                    },
                    'win1250': 'windows1250',
                    'cp1250': 'windows1250',
                    'windows1251': {
                        'type': '_sbcs',
                        'chars': 'ЂЃ\u201Aѓ\u201E\u2026\u2020\u2021\u20AC\u2030Љ\u2039ЊЌЋЏђ\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122љ\u203Aњќћџ\xA0ЎўЈ\xA4Ґ\xA6\xA7Ё\xA9Є\xAB\xAC\xAD\xAEЇ\xB0\xB1Ііґµ\xB6\xB7ё\u2116є\xBBјЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя'
                    },
                    'win1251': 'windows1251',
                    'cp1251': 'windows1251',
                    'windows1252': {
                        'type': '_sbcs',
                        'chars': '\u20AC\uFFFD\u201Aƒ\u201E\u2026\u2020\u2021ˆ\u2030Š\u2039Œ\uFFFDŽ\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122š\u203Aœ\uFFFDžŸ\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9ª\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4µ\xB6\xB7\xB8\xB9º\xBB\xBC\xBD\xBE\xBFÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ\xD7ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö\xF7øùúûüýþÿ'
                    },
                    'win1252': 'windows1252',
                    'cp1252': 'windows1252',
                    'windows1253': {
                        'type': '_sbcs',
                        'chars': '\u20AC\uFFFD\u201Aƒ\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0385Ά\xA3\xA4\xA5\xA6\xA7\xA8\xA9\uFFFD\xAB\xAC\xAD\xAE\u2015\xB0\xB1\xB2\xB3\u0384µ\xB6\xB7ΈΉΊ\xBBΌ\xBDΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ\uFFFDΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ\uFFFD'
                    },
                    'win1253': 'windows1253',
                    'cp1253': 'windows1253',
                    'windows1254': {
                        'type': '_sbcs',
                        'chars': '\u20AC\uFFFD\u201Aƒ\u201E\u2026\u2020\u2021ˆ\u2030Š\u2039Œ\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122š\u203Aœ\uFFFD\uFFFDŸ\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9ª\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4µ\xB6\xB7\xB8\xB9º\xBB\xBC\xBD\xBE\xBFÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ\xD7ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö\xF7øùúûüışÿ'
                    },
                    'win1254': 'windows1254',
                    'cp1254': 'windows1254',
                    'windows1255': {
                        'type': '_sbcs',
                        'chars': '\u20AC\uFFFD\u201Aƒ\u201E\u2026\u2020\u2021ˆ\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\xA1\xA2\xA3\u20AA\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4µ\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\xBFְֱֲֳִֵֶַָֹ\uFFFDֻּֽ\u05BEֿ\u05C0ׁׂ\u05C3װױײ\u05F3\u05F4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDאבגדהוזחטיךכלםמןנסעףפץצקרשת\uFFFD\uFFFD\u200E\u200F\uFFFD'
                    },
                    'win1255': 'windows1255',
                    'cp1255': 'windows1255',
                    'windows1256': {
                        'type': '_sbcs',
                        'chars': '\u20ACپ\u201Aƒ\u201E\u2026\u2020\u2021ˆ\u2030ٹ\u2039Œچژڈگ\u2018\u2019\u201C\u201D\u2022\u2013\u2014ک\u2122ڑ\u203Aœ‌‍ں\xA0\u060C\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9ھ\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4µ\xB6\xB7\xB8\xB9\u061B\xBB\xBC\xBD\xBE\u061Fہءآأؤإئابةتثجحخدذرزسشصض\xD7طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ\xF7ّùْûü\u200E\u200Fے'
                    },
                    'win1256': 'windows1256',
                    'cp1256': 'windows1256',
                    'windows1257': {
                        'type': '_sbcs',
                        'chars': '\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\xA8ˇ\xB8\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\xAF\u02DB\uFFFD\xA0\uFFFD\xA2\xA3\xA4\uFFFD\xA6\xA7Ø\xA9Ŗ\xAB\xAC\xAD\xAEÆ\xB0\xB1\xB2\xB3\xB4µ\xB6\xB7ø\xB9ŗ\xBB\xBC\xBD\xBEæĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ\xD7ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö\xF7ųłśūüżž\u02D9'
                    },
                    'win1257': 'windows1257',
                    'cp1257': 'windows1257',
                    'windows1258': {
                        'type': '_sbcs',
                        'chars': '\u20AC\uFFFD\u201Aƒ\u201E\u2026\u2020\u2021ˆ\u2030\uFFFD\u2039Œ\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203Aœ\uFFFD\uFFFDŸ\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9ª\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4µ\xB6\xB7\xB8\xB9º\xBB\xBC\xBD\xBE\xBFÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ\xD7ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö\xF7øùúûüư\u20ABÿ'
                    },
                    'win1258': 'windows1258',
                    'cp1258': 'windows1258',
                    'iso88591': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9ª\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4µ\xB6\xB7\xB8\xB9º\xBB\xBC\xBD\xBE\xBFÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ\xD7ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö\xF7øùúûüýþÿ'
                    },
                    'cp28591': 'iso88591',
                    'iso88592': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0Ą\u02D8Ł\xA4ĽŚ\xA7\xA8ŠŞŤŹ\xADŽŻ\xB0ą\u02DBł\xB4ľśˇ\xB8šşťź\u02DDžżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ\xD7ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö\xF7řůúűüýţ\u02D9'
                    },
                    'cp28592': 'iso88592',
                    'iso88593': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0Ħ\u02D8\xA3\xA4\uFFFDĤ\xA7\xA8İŞĞĴ\xAD\uFFFDŻ\xB0ħ\xB2\xB3\xB4µĥ\xB7\xB8ışğĵ\xBD\uFFFDżÀÁÂ\uFFFDÄĊĈÇÈÉÊËÌÍÎÏ\uFFFDÑÒÓÔĠÖ\xD7ĜÙÚÛÜŬŜßàáâ\uFFFDäċĉçèéêëìíîï\uFFFDñòóôġö\xF7ĝùúûüŭŝ\u02D9'
                    },
                    'cp28593': 'iso88593',
                    'iso88594': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0ĄĸŖ\xA4ĨĻ\xA7\xA8ŠĒĢŦ\xADŽ\xAF\xB0ą\u02DBŗ\xB4ĩļˇ\xB8šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ\xD7ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö\xF7øųúûüũū\u02D9'
                    },
                    'cp28594': 'iso88594',
                    'iso88595': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0ЁЂЃЄЅІЇЈЉЊЋЌ\xADЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\u2116ёђѓєѕіїјљњћќ\xA7ўџ'
                    },
                    'cp28595': 'iso88595',
                    'iso88596': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\uFFFD\uFFFD\xA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u060C\xAD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u061B\uFFFD\uFFFD\uFFFD\u061F\uFFFDءآأؤإئابةتثجحخدذرزسشصضطظعغ\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDـفقكلمنهوىيًٌٍَُِّْ\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'
                    },
                    'cp28596': 'iso88596',
                    'iso88597': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u2018\u2019\xA3\u20AC\u20AF\xA6\xA7\xA8\xA9ͺ\xAB\xAC\xAD\uFFFD\u2015\xB0\xB1\xB2\xB3\u0384\u0385Ά\xB7ΈΉΊ\xBBΌ\xBDΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ\uFFFDΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ\uFFFD'
                    },
                    'cp28597': 'iso88597',
                    'iso88598': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4µ\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2017אבגדהוזחטיךכלםמןנסעףפץצקרשת\uFFFD\uFFFD\u200E\u200F\uFFFD'
                    },
                    'cp28598': 'iso88598',
                    'iso88599': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9ª\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4µ\xB6\xB7\xB8\xB9º\xBB\xBC\xBD\xBE\xBFÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ\xD7ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö\xF7øùúûüışÿ'
                    },
                    'cp28599': 'iso88599',
                    'iso885910': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0ĄĒĢĪĨĶ\xA7ĻĐŠŦŽ\xADŪŊ\xB0ąēģīĩķ\xB7ļđšŧž\u2015ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ'
                    },
                    'cp28600': 'iso885910',
                    'iso885911': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู\uFFFD\uFFFD\uFFFD\uFFFD\u0E3Fเแโใไๅๆ็่้๊๋์ํ๎\u0E4F๐๑๒๓๔๕๖๗๘๙\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD'
                    },
                    'cp28601': 'iso885911',
                    'iso885913': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u201D\xA2\xA3\xA4\u201E\xA6\xA7Ø\xA9Ŗ\xAB\xAC\xAD\xAEÆ\xB0\xB1\xB2\xB3\u201Cµ\xB6\xB7ø\xB9ŗ\xBB\xBC\xBD\xBEæĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ\xD7ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö\xF7ųłśūüżž\u2019'
                    },
                    'cp28603': 'iso885913',
                    'iso885914': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0Ḃḃ\xA3ĊċḊ\xA7Ẁ\xA9ẂḋỲ\xAD\xAEŸḞḟĠġṀṁ\xB6ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ'
                    },
                    'cp28604': 'iso885914',
                    'iso885915': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\u20AC\xA5Š\xA7š\xA9ª\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3Žµ\xB6\xB7ž\xB9º\xBBŒœŸ\xBFÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ\xD7ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö\xF7øùúûüýþÿ'
                    },
                    'cp28605': 'iso885915',
                    'iso885916': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0ĄąŁ\u20AC\u201EŠ\xA7š\xA9Ș\xABŹ\xADźŻ\xB0\xB1ČłŽ\u201D\xB6\xB7žčș\xBBŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ'
                    },
                    'cp28606': 'iso885916',
                    'cp437': {
                        'type': '_sbcs',
                        'chars': 'ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ\xA2\xA3\xA5\u20A7ƒáíóúñÑªº\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580αßΓπΣσµτΦΘΩδ\u221Eφε\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221Aⁿ\xB2\u25A0\xA0'
                    },
                    'ibm437': 'cp437',
                    'csibm437': 'cp437',
                    'cp737': {
                        'type': '_sbcs',
                        'chars': 'ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580ωάέήϊίόύϋώΆΈΉΊΌΎΏ\xB1\u2265\u2264ΪΫ\xF7\u2248\xB0\u2219\xB7\u221Aⁿ\xB2\u25A0\xA0'
                    },
                    'ibm737': 'cp737',
                    'csibm737': 'cp737',
                    'cp775': {
                        'type': '_sbcs',
                        'chars': 'ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ\xA2ŚśÖÜø\xA3Ø\xD7\xA4ĀĪóŻżź\u201D\xA6\xA9\xAE\xAC\xBD\xBCŁ\xAB\xBB\u2591\u2592\u2593\u2502\u2524ĄČĘĖ\u2563\u2551\u2557\u255DĮŠ\u2510\u2514\u2534\u252C\u251C\u2500\u253CŲŪ\u255A\u2554\u2569\u2566\u2560\u2550\u256CŽąčęėįšųūž\u2518\u250C\u2588\u2584\u258C\u2590\u2580ÓßŌŃõÕµńĶķĻļņĒŅ\u2019\xAD\xB1\u201C\xBE\xB6\xA7\xF7\u201E\xB0\u2219\xB7\xB9\xB3\xB2\u25A0\xA0'
                    },
                    'ibm775': 'cp775',
                    'csibm775': 'cp775',
                    'cp850': {
                        'type': '_sbcs',
                        'chars': 'ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø\xA3Ø\xD7ƒáíóúñÑªº\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524ÁÂÀ\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253CãÃ\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4ðÐÊËÈıÍÎÏ\u2518\u250C\u2588\u2584\xA6Ì\u2580ÓßÔÒõÕµþÞÚÛÙýÝ\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0'
                    },
                    'ibm850': 'cp850',
                    'csibm850': 'cp850',
                    'cp852': {
                        'type': '_sbcs',
                        'chars': 'ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ\xD7čáíóúĄąŽžĘę\xACźČş\xAB\xBB\u2591\u2592\u2593\u2502\u2524ÁÂĚŞ\u2563\u2551\u2557\u255DŻż\u2510\u2514\u2534\u252C\u251C\u2500\u253CĂă\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4đĐĎËďŇÍÎě\u2518\u250C\u2588\u2584ŢŮ\u2580ÓßÔŃńňŠšŔÚŕŰýÝţ\xB4\xAD\u02DD\u02DBˇ\u02D8\xA7\xF7\xB8\xB0\xA8\u02D9űŘř\u25A0\xA0'
                    },
                    'ibm852': 'cp852',
                    'csibm852': 'cp852',
                    'cp855': {
                        'type': '_sbcs',
                        'chars': 'ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ\xAB\xBB\u2591\u2592\u2593\u2502\u2524хХиИ\u2563\u2551\u2557\u255DйЙ\u2510\u2514\u2534\u252C\u251C\u2500\u253CкК\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4лЛмМнНоОп\u2518\u250C\u2588\u2584Пя\u2580ЯрРсСтТуУжЖвВьЬ\u2116\xADыЫзЗшШэЭщЩчЧ\xA7\u25A0\xA0'
                    },
                    'ibm855': 'cp855',
                    'csibm855': 'cp855',
                    'cp856': {
                        'type': '_sbcs',
                        'chars': 'אבגדהוזחטיךכלםמןנסעףפץצקרשת\uFFFD\xA3\uFFFD\xD7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xAE\xAC\xBD\xBC\uFFFD\xAB\xBB\u2591\u2592\u2593\u2502\u2524\uFFFD\uFFFD\uFFFD\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\uFFFD\uFFFD\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2518\u250C\u2588\u2584\xA6\uFFFD\u2580\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDµ\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0'
                    },
                    'ibm856': 'cp856',
                    'csibm856': 'cp856',
                    'cp857': {
                        'type': '_sbcs',
                        'chars': 'ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø\xA3ØŞşáíóúñÑĞğ\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524ÁÂÀ\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253CãÃ\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4ºªÊËÈ\uFFFDÍÎÏ\u2518\u250C\u2588\u2584\xA6Ì\u2580ÓßÔÒõÕµ\uFFFD\xD7ÚÛÙìÿ\xAF\xB4\xAD\xB1\uFFFD\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0'
                    },
                    'ibm857': 'cp857',
                    'csibm857': 'cp857',
                    'cp858': {
                        'type': '_sbcs',
                        'chars': 'ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø\xA3Ø\xD7ƒáíóúñÑªº\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524ÁÂÀ\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253CãÃ\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4ðÐÊËÈ\u20ACÍÎÏ\u2518\u250C\u2588\u2584\xA6Ì\u2580ÓßÔÒõÕµþÞÚÛÙýÝ\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0'
                    },
                    'ibm858': 'cp858',
                    'csibm858': 'cp858',
                    'cp860': {
                        'type': '_sbcs',
                        'chars': 'ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ\xA2\xA3Ù\u20A7ÓáíóúñÑªº\xBFÒ\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580αßΓπΣσµτΦΘΩδ\u221Eφε\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221Aⁿ\xB2\u25A0\xA0'
                    },
                    'ibm860': 'cp860',
                    'csibm860': 'cp860',
                    'cp861': {
                        'type': '_sbcs',
                        'chars': 'ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø\xA3Ø\u20A7ƒáíóúÁÍÓÚ\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580αßΓπΣσµτΦΘΩδ\u221Eφε\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221Aⁿ\xB2\u25A0\xA0'
                    },
                    'ibm861': 'cp861',
                    'csibm861': 'cp861',
                    'cp862': {
                        'type': '_sbcs',
                        'chars': 'אבגדהוזחטיךכלםמןנסעףפץצקרשת\xA2\xA3\xA5\u20A7ƒáíóúñÑªº\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580αßΓπΣσµτΦΘΩδ\u221Eφε\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221Aⁿ\xB2\u25A0\xA0'
                    },
                    'ibm862': 'cp862',
                    'csibm862': 'cp862',
                    'cp863': {
                        'type': '_sbcs',
                        'chars': 'ÇüéâÂà\xB6çêëèïî\u2017À\xA7ÉÈÊôËÏûù\xA4ÔÜ\xA2\xA3ÙÛƒ\xA6\xB4óú\xA8\xB8\xB3\xAFÎ\u2310\xAC\xBD\xBC\xBE\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580αßΓπΣσµτΦΘΩδ\u221Eφε\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221Aⁿ\xB2\u25A0\xA0'
                    },
                    'ibm863': 'cp863',
                    'csibm863': 'cp863',
                    'cp864': {
                        'type': '_sbcs',
                        'chars': '\0\x01\x02\x03\x04\x05\x06\x07\b\t\n\x0B\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#$\u066A&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xB0\xB7\u2219\u221A\u2592\u2500\u2502\u253C\u2524\u252C\u251C\u2534\u2510\u250C\u2514\u2518β\u221Eφ\xB1\xBD\xBC\u2248\xAB\xBBﻷﻸ\uFFFD\uFFFDﻻﻼ\uFFFD\xA0\xADﺂ\xA3\xA4ﺄ\uFFFD\uFFFDﺎﺏﺕﺙ\u060Cﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ\u061Bﺱﺵﺹ\u061F\xA2ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ\xA6\xAC\xF7\xD7ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ\u25A0\uFFFD'
                    },
                    'ibm864': 'cp864',
                    'csibm864': 'cp864',
                    'cp865': {
                        'type': '_sbcs',
                        'chars': 'ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø\xA3Ø\u20A7ƒáíóúñÑªº\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xA4\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580αßΓπΣσµτΦΘΩδ\u221Eφε\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221Aⁿ\xB2\u25A0\xA0'
                    },
                    'ibm865': 'cp865',
                    'csibm865': 'cp865',
                    'cp866': {
                        'type': '_sbcs',
                        'chars': 'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580рстуфхцчшщъыьэюяЁёЄєЇїЎў\xB0\u2219\xB7\u221A\u2116\xA4\u25A0\xA0'
                    },
                    'ibm866': 'cp866',
                    'csibm866': 'cp866',
                    'cp869': {
                        'type': '_sbcs',
                        'chars': '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDΆ\uFFFD\xB7\xAC\xA6\u2018\u2019Έ\u2015ΉΊΪΌ\uFFFD\uFFFDΎΫ\xA9Ώ\xB2\xB3ά\xA3έήίϊΐόύΑΒΓΔΕΖΗ\xBDΘΙ\xAB\xBB\u2591\u2592\u2593\u2502\u2524ΚΛΜΝ\u2563\u2551\u2557\u255DΞΟ\u2510\u2514\u2534\u252C\u251C\u2500\u253CΠΡ\u255A\u2554\u2569\u2566\u2560\u2550\u256CΣΤΥΦΧΨΩαβγ\u2518\u250C\u2588\u2584δε\u2580ζηθικλμνξοπρσςτ\u0384\xAD\xB1υφχ\xA7ψ\u0385\xB0\xA8ωϋΰώ\u25A0\xA0'
                    },
                    'ibm869': 'cp869',
                    'csibm869': 'cp869',
                    'cp922': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9ª\xAB\xAC\xAD\xAE\u203E\xB0\xB1\xB2\xB3\xB4µ\xB6\xB7\xB8\xB9º\xBB\xBC\xBD\xBE\xBFÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ\xD7ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö\xF7øùúûüýžÿ'
                    },
                    'ibm922': 'cp922',
                    'csibm922': 'cp922',
                    'cp1046': {
                        'type': '_sbcs',
                        'chars': 'ﺈ\xD7\xF7\uF8F6\uF8F5\uF8F4\uF8F7ﹱ\x88\u25A0\u2502\u2500\u2510\u250C\u2514\u2518ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ\xA0\uF8FA\uF8F9\uF8F8\xA4\uF8FBﺋﺑﺗﺛﺟﺣ\u060C\xADﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ\u061Bﺻﺿﻊ\u061Fﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟ\uF8FCﻵﻷﻹﻻﻣﻧﻬﻩ\uFFFD'
                    },
                    'ibm1046': 'cp1046',
                    'csibm1046': 'cp1046',
                    'cp1124': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0ЁЂҐЄЅІЇЈЉЊЋЌ\xADЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\u2116ёђґєѕіїјљњћќ\xA7ўџ'
                    },
                    'ibm1124': 'cp1124',
                    'csibm1124': 'cp1124',
                    'cp1125': {
                        'type': '_sbcs',
                        'chars': 'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580рстуфхцчшщъыьэюяЁёҐґЄєІіЇї\xB7\u221A\u2116\xA4\u25A0\xA0'
                    },
                    'ibm1125': 'cp1125',
                    'csibm1125': 'cp1125',
                    'cp1129': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7œ\xA9ª\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3Ÿµ\xB6\xB7Œ\xB9º\xBB\xBC\xBD\xBE\xBFÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ\xD7ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö\xF7øùúûüư\u20ABÿ'
                    },
                    'ibm1129': 'cp1129',
                    'csibm1129': 'cp1129',
                    'cp1133': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ\uFFFD\uFFFD\uFFFDຯະາຳິີຶືຸູຼັົຽ\uFFFD\uFFFD\uFFFDເແໂໃໄ່້໊໋໌ໍໆ\uFFFDໜໝ\u20AD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD໐໑໒໓໔໕໖໗໘໙\uFFFD\uFFFD\xA2\xAC\xA6\uFFFD'
                    },
                    'ibm1133': 'cp1133',
                    'csibm1133': 'cp1133',
                    'cp1161': {
                        'type': '_sbcs',
                        'chars': '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋\u20AC\u0E3Fเแโใไๅๆ็่้๊๋์ํ๎\u0E4F๐๑๒๓๔๕๖๗๘๙\u0E5A\u0E5B\xA2\xAC\xA6\xA0'
                    },
                    'ibm1161': 'cp1161',
                    'csibm1161': 'cp1161',
                    'cp1162': {
                        'type': '_sbcs',
                        'chars': '\u20AC\x81\x82\x83\x84\u2026\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู\uFFFD\uFFFD\uFFFD\uFFFD\u0E3Fเแโใไๅๆ็่้๊๋์ํ๎\u0E4F๐๑๒๓๔๕๖๗๘๙\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD'
                    },
                    'ibm1162': 'cp1162',
                    'csibm1162': 'cp1162',
                    'cp1163': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\u20AC\xA5\xA6\xA7œ\xA9ª\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3Ÿµ\xB6\xB7Œ\xB9º\xBB\xBC\xBD\xBE\xBFÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ\xD7ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö\xF7øùúûüư\u20ABÿ'
                    },
                    'ibm1163': 'cp1163',
                    'csibm1163': 'cp1163',
                    'maccroatian': {
                        'type': '_sbcs',
                        'chars': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü\u2020\xB0\xA2\xA3\xA7\u2022\xB6ß\xAEŠ\u2122\xB4\xA8\u2260ŽØ\u221E\xB1\u2264\u2265\u2206µ\u2202\u2211\u220Fš\u222BªºΩžø\xBF\xA1\xAC\u221Aƒ\u2248Ć\xABČ\u2026\xA0ÀÃÕŒœĐ\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\uFFFD\xA9\u2044\xA4\u2039\u203AÆ\xBB\u2013\xB7\u201A\u201E\u2030ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ\u02DC\xAFπË\u02DA\xB8Êæˇ'
                    },
                    'maccyrillic': {
                        'type': '_sbcs',
                        'chars': 'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ\u2020\xB0\xA2\xA3\xA7\u2022\xB6І\xAE\xA9\u2122Ђђ\u2260Ѓѓ\u221E\xB1\u2264\u2265іµ\u2202ЈЄєЇїЉљЊњјЅ\xAC\u221Aƒ\u2248\u2206\xAB\xBB\u2026\xA0ЋћЌќѕ\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201EЎўЏџ\u2116Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю\xA4'
                    },
                    'macgreek': {
                        'type': '_sbcs',
                        'chars': 'Ä\xB9\xB2É\xB3ÖÜ\u0385àâä\u0384\xA8çéèêë\xA3\u2122îï\u2022\xBD\u2030ôö\xA6\xADùûü\u2020ΓΔΘΛΞΠß\xAE\xA9ΣΪ\xA7\u2260\xB0\u0387Α\xB1\u2264\u2265\xA5ΒΕΖΗΙΚΜΦΫΨΩάΝ\xACΟΡ\u2248Τ\xAB\xBB\u2026\xA0ΥΧΆΈœ\u2013\u2015\u201C\u201D\u2018\u2019\xF7ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\uFFFD'
                    },
                    'maciceland': {
                        'type': '_sbcs',
                        'chars': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ\xB0\xA2\xA3\xA7\u2022\xB6ß\xAE\xA9\u2122\xB4\xA8\u2260ÆØ\u221E\xB1\u2264\u2265\xA5µ\u2202\u2211\u220Fπ\u222BªºΩæø\xBF\xA1\xAC\u221Aƒ\u2248\u2206\xAB\xBB\u2026\xA0ÀÃÕŒœ\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CAÿŸ\u2044\xA4ÐðÞþý\xB7\u201A\u201E\u2030ÂÊÁËÈÍÎÏÌÓÔ\uFFFDÒÚÛÙıˆ\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DBˇ'
                    },
                    'macroman': {
                        'type': '_sbcs',
                        'chars': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü\u2020\xB0\xA2\xA3\xA7\u2022\xB6ß\xAE\xA9\u2122\xB4\xA8\u2260ÆØ\u221E\xB1\u2264\u2265\xA5µ\u2202\u2211\u220Fπ\u222BªºΩæø\xBF\xA1\xAC\u221Aƒ\u2248\u2206\xAB\xBB\u2026\xA0ÀÃÕŒœ\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CAÿŸ\u2044\xA4\u2039\u203Aﬁﬂ\u2021\xB7\u201A\u201E\u2030ÂÊÁËÈÍÎÏÌÓÔ\uFFFDÒÚÛÙıˆ\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DBˇ'
                    },
                    'macromania': {
                        'type': '_sbcs',
                        'chars': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü\u2020\xB0\xA2\xA3\xA7\u2022\xB6ß\xAE\xA9\u2122\xB4\xA8\u2260ĂŞ\u221E\xB1\u2264\u2265\xA5µ\u2202\u2211\u220Fπ\u222BªºΩăş\xBF\xA1\xAC\u221Aƒ\u2248\u2206\xAB\xBB\u2026\xA0ÀÃÕŒœ\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CAÿŸ\u2044\xA4\u2039\u203AŢţ\u2021\xB7\u201A\u201E\u2030ÂÊÁËÈÍÎÏÌÓÔ\uFFFDÒÚÛÙıˆ\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DBˇ'
                    },
                    'macthai': {
                        'type': '_sbcs',
                        'chars': '\xAB\xBB\u2026\uF88C\uF88F\uF892\uF895\uF898\uF88B\uF88E\uF891\uF894\uF897\u201C\u201D\uF899\uFFFD\u2022\uF884\uF889\uF885\uF886\uF887\uF888\uF88A\uF88D\uF890\uF893\uF896\u2018\u2019\uFFFD\xA0กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู\uFEFF\u200B\u2013\u2014\u0E3Fเแโใไๅๆ็่้๊๋์ํ\u2122\u0E4F๐๑๒๓๔๕๖๗๘๙\xAE\xA9\uFFFD\uFFFD\uFFFD\uFFFD'
                    },
                    'macturkish': {
                        'type': '_sbcs',
                        'chars': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü\u2020\xB0\xA2\xA3\xA7\u2022\xB6ß\xAE\xA9\u2122\xB4\xA8\u2260ÆØ\u221E\xB1\u2264\u2265\xA5µ\u2202\u2211\u220Fπ\u222BªºΩæø\xBF\xA1\xAC\u221Aƒ\u2248\u2206\xAB\xBB\u2026\xA0ÀÃÕŒœ\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CAÿŸĞğİıŞş\u2021\xB7\u201A\u201E\u2030ÂÊÁËÈÍÎÏÌÓÔ\uFFFDÒÚÛÙ\uFFFDˆ\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DBˇ'
                    },
                    'macukraine': {
                        'type': '_sbcs',
                        'chars': 'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ\u2020\xB0Ґ\xA3\xA7\u2022\xB6І\xAE\xA9\u2122Ђђ\u2260Ѓѓ\u221E\xB1\u2264\u2265іµґЈЄєЇїЉљЊњјЅ\xAC\u221Aƒ\u2248\u2206\xAB\xBB\u2026\xA0ЋћЌќѕ\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201EЎўЏџ\u2116Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю\xA4'
                    },
                    'koi8r': {
                        'type': '_sbcs',
                        'chars': '\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552ё\u2553\u2554\u2555\u2556\u2557\u2558\u2559\u255A\u255B\u255C\u255D\u255E\u255F\u2560\u2561Ё\u2562\u2563\u2564\u2565\u2566\u2567\u2568\u2569\u256A\u256B\u256C\xA9юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ'
                    },
                    'koi8u': {
                        'type': '_sbcs',
                        'chars': '\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552ёє\u2554ії\u2557\u2558\u2559\u255A\u255Bґ\u255D\u255E\u255F\u2560\u2561ЁЄ\u2563ІЇ\u2566\u2567\u2568\u2569\u256AҐ\u256C\xA9юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ'
                    },
                    'koi8ru': {
                        'type': '_sbcs',
                        'chars': '\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552ёє\u2554ії\u2557\u2558\u2559\u255A\u255Bґў\u255E\u255F\u2560\u2561ЁЄ\u2563ІЇ\u2566\u2567\u2568\u2569\u256AҐЎ\xA9юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ'
                    },
                    'koi8t': {
                        'type': '_sbcs',
                        'chars': 'қғ\u201AҒ\u201E\u2026\u2020\u2021\uFFFD\u2030ҳ\u2039ҲҷҶ\uFFFDҚ\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDӯӮё\xA4ӣ\xA6\xA7\uFFFD\uFFFD\uFFFD\xAB\xAC\xAD\xAE\uFFFD\xB0\xB1\xB2Ё\uFFFDӢ\xB6\xB7\uFFFD\u2116\uFFFD\xBB\uFFFD\uFFFD\uFFFD\xA9юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ'
                    },
                    'armscii8': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFDև\u0589)(\xBB\xAB\u2014.\u055D,-\u058A\u2026\u055C\u055B\u055EԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ\u055A\uFFFD'
                    },
                    'rk1048': {
                        'type': '_sbcs',
                        'chars': 'ЂЃ\u201Aѓ\u201E\u2026\u2020\u2021\u20AC\u2030Љ\u2039ЊҚҺЏђ\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122љ\u203Aњқһџ\xA0ҰұӘ\xA4Ө\xA6\xA7Ё\xA9Ғ\xAB\xAC\xAD\xAEҮ\xB0\xB1Ііөµ\xB6\xB7ё\u2116ғ\xBBәҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя'
                    },
                    'tcvn': {
                        'type': '_sbcs',
                        'chars': '\0ÚỤ\x03ỪỬỮ\x07\b\t\n\x0B\f\r\x0E\x0F\x10ỨỰỲỶỸÝỴ\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7FÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ\xA0ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ'
                    },
                    'georgianacademy': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\u201Aƒ\u201E\u2026\u2020\u2021ˆ\u2030Š\u2039Œ\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122š\u203Aœ\x9D\x9EŸ\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9ª\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4µ\xB6\xB7\xB8\xB9º\xBB\xBC\xBD\xBE\xBFაბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö\xF7øùúûüýþÿ'
                    },
                    'georgianps': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\u201Aƒ\u201E\u2026\u2020\u2021ˆ\u2030Š\u2039Œ\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122š\u203Aœ\x9D\x9EŸ\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9ª\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4µ\xB6\xB7\xB8\xB9º\xBB\xBC\xBD\xBE\xBFაბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö\xF7øùúûüýþÿ'
                    },
                    'pt154': {
                        'type': '_sbcs',
                        'chars': 'ҖҒӮғ\u201E\u2026ҶҮҲүҠӢҢҚҺҸҗ\u2018\u2019\u201C\u201D\u2022\u2013\u2014ҳҷҡӣңқһҹ\xA0ЎўЈӨҘҰ\xA7Ё\xA9Ә\xAB\xACӯ\xAEҜ\xB0ұІіҙө\xB6\xB7ё\u2116ә\xBBјҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя'
                    },
                    'viscii': {
                        'type': '_sbcs',
                        'chars': '\0\x01Ẳ\x03\x04ẴẪ\x07\b\t\n\x0B\f\r\x0E\x0F\x10\x11\x12\x13Ỷ\x15\x16\x17\x18Ỹ\x1A\x1B\x1C\x1DỴ\x1F !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7FẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ'
                    },
                    'iso646cn': {
                        'type': '_sbcs',
                        'chars': '\0\x01\x02\x03\x04\x05\x06\x07\b\t\n\x0B\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#\xA5%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\u203E\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'
                    },
                    'iso646jp': {
                        'type': '_sbcs',
                        'chars': '\0\x01\x02\x03\x04\x05\x06\x07\b\t\n\x0B\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\xA5]^_`abcdefghijklmnopqrstuvwxyz{|}\u203E\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'
                    },
                    'hproman8': {
                        'type': '_sbcs',
                        'chars': '\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0ÀÂÈÊËÎÏ\xB4ˋˆ\xA8\u02DCÙÛ\u20A4\xAFÝý\xB0ÇçÑñ\xA1\xBF\xA4\xA3\xA5\xA7ƒ\xA2âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ\xB7µ\xB6\xBE\u2014\xBC\xBDªº\xAB\u25A0\xBB\xB1\uFFFD'
                    },
                    'macintosh': {
                        'type': '_sbcs',
                        'chars': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü\u2020\xB0\xA2\xA3\xA7\u2022\xB6ß\xAE\xA9\u2122\xB4\xA8\u2260ÆØ\u221E\xB1\u2264\u2265\xA5µ\u2202\u2211\u220Fπ\u222BªºΩæø\xBF\xA1\xAC\u221Aƒ\u2248\u2206\xAB\xBB\u2026\xA0ÀÃÕŒœ\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CAÿŸ\u2044\xA4\u2039\u203Aﬁﬂ\u2021\xB7\u201A\u201E\u2030ÂÊÁËÈÍÎÏÌÓÔ\uFFFDÒÚÛÙıˆ\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DBˇ'
                    },
                    'ascii': {
                        'type': '_sbcs',
                        'chars': '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'
                    },
                    'tis620': {
                        'type': '_sbcs',
                        'chars': '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDกขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู\uFFFD\uFFFD\uFFFD\uFFFD\u0E3Fเแโใไๅๆ็่้๊๋์ํ๎\u0E4F๐๑๒๓๔๕๖๗๘๙\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD'
                    }
                };
            },
            {}
        ],
        64: [
            function (require, module, exports) {
                'use strict';
                // Manually added data to be used by sbcs codec in addition to generated one.
                module.exports = {
                    // Not supported by iconv, not sure why.
                    '10029': 'maccenteuro',
                    'maccenteuro': {
                        'type': '_sbcs',
                        'chars': 'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü\u2020\xB0Ę\xA3\xA7\u2022\xB6ß\xAE\xA9\u2122ę\xA8\u2260ģĮįĪ\u2264\u2265īĶ\u2202\u2211łĻļĽľĹĺŅņŃ\xAC\u221AńŇ\u2206\xAB\xBB\u2026\xA0ňŐÕőŌ\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CAōŔŕŘ\u2039\u203AřŖŗŠ\u201A\u201EšŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ'
                    },
                    '808': 'cp808',
                    'ibm808': 'cp808',
                    'cp808': {
                        'type': '_sbcs',
                        'chars': 'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580рстуфхцчшщъыьэюяЁёЄєЇїЎў\xB0\u2219\xB7\u221A\u2116\u20AC\u25A0\xA0'
                    },
                    // Aliases of generated encodings.
                    'ascii8bit': 'ascii',
                    'usascii': 'ascii',
                    'ansix34': 'ascii',
                    'ansix341968': 'ascii',
                    'ansix341986': 'ascii',
                    'csascii': 'ascii',
                    'cp367': 'ascii',
                    'ibm367': 'ascii',
                    'isoir6': 'ascii',
                    'iso646us': 'ascii',
                    'iso646irv': 'ascii',
                    'us': 'ascii',
                    'latin1': 'iso88591',
                    'latin2': 'iso88592',
                    'latin3': 'iso88593',
                    'latin4': 'iso88594',
                    'latin5': 'iso88599',
                    'latin6': 'iso885910',
                    'latin7': 'iso885913',
                    'latin8': 'iso885914',
                    'latin9': 'iso885915',
                    'latin10': 'iso885916',
                    'csisolatin1': 'iso88591',
                    'csisolatin2': 'iso88592',
                    'csisolatin3': 'iso88593',
                    'csisolatin4': 'iso88594',
                    'csisolatincyrillic': 'iso88595',
                    'csisolatinarabic': 'iso88596',
                    'csisolatingreek': 'iso88597',
                    'csisolatinhebrew': 'iso88598',
                    'csisolatin5': 'iso88599',
                    'csisolatin6': 'iso885910',
                    'l1': 'iso88591',
                    'l2': 'iso88592',
                    'l3': 'iso88593',
                    'l4': 'iso88594',
                    'l5': 'iso88599',
                    'l6': 'iso885910',
                    'l7': 'iso885913',
                    'l8': 'iso885914',
                    'l9': 'iso885915',
                    'l10': 'iso885916',
                    'isoir14': 'iso646jp',
                    'isoir57': 'iso646cn',
                    'isoir100': 'iso88591',
                    'isoir101': 'iso88592',
                    'isoir109': 'iso88593',
                    'isoir110': 'iso88594',
                    'isoir144': 'iso88595',
                    'isoir127': 'iso88596',
                    'isoir126': 'iso88597',
                    'isoir138': 'iso88598',
                    'isoir148': 'iso88599',
                    'isoir157': 'iso885910',
                    'isoir166': 'tis620',
                    'isoir179': 'iso885913',
                    'isoir199': 'iso885914',
                    'isoir203': 'iso885915',
                    'isoir226': 'iso885916',
                    'cp819': 'iso88591',
                    'ibm819': 'iso88591',
                    'cyrillic': 'iso88595',
                    'arabic': 'iso88596',
                    'arabic8': 'iso88596',
                    'ecma114': 'iso88596',
                    'asmo708': 'iso88596',
                    'greek': 'iso88597',
                    'greek8': 'iso88597',
                    'ecma118': 'iso88597',
                    'elot928': 'iso88597',
                    'hebrew': 'iso88598',
                    'hebrew8': 'iso88598',
                    'turkish': 'iso88599',
                    'turkish8': 'iso88599',
                    'thai': 'iso885911',
                    'thai8': 'iso885911',
                    'celtic': 'iso885914',
                    'celtic8': 'iso885914',
                    'isoceltic': 'iso885914',
                    'tis6200': 'tis620',
                    'tis62025291': 'tis620',
                    'tis62025330': 'tis620',
                    '10000': 'macroman',
                    '10006': 'macgreek',
                    '10007': 'maccyrillic',
                    '10079': 'maciceland',
                    '10081': 'macturkish',
                    'cspc8codepage437': 'cp437',
                    'cspc775baltic': 'cp775',
                    'cspc850multilingual': 'cp850',
                    'cspcp852': 'cp852',
                    'cspc862latinhebrew': 'cp862',
                    'cpgr': 'cp869',
                    'msee': 'cp1250',
                    'mscyrl': 'cp1251',
                    'msansi': 'cp1252',
                    'msgreek': 'cp1253',
                    'msturk': 'cp1254',
                    'mshebr': 'cp1255',
                    'msarab': 'cp1256',
                    'winbaltrim': 'cp1257',
                    'cp20866': 'koi8r',
                    '20866': 'koi8r',
                    'ibm878': 'koi8r',
                    'cskoi8r': 'koi8r',
                    'cp21866': 'koi8u',
                    '21866': 'koi8u',
                    'ibm1168': 'koi8u',
                    'strk10482002': 'rk1048',
                    'tcvn5712': 'tcvn',
                    'tcvn57121': 'tcvn',
                    'gb198880': 'iso646cn',
                    'cn': 'iso646cn',
                    'csiso14jisc6220ro': 'iso646jp',
                    'jisc62201969ro': 'iso646jp',
                    'jp': 'iso646jp',
                    'cshproman8': 'hproman8',
                    'r8': 'hproman8',
                    'roman8': 'hproman8',
                    'xroman8': 'hproman8',
                    'ibm1051': 'hproman8',
                    'mac': 'macintosh',
                    'csmacintosh': 'macintosh'
                };
            },
            {}
        ],
        65: [
            function (require, module, exports) {
                'use strict';
                // == UTF16-BE codec. ==========================================================
                exports.utf16be = Utf16BECodec;
                function Utf16BECodec() {
                }
                Utf16BECodec.prototype.encoder = Utf16BEEncoder;
                Utf16BECodec.prototype.decoder = Utf16BEDecoder;
                Utf16BECodec.prototype.bomAware = true;
                // -- Encoding
                function Utf16BEEncoder() {
                }
                Utf16BEEncoder.prototype.write = function (str) {
                };
                Utf16BEEncoder.prototype.end = function () {
                };
                // -- Decoding
                function Utf16BEDecoder() {
                }
                Utf16BEDecoder.prototype.write = function (buf) {
                };
                Utf16BEDecoder.prototype.end = function () {
                };
                // == UTF-16 codec =============================================================
                // Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.
                // Defaults to UTF-16LE, as it's prevalent and default in Node.
                // http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le
                // Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});
                // Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).
                exports.utf16 = Utf16Codec;
                function Utf16Codec(codecOptions, iconv) {
                }
                Utf16Codec.prototype.encoder = Utf16Encoder;
                Utf16Codec.prototype.decoder = Utf16Decoder;
                // -- Encoding (pass-through)
                function Utf16Encoder(options, codec) {
                }
                Utf16Encoder.prototype.write = function (str) {
                };
                Utf16Encoder.prototype.end = function () {
                };
                // -- Decoding
                function Utf16Decoder(options, codec) {
                }
                Utf16Decoder.prototype.write = function (buf) {
                };
                Utf16Decoder.prototype.end = function () {
                };
                function detectEncoding(buf, defaultEncoding) {
                }
            },
            {}
        ],
        66: [
            function (require, module, exports) {
                'use strict';
                // UTF-7 codec, according to https://tools.ietf.org/html/rfc2152
                // See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3
                exports.utf7 = Utf7Codec;
                exports.unicode11utf7 = 'utf7';
                // Alias UNICODE-1-1-UTF-7
                function Utf7Codec(codecOptions, iconv) {
                }
                ;
                Utf7Codec.prototype.encoder = Utf7Encoder;
                Utf7Codec.prototype.decoder = Utf7Decoder;
                Utf7Codec.prototype.bomAware = true;
                // -- Encoding
                var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;
                function Utf7Encoder(options, codec) {
                }
                Utf7Encoder.prototype.write = function (str) {
                };
                Utf7Encoder.prototype.end = function () {
                };
                // -- Decoding
                function Utf7Decoder(options, codec) {
                }
                var base64Regex = /[A-Za-z0-9\/+]/;
                var base64Chars = [];
                for (var i = 0; i < 256; i++)
                    base64Chars[i] = base64Regex.test(String.fromCharCode(i));
                var plusChar = '+'.charCodeAt(0), minusChar = '-'.charCodeAt(0), andChar = '&'.charCodeAt(0);
                Utf7Decoder.prototype.write = function (buf) {
                };
                Utf7Decoder.prototype.end = function () {
                };
                // UTF-7-IMAP codec.
                // RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)
                // Differences:
                //  * Base64 part is started by "&" instead of "+"
                //  * Direct characters are 0x20-0x7E, except "&" (0x26)
                //  * In Base64, "," is used instead of "/"
                //  * Base64 must not be used to represent direct characters.
                //  * No implicit shift back from Base64 (should always end with '-')
                //  * String must end in non-shifted position.
                //  * "-&" while in base64 is not allowed.
                exports.utf7imap = Utf7IMAPCodec;
                function Utf7IMAPCodec(codecOptions, iconv) {
                }
                ;
                Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
                Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
                Utf7IMAPCodec.prototype.bomAware = true;
                // -- Encoding
                function Utf7IMAPEncoder(options, codec) {
                }
                Utf7IMAPEncoder.prototype.write = function (str) {
                };
                Utf7IMAPEncoder.prototype.end = function () {
                };
                // -- Decoding
                function Utf7IMAPDecoder(options, codec) {
                }
                var base64IMAPChars = base64Chars.slice();
                base64IMAPChars[','.charCodeAt(0)] = true;
                Utf7IMAPDecoder.prototype.write = function (buf) {
                };
                Utf7IMAPDecoder.prototype.end = function () {
                };
            },
            {}
        ],
        67: [
            function (require, module, exports) {
                'use strict';
                var BOMChar = '\uFEFF';
                exports.PrependBOM = PrependBOMWrapper;
                function PrependBOMWrapper(encoder, options) {
                }
                PrependBOMWrapper.prototype.write = function (str) {
                };
                PrependBOMWrapper.prototype.end = function () {
                };
                //------------------------------------------------------------------------------
                exports.StripBOM = StripBOMWrapper;
                function StripBOMWrapper(decoder, options) {
                    this.decoder = decoder;
                    this.pass = false;
                    this.options = options || {};
                }
                StripBOMWrapper.prototype.write = function (buf) {
                    var res = this.decoder.write(buf);
                    if (this.pass || !res)
                        return res;
                    if (res[0] === BOMChar) {
                        res = res.slice(1);
                        if (typeof this.options.stripBOM === 'function')
                            this.options.stripBOM();
                    }
                    this.pass = true;
                    return res;
                };
                StripBOMWrapper.prototype.end = function () {
                    return this.decoder.end();
                };
            },
            {}
        ],
        68: [
            function (require, module, exports) {
                (function (Buffer) {
                    'use strict';
                    // == Extend Node primitives to use iconv-lite =================================
                    module.exports = function (iconv) {
                        var original = undefined;
                        // Place to keep original methods.
                        // Node authors rewrote Buffer internals to make it compatible with
                        // Uint8Array and we cannot patch key functions since then.
                        iconv.supportsNodeEncodingsExtension = !(new Buffer(0) instanceof Uint8Array);
                        iconv.extendNodeEncodings = function extendNodeEncodings() {
                        };
                        // Remove iconv-lite Node primitive extensions.
                        iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {
                        };
                    };
                }.call(this, require(5).Buffer));
            },
            { '5': 5 }
        ],
        69: [
            function (require, module, exports) {
                (function (process, Buffer) {
                    'use strict';
                    var bomHandling = require(67), iconv = module.exports;
                    // All codecs and aliases are kept here, keyed by encoding name/alias.
                    // They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.
                    iconv.encodings = null;
                    // Characters emitted in case of error.
                    iconv.defaultCharUnicode = '\uFFFD';
                    iconv.defaultCharSingleByte = '?';
                    // Public API.
                    iconv.encode = function encode(str, encoding, options) {
                    };
                    iconv.decode = function decode(buf, encoding, options) {
                        if (typeof buf === 'string') {
                            if (!iconv.skipDecodeWarning) {
                                console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
                                iconv.skipDecodeWarning = true;
                            }
                            buf = new Buffer('' + (buf || ''), 'binary');    // Ensure buffer.
                        }
                        var decoder = iconv.getDecoder(encoding, options);
                        var res = decoder.write(buf);
                        var trail = decoder.end();
                        return trail ? res + trail : res;
                    };
                    iconv.encodingExists = function encodingExists(enc) {
                        try {
                            iconv.getCodec(enc);
                            return true;
                        } catch (e) {
                            return false;
                        }
                    };
                    // Legacy aliases to convert functions
                    iconv.toEncoding = iconv.encode;
                    iconv.fromEncoding = iconv.decode;
                    // Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
                    iconv._codecDataCache = {};
                    iconv.getCodec = function getCodec(encoding) {
                        if (!iconv.encodings)
                            iconv.encodings = require(60);
                        // Lazy load all encoding definitions.
                        // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
                        var enc = ('' + encoding).toLowerCase().replace(/[^0-9a-z]|:\d{4}$/g, '');
                        // Traverse iconv.encodings to find actual codec.
                        var codecOptions = {};
                        while (true) {
                            var codec = iconv._codecDataCache[enc];
                            if (codec)
                                return codec;
                            var codecDef = iconv.encodings[enc];
                            switch (typeof codecDef) {
                            case 'string':
                                // Direct alias to other encoding.
                                enc = codecDef;
                                break;
                            case 'object':
                                // Alias with options. Can be layered.
                                for (var key in codecDef)
                                    codecOptions[key] = codecDef[key];
                                if (!codecOptions.encodingName)
                                    codecOptions.encodingName = enc;
                                enc = codecDef.type;
                                break;
                            case 'function':
                                // Codec itself.
                                if (!codecOptions.encodingName)
                                    codecOptions.encodingName = enc;
                                // The codec function must load all tables and return object with .encoder and .decoder methods.
                                // It'll be called only once (for each different options object).
                                codec = new codecDef(codecOptions, iconv);
                                iconv._codecDataCache[codecOptions.encodingName] = codec;
                                // Save it to be reused later.
                                return codec;
                            default:
                                throw new Error('Encoding not recognized: \'' + encoding + '\' (searched as: \'' + enc + '\')');
                            }
                        }
                    };
                    iconv.getEncoder = function getEncoder(encoding, options) {
                    };
                    iconv.getDecoder = function getDecoder(encoding, options) {
                        var codec = iconv.getCodec(encoding), decoder = new codec.decoder(options, codec);
                        if (codec.bomAware && !(options && options.stripBOM === false))
                            decoder = new bomHandling.StripBOM(decoder, options);
                        return decoder;
                    };
                    // Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.
                    var nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;
                    if (nodeVer) {
                        // Load streaming support in Node v0.10+
                        var nodeVerArr = nodeVer.split('.').map(Number);
                        if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {
                            require(70)(iconv);
                        }
                        // Load Node primitive extensions.
                        require(68)(iconv);
                    }
                }.call(this, require(14), require(5).Buffer));
            },
            {
                '14': 14,
                '5': 5,
                '60': 60,
                '67': 67,
                '68': 68,
                '70': 70
            }
        ],
        70: [
            function (require, module, exports) {
                'use strict';
                var Transform = require(31).Transform;
                // == Exports ==================================================================
                module.exports = function (iconv) {
                    // Additional Public API.
                    iconv.encodeStream = function encodeStream(encoding, options) {
                    };
                    iconv.decodeStream = function decodeStream(encoding, options) {
                    };
                    iconv.supportsStreams = true;
                    // Not published yet.
                    iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;
                    iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;
                    iconv._collect = IconvLiteDecoderStream.prototype.collect;
                };
                // == Encoder stream =======================================================
                function IconvLiteEncoderStream(conv, options) {
                }
                IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, { constructor: { value: IconvLiteEncoderStream } });
                IconvLiteEncoderStream.prototype._transform = function (chunk, encoding, done) {
                };
                IconvLiteEncoderStream.prototype._flush = function (done) {
                };
                IconvLiteEncoderStream.prototype.collect = function (cb) {
                };
                // == Decoder stream =======================================================
                function IconvLiteDecoderStream(conv, options) {
                }
                IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, { constructor: { value: IconvLiteDecoderStream } });
                IconvLiteDecoderStream.prototype._transform = function (chunk, encoding, done) {
                };
                IconvLiteDecoderStream.prototype._flush = function (done) {
                };
                IconvLiteDecoderStream.prototype.collect = function (cb) {
                };
            },
            { '31': 31 }
        ],
        71: [
            function (require, module, exports) {
                (function (global) {
                    /*! https://mths.be/quoted-printable v0.2.1 by @mathias | MIT license */
                    ;
                    (function (root) {
                        // Detect free variables `exports`.
                        var freeExports = typeof exports == 'object' && exports;
                        // Detect free variable `module`.
                        var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;
                        // Detect free variable `global`, from Node.js or Browserified code, and use
                        // it as `root`.
                        var freeGlobal = typeof global == 'object' && global;
                        if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
                            root = freeGlobal;
                        }
                        /*--------------------------------------------------------------------------*/
                        var stringFromCharCode = String.fromCharCode;
                        var decode = function (input) {
                            return input    // https://tools.ietf.org/html/rfc2045#section-6.7, rule 3:
                                     // “Therefore, when decoding a `Quoted-Printable` body, any trailing white
                                     // space on a line must be deleted, as it will necessarily have been added
                                     // by intermediate transport agents.”
.replace(/[\t\x20]$/gm, '')    // Remove hard line breaks preceded by `=`. Proper `Quoted-Printable`-
                               // encoded data only contains CRLF line  endings, but for compatibility
                               // reasons we support separate CR and LF too.
.replace(/=(?:\r\n?|\n|$)/g, '')    // Decode escape sequences of the form `=XX` where `XX` is any
                                    // combination of two hexidecimal digits. For optimal compatibility,
                                    // lowercase hexadecimal digits are supported as well. See
                                    // https://tools.ietf.org/html/rfc2045#section-6.7, note 1.
.replace(/=([a-fA-F0-9]{2})/g, function ($0, $1) {
                                var codePoint = parseInt($1, 16);
                                return stringFromCharCode(codePoint);
                            });
                        };
                        var handleTrailingCharacters = function (string) {
                        };
                        var regexUnsafeSymbols = /[\0-\b\n-\x1F=\x7F-\uD7FF\uDC00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF]/g;
                        var encode = function (string) {
                        };
                        var quotedPrintable = {
                            'encode': encode,
                            'decode': decode,
                            'version': '0.2.1'
                        };
                        // Some AMD build optimizers, like r.js, check for specific condition patterns
                        // like the following:
                        if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
                            define(function () {
                            });
                        } else if (freeExports && !freeExports.nodeType) {
                            if (freeModule) {
                                // in Node.js or RingoJS v0.8.0+
                                freeModule.exports = quotedPrintable;
                            } else {
                                // in Narwhal or RingoJS v0.7.0-
                                for (var key in quotedPrintable) {
                                    quotedPrintable.hasOwnProperty(key) && (freeExports[key] = quotedPrintable[key]);
                                }
                            }
                        } else {
                            // in Rhino or a web browser
                            root.quotedPrintable = quotedPrintable;
                        }
                    }(this));
                }.call(this, typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}));
            },
            {}
        ],
        72: [
            function (require, module, exports) {
                /*jshint regexp:false*/
                /*global unescape*/
                var isUtf8RegExp = /^utf-?8$/i, isLatin1RegExp = /^(?:iso-8859-1|latin1)$/i, iconvLite = require(74), rfc2047 = module.exports = {};
                function stringify(obj) {
                }
                var iconv;
                try {
                    iconv = require('' + 'iconv');    // Prevent browserify from detecting iconv and failing
                } catch (e) {
                }
                function decodeBuffer(encodedText, encoding) {
                }
                // Returns either a string (if successful) or undefined
                function decodeEncodedWord(encodedText, encoding, charset) {
                }
                var encodedWordRegExp = /\=\?([^\?]+)\?([QB])\?([^\?]*)\?=/gi;
                rfc2047.decode = function (text) {
                };
                // Fast encoder for quoted-printable data in the "encoded-text" part of encoded words.
                // This scenario differs from regular quoted-printable (as used in e.g. email bodies)
                // in that the space character is represented by underscore, and fewer ASCII are
                // allowed (see rfc 2047, section 2).
                // Initialize array used as lookup table (int (octet) => string)
                var qpTokenByOctet = new Array(256), i;
                for (i = 0; i < 256; i += 1) {
                    qpTokenByOctet[i] = '=' + (i < 16 ? '0' : '') + i.toString(16).toUpperCase();
                }
                '!#$%&\'*+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\^_`abcdefghijklmnopqrstuvwxyz{|}~'.split(/(?:)/).forEach(function (encodedWordSafeAsciiChar) {
                    qpTokenByOctet[encodedWordSafeAsciiChar.charCodeAt(0)] = encodedWordSafeAsciiChar;
                });
                qpTokenByOctet[32] = '_';
                function bufferToQuotedPrintableString(buffer) {
                }
                // Build a regexp for determining whether (part of) a token has to be encoded:
                var headerSafeAsciiChars = ' !"#$%&\'()*+-,-./0123456789:;<=>@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~', headerUnsafeAsciiChars = '';
                for (i = 0; i < 128; i += 1) {
                    var ch = String.fromCharCode(i);
                    if (headerSafeAsciiChars.indexOf(ch) === -1) {
                        // O(n^2) but only happens at startup
                        headerUnsafeAsciiChars += ch;
                    }
                }
                function quoteCharacterClass(chars) {
                    return chars.replace(/[\\\|\^\*\+\?\[\]\(\)\-\.]/g, '\\$&');
                }
                var unsafeTokenRegExp = new RegExp('[\x80-\uFFFF' + quoteCharacterClass(headerUnsafeAsciiChars) + ']'), maxNumCharsPerEncodedWord = 8;
                // Very conservative limit to prevent creating an encoded word of more than 72 ascii chars
                rfc2047.encode = function (text) {
                };
            },
            { '74': 74 }
        ],
        73: [
            function (require, module, exports) {
                // == Extend Node primitives to use iconv-lite =================================
                module.exports = function (iconv) {
                    var original = undefined;
                    // Place to keep original methods.
                    iconv.extendNodeEncodings = function extendNodeEncodings() {
                    };
                    // Remove iconv-lite Node primitive extensions.
                    iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {
                    };
                };
            },
            {}
        ],
        74: [
            function (require, module, exports) {
                (function (process) {
                    var iconv = module.exports;
                    // All codecs and aliases are kept here, keyed by encoding name/alias.
                    // They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.
                    iconv.encodings = null;
                    // Characters emitted in case of error.
                    iconv.defaultCharUnicode = '\uFFFD';
                    iconv.defaultCharSingleByte = '?';
                    // Public API.
                    iconv.encode = function encode(str, encoding, options) {
                    };
                    iconv.decode = function decode(buf, encoding, options) {
                    };
                    iconv.encodingExists = function encodingExists(enc) {
                    };
                    // Legacy aliases to convert functions
                    iconv.toEncoding = iconv.encode;
                    iconv.fromEncoding = iconv.decode;
                    // Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
                    iconv._codecDataCache = {};
                    iconv.getCodec = function getCodec(encoding) {
                    };
                    // Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.
                    var nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;
                    if (nodeVer) {
                        // Load streaming support in Node v0.10+
                        var nodeVerArr = nodeVer.split('.').map(Number);
                        if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {
                            require(75)(iconv);
                        }
                        // Load Node primitive extensions.
                        require(73)(iconv);
                    }
                }.call(this, require(14)));
            },
            {
                '14': 14,
                '73': 73,
                '75': 75
            }
        ],
        75: [
            function (require, module, exports) {
                var Transform = require(31).Transform;
                // == Exports ==================================================================
                module.exports = function (iconv) {
                    // Additional Public API.
                    iconv.encodeStream = function encodeStream(encoding, options) {
                    };
                    iconv.decodeStream = function decodeStream(encoding, options) {
                    };
                    iconv.supportsStreams = true;
                    // Not published yet.
                    iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;
                    iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;
                    iconv._collect = IconvLiteDecoderStream.prototype.collect;
                };
                // == Encoder stream =======================================================
                function IconvLiteEncoderStream(conv, options) {
                }
                IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, { constructor: { value: IconvLiteEncoderStream } });
                IconvLiteEncoderStream.prototype._transform = function (chunk, encoding, done) {
                };
                IconvLiteEncoderStream.prototype._flush = function (done) {
                };
                IconvLiteEncoderStream.prototype.collect = function (cb) {
                };
                // == Decoder stream =======================================================
                function IconvLiteDecoderStream(conv, options) {
                }
                IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, { constructor: { value: IconvLiteDecoderStream } });
                IconvLiteDecoderStream.prototype._transform = function (chunk, encoding, done) {
                };
                IconvLiteDecoderStream.prototype._flush = function (done) {
                };
                IconvLiteDecoderStream.prototype.collect = function (cb) {
                };
            },
            { '31': 31 }
        ],
        76: [
            function (require, module, exports) {
                /*global unescape*/
                var isUtf8RegExp = /^utf-?8$/i, isLatin1RegExp = /^(?:iso-8859-1|latin1)$/i, canBeLatin1EncodedRegExp = /^[\u0000-\u00ff]*$/, iconvLite = require(78), rfc2231 = module.exports = {};
                var iconv;
                try {
                    iconv = require('' + 'iconv');    // Prevent browserify from detecting iconv and failing
                } catch (e) {
                }
                function decodeUnfoldedParameter(text) {
                }
                rfc2231.unfoldAndDecodeParameters = function (encodedParameters) {
                };
                // We want to percent-encode all everything that'd require a fragment to be enclosed in double quotes:
                // Allowed in output: <any (US-ASCII) CHAR except SPACE, CTLs (\u0000-\u001f\u007f), "*", "'", "%", or tspecials>
                var unsafeParameterValueRegExp = /[\u0000-\u001f \u007f*'%\u0080-\uffff]/;
                function quoteParameterIfNecessary(value) {
                }
                rfc2231.encodeAndFoldParameters = function (decodedParameters, maxFragmentLength, forceUtf8) {
                };
            },
            { '78': 78 }
        ],
        77: [
            function (require, module, exports) {
                arguments[4][73][0].apply(exports, arguments);
            },
            { '73': 73 }
        ],
        78: [
            function (require, module, exports) {
                arguments[4][74][0].apply(exports, arguments);
            },
            {
                '14': 14,
                '74': 74,
                '77': 77,
                '79': 79
            }
        ],
        79: [
            function (require, module, exports) {
                arguments[4][75][0].apply(exports, arguments);
            },
            {
                '31': 31,
                '75': 75
            }
        ],
        80: [
            function (require, module, exports) {
                //     Underscore.js 1.7.0
                //     http://underscorejs.org
                //     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
                //     Underscore may be freely distributed under the MIT license.
                (function () {
                    // Baseline setup
                    // --------------
                    // Establish the root object, `window` in the browser, or `exports` on the server.
                    var root = this;
                    // Save the previous value of the `_` variable.
                    var previousUnderscore = root._;
                    // Save bytes in the minified (but not gzipped) version:
                    var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
                    // Create quick reference variables for speed access to core prototypes.
                    var push = ArrayProto.push, slice = ArrayProto.slice, concat = ArrayProto.concat, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
                    // All **ECMAScript 5** native function implementations that we hope to use
                    // are declared here.
                    var nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
                    // Create a safe reference to the Underscore object for use below.
                    var _ = function (obj) {
                    };
                    // Export the Underscore object for **Node.js**, with
                    // backwards-compatibility for the old `require()` API. If we're in
                    // the browser, add `_` as a global object.
                    if (typeof exports !== 'undefined') {
                        if (typeof module !== 'undefined' && module.exports) {
                            exports = module.exports = _;
                        }
                        exports._ = _;
                    } else {
                        root._ = _;
                    }
                    // Current version.
                    _.VERSION = '1.7.0';
                    // Internal function that returns an efficient (for current engines) version
                    // of the passed-in callback, to be repeatedly applied in other Underscore
                    // functions.
                    var createCallback = function (func, context, argCount) {
                        if (context === void 0)
                            return func;
                        switch (argCount == null ? 3 : argCount) {
                        case 1:
                            return function (value) {
                            };
                        case 2:
                            return function (value, other) {
                            };
                        case 3:
                            return function (value, index, collection) {
                            };
                        case 4:
                            return function (accumulator, value, index, collection) {
                            };
                        }
                        return function () {
                        };
                    };
                    // A mostly-internal function to generate callbacks that can be applied
                    // to each element in a collection, returning the desired result — either
                    // identity, an arbitrary callback, a property matcher, or a property accessor.
                    _.iteratee = function (value, context, argCount) {
                        if (value == null)
                            return _.identity;
                        if (_.isFunction(value))
                            return createCallback(value, context, argCount);
                        if (_.isObject(value))
                            return _.matches(value);
                        return _.property(value);
                    };
                    // Collection Functions
                    // --------------------
                    // The cornerstone, an `each` implementation, aka `forEach`.
                    // Handles raw objects in addition to array-likes. Treats all
                    // sparse array-likes as if they were dense.
                    _.each = _.forEach = function (obj, iteratee, context) {
                        if (obj == null)
                            return obj;
                        iteratee = createCallback(iteratee, context);
                        var i, length = obj.length;
                        if (length === +length) {
                            for (i = 0; i < length; i++) {
                                iteratee(obj[i], i, obj);
                            }
                        } else {
                            var keys = _.keys(obj);
                            for (i = 0, length = keys.length; i < length; i++) {
                                iteratee(obj[keys[i]], keys[i], obj);
                            }
                        }
                        return obj;
                    };
                    // Return the results of applying the iteratee to each element.
                    _.map = _.collect = function (obj, iteratee, context) {
                        if (obj == null)
                            return [];
                        iteratee = _.iteratee(iteratee, context);
                        var keys = obj.length !== +obj.length && _.keys(obj), length = (keys || obj).length, results = Array(length), currentKey;
                        for (var index = 0; index < length; index++) {
                            currentKey = keys ? keys[index] : index;
                            results[index] = iteratee(obj[currentKey], currentKey, obj);
                        }
                        return results;
                    };
                    var reduceError = 'Reduce of empty array with no initial value';
                    // **Reduce** builds up a single result from a list of values, aka `inject`,
                    // or `foldl`.
                    _.reduce = _.foldl = _.inject = function (obj, iteratee, memo, context) {
                    };
                    // The right-associative version of reduce, also known as `foldr`.
                    _.reduceRight = _.foldr = function (obj, iteratee, memo, context) {
                    };
                    // Return the first value which passes a truth test. Aliased as `detect`.
                    _.find = _.detect = function (obj, predicate, context) {
                    };
                    // Return all the elements that pass a truth test.
                    // Aliased as `select`.
                    _.filter = _.select = function (obj, predicate, context) {
                    };
                    // Return all the elements for which a truth test fails.
                    _.reject = function (obj, predicate, context) {
                    };
                    // Determine whether all of the elements match a truth test.
                    // Aliased as `all`.
                    _.every = _.all = function (obj, predicate, context) {
                    };
                    // Determine if at least one element in the object matches a truth test.
                    // Aliased as `any`.
                    _.some = _.any = function (obj, predicate, context) {
                    };
                    // Determine if the array or object contains a given value (using `===`).
                    // Aliased as `include`.
                    _.contains = _.include = function (obj, target) {
                        if (obj == null)
                            return false;
                        if (obj.length !== +obj.length)
                            obj = _.values(obj);
                        return _.indexOf(obj, target) >= 0;
                    };
                    // Invoke a method (with arguments) on every item in a collection.
                    _.invoke = function (obj, method) {
                    };
                    // Convenience version of a common use case of `map`: fetching a property.
                    _.pluck = function (obj, key) {
                    };
                    // Convenience version of a common use case of `filter`: selecting only objects
                    // containing specific `key:value` pairs.
                    _.where = function (obj, attrs) {
                    };
                    // Convenience version of a common use case of `find`: getting the first object
                    // containing specific `key:value` pairs.
                    _.findWhere = function (obj, attrs) {
                    };
                    // Return the maximum element (or element-based computation).
                    _.max = function (obj, iteratee, context) {
                    };
                    // Return the minimum element (or element-based computation).
                    _.min = function (obj, iteratee, context) {
                    };
                    // Shuffle a collection, using the modern version of the
                    // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
                    _.shuffle = function (obj) {
                    };
                    // Sample **n** random values from a collection.
                    // If **n** is not specified, returns a single random element.
                    // The internal `guard` argument allows it to work with `map`.
                    _.sample = function (obj, n, guard) {
                    };
                    // Sort the object's values by a criterion produced by an iteratee.
                    _.sortBy = function (obj, iteratee, context) {
                    };
                    // An internal function used for aggregate "group by" operations.
                    var group = function (behavior) {
                        return function (obj, iteratee, context) {
                        };
                    };
                    // Groups the object's values by a criterion. Pass either a string attribute
                    // to group by, or a function that returns the criterion.
                    _.groupBy = group(function (result, value, key) {
                    });
                    // Indexes the object's values by a criterion, similar to `groupBy`, but for
                    // when you know that your index values will be unique.
                    _.indexBy = group(function (result, value, key) {
                    });
                    // Counts instances of an object that group by a certain criterion. Pass
                    // either a string attribute to count by, or a function that returns the
                    // criterion.
                    _.countBy = group(function (result, value, key) {
                    });
                    // Use a comparator function to figure out the smallest index at which
                    // an object should be inserted so as to maintain order. Uses binary search.
                    _.sortedIndex = function (array, obj, iteratee, context) {
                    };
                    // Safely create a real, live array from anything iterable.
                    _.toArray = function (obj) {
                    };
                    // Return the number of elements in an object.
                    _.size = function (obj) {
                    };
                    // Split a collection into two arrays: one whose elements all satisfy the given
                    // predicate, and one whose elements all do not satisfy the predicate.
                    _.partition = function (obj, predicate, context) {
                    };
                    // Array Functions
                    // ---------------
                    // Get the first element of an array. Passing **n** will return the first N
                    // values in the array. Aliased as `head` and `take`. The **guard** check
                    // allows it to work with `_.map`.
                    _.first = _.head = _.take = function (array, n, guard) {
                    };
                    // Returns everything but the last entry of the array. Especially useful on
                    // the arguments object. Passing **n** will return all the values in
                    // the array, excluding the last N. The **guard** check allows it to work with
                    // `_.map`.
                    _.initial = function (array, n, guard) {
                    };
                    // Get the last element of an array. Passing **n** will return the last N
                    // values in the array. The **guard** check allows it to work with `_.map`.
                    _.last = function (array, n, guard) {
                    };
                    // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
                    // Especially useful on the arguments object. Passing an **n** will return
                    // the rest N values in the array. The **guard**
                    // check allows it to work with `_.map`.
                    _.rest = _.tail = _.drop = function (array, n, guard) {
                    };
                    // Trim out all falsy values from an array.
                    _.compact = function (array) {
                    };
                    // Internal implementation of a recursive `flatten` function.
                    var flatten = function (input, shallow, strict, output) {
                    };
                    // Flatten out an array, either recursively (by default), or just one level.
                    _.flatten = function (array, shallow) {
                    };
                    // Return a version of the array that does not contain the specified value(s).
                    _.without = function (array) {
                    };
                    // Produce a duplicate-free version of the array. If the array has already
                    // been sorted, you have the option of using a faster algorithm.
                    // Aliased as `unique`.
                    _.uniq = _.unique = function (array, isSorted, iteratee, context) {
                    };
                    // Produce an array that contains the union: each distinct element from all of
                    // the passed-in arrays.
                    _.union = function () {
                    };
                    // Produce an array that contains every item shared between all the
                    // passed-in arrays.
                    _.intersection = function (array) {
                    };
                    // Take the difference between one array and a number of other arrays.
                    // Only the elements present in just the first array will remain.
                    _.difference = function (array) {
                    };
                    // Zip together multiple lists into a single array -- elements that share
                    // an index go together.
                    _.zip = function (array) {
                    };
                    // Converts lists into objects. Pass either a single array of `[key, value]`
                    // pairs, or two parallel arrays of the same length -- one of keys, and one of
                    // the corresponding values.
                    _.object = function (list, values) {
                    };
                    // Return the position of the first occurrence of an item in an array,
                    // or -1 if the item is not included in the array.
                    // If the array is large and already in sort order, pass `true`
                    // for **isSorted** to use binary search.
                    _.indexOf = function (array, item, isSorted) {
                        if (array == null)
                            return -1;
                        var i = 0, length = array.length;
                        if (isSorted) {
                            if (typeof isSorted == 'number') {
                                i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
                            } else {
                                i = _.sortedIndex(array, item);
                                return array[i] === item ? i : -1;
                            }
                        }
                        for (; i < length; i++)
                            if (array[i] === item)
                                return i;
                        return -1;
                    };
                    _.lastIndexOf = function (array, item, from) {
                    };
                    // Generate an integer Array containing an arithmetic progression. A port of
                    // the native Python `range()` function. See
                    // [the Python documentation](http://docs.python.org/library/functions.html#range).
                    _.range = function (start, stop, step) {
                    };
                    // Function (ahem) Functions
                    // ------------------
                    // Reusable constructor function for prototype setting.
                    var Ctor = function () {
                    };
                    // Create a function bound to a given object (assigning `this`, and arguments,
                    // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
                    // available.
                    _.bind = function (func, context) {
                    };
                    // Partially apply a function by creating a version that has had some of its
                    // arguments pre-filled, without changing its dynamic `this` context. _ acts
                    // as a placeholder, allowing any combination of arguments to be pre-filled.
                    _.partial = function (func) {
                        var boundArgs = slice.call(arguments, 1);
                        return function () {
                        };
                    };
                    // Bind a number of an object's methods to that object. Remaining arguments
                    // are the method names to be bound. Useful for ensuring that all callbacks
                    // defined on an object belong to it.
                    _.bindAll = function (obj) {
                    };
                    // Memoize an expensive function by storing its results.
                    _.memoize = function (func, hasher) {
                    };
                    // Delays a function for the given number of milliseconds, and then calls
                    // it with the arguments supplied.
                    _.delay = function (func, wait) {
                    };
                    // Defers a function, scheduling it to run after the current call stack has
                    // cleared.
                    _.defer = function (func) {
                    };
                    // Returns a function, that, when invoked, will only be triggered at most once
                    // during a given window of time. Normally, the throttled function will run
                    // as much as it can, without ever going more than once per `wait` duration;
                    // but if you'd like to disable the execution on the leading edge, pass
                    // `{leading: false}`. To disable execution on the trailing edge, ditto.
                    _.throttle = function (func, wait, options) {
                    };
                    // Returns a function, that, as long as it continues to be invoked, will not
                    // be triggered. The function will be called after it stops being called for
                    // N milliseconds. If `immediate` is passed, trigger the function on the
                    // leading edge, instead of the trailing.
                    _.debounce = function (func, wait, immediate) {
                    };
                    // Returns the first function passed as an argument to the second,
                    // allowing you to adjust arguments, run code before and after, and
                    // conditionally execute the original function.
                    _.wrap = function (func, wrapper) {
                    };
                    // Returns a negated version of the passed-in predicate.
                    _.negate = function (predicate) {
                    };
                    // Returns a function that is the composition of a list of functions, each
                    // consuming the return value of the function that follows.
                    _.compose = function () {
                    };
                    // Returns a function that will only be executed after being called N times.
                    _.after = function (times, func) {
                    };
                    // Returns a function that will only be executed before being called N times.
                    _.before = function (times, func) {
                    };
                    // Returns a function that will be executed at most one time, no matter how
                    // often you call it. Useful for lazy initialization.
                    _.once = _.partial(_.before, 2);
                    // Object Functions
                    // ----------------
                    // Retrieve the names of an object's properties.
                    // Delegates to **ECMAScript 5**'s native `Object.keys`
                    _.keys = function (obj) {
                        if (!_.isObject(obj))
                            return [];
                        if (nativeKeys)
                            return nativeKeys(obj);
                        var keys = [];
                        for (var key in obj)
                            if (_.has(obj, key))
                                keys.push(key);
                        return keys;
                    };
                    // Retrieve the values of an object's properties.
                    _.values = function (obj) {
                    };
                    // Convert an object into a list of `[key, value]` pairs.
                    _.pairs = function (obj) {
                    };
                    // Invert the keys and values of an object. The values must be serializable.
                    _.invert = function (obj) {
                        var result = {};
                        var keys = _.keys(obj);
                        for (var i = 0, length = keys.length; i < length; i++) {
                            result[obj[keys[i]]] = keys[i];
                        }
                        return result;
                    };
                    // Return a sorted list of the function names available on the object.
                    // Aliased as `methods`
                    _.functions = _.methods = function (obj) {
                        var names = [];
                        for (var key in obj) {
                            if (_.isFunction(obj[key]))
                                names.push(key);
                        }
                        return names.sort();
                    };
                    // Extend a given object with all the properties in passed-in object(s).
                    _.extend = function (obj) {
                        if (!_.isObject(obj))
                            return obj;
                        var source, prop;
                        for (var i = 1, length = arguments.length; i < length; i++) {
                            source = arguments[i];
                            for (prop in source) {
                                if (hasOwnProperty.call(source, prop)) {
                                    obj[prop] = source[prop];
                                }
                            }
                        }
                        return obj;
                    };
                    // Return a copy of the object only containing the whitelisted properties.
                    _.pick = function (obj, iteratee, context) {
                        var result = {}, key;
                        if (obj == null)
                            return result;
                        if (_.isFunction(iteratee)) {
                            iteratee = createCallback(iteratee, context);
                            for (key in obj) {
                                var value = obj[key];
                                if (iteratee(value, key, obj))
                                    result[key] = value;
                            }
                        } else {
                            var keys = concat.apply([], slice.call(arguments, 1));
                            obj = new Object(obj);
                            for (var i = 0, length = keys.length; i < length; i++) {
                                key = keys[i];
                                if (key in obj)
                                    result[key] = obj[key];
                            }
                        }
                        return result;
                    };
                    // Return a copy of the object without the blacklisted properties.
                    _.omit = function (obj, iteratee, context) {
                        if (_.isFunction(iteratee)) {
                            iteratee = _.negate(iteratee);
                        } else {
                            var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);
                            iteratee = function (value, key) {
                                return !_.contains(keys, key);
                            };
                        }
                        return _.pick(obj, iteratee, context);
                    };
                    // Fill in a given object with default properties.
                    _.defaults = function (obj) {
                        if (!_.isObject(obj))
                            return obj;
                        for (var i = 1, length = arguments.length; i < length; i++) {
                            var source = arguments[i];
                            for (var prop in source) {
                                if (obj[prop] === void 0)
                                    obj[prop] = source[prop];
                            }
                        }
                        return obj;
                    };
                    // Create a (shallow-cloned) duplicate of an object.
                    _.clone = function (obj) {
                    };
                    // Invokes interceptor with the obj, and then returns obj.
                    // The primary purpose of this method is to "tap into" a method chain, in
                    // order to perform operations on intermediate results within the chain.
                    _.tap = function (obj, interceptor) {
                    };
                    // Internal recursive comparison function for `isEqual`.
                    var eq = function (a, b, aStack, bStack) {
                    };
                    // Perform a deep comparison to check if two objects are equal.
                    _.isEqual = function (a, b) {
                    };
                    // Is a given array, string, or object empty?
                    // An "empty" object has no enumerable own-properties.
                    _.isEmpty = function (obj) {
                    };
                    // Is a given value a DOM element?
                    _.isElement = function (obj) {
                    };
                    // Is a given value an array?
                    // Delegates to ECMA5's native Array.isArray
                    _.isArray = nativeIsArray || function (obj) {
                    };
                    // Is a given variable an object?
                    _.isObject = function (obj) {
                        var type = typeof obj;
                        return type === 'function' || type === 'object' && !!obj;
                    };
                    // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
                    _.each([
                        'Arguments',
                        'Function',
                        'String',
                        'Number',
                        'Date',
                        'RegExp'
                    ], function (name) {
                        _['is' + name] = function (obj) {
                            return toString.call(obj) === '[object ' + name + ']';
                        };
                    });
                    // Define a fallback version of the method in browsers (ahem, IE), where
                    // there isn't any inspectable "Arguments" type.
                    if (!_.isArguments(arguments)) {
                        _.isArguments = function (obj) {
                        };
                    }
                    // Optimize `isFunction` if appropriate. Work around an IE 11 bug.
                    if (typeof /./ !== 'function') {
                        _.isFunction = function (obj) {
                            return typeof obj == 'function' || false;
                        };
                    }
                    // Is a given object a finite number?
                    _.isFinite = function (obj) {
                    };
                    // Is the given value `NaN`? (NaN is the only number which does not equal itself).
                    _.isNaN = function (obj) {
                    };
                    // Is a given value a boolean?
                    _.isBoolean = function (obj) {
                    };
                    // Is a given value equal to null?
                    _.isNull = function (obj) {
                    };
                    // Is a given variable undefined?
                    _.isUndefined = function (obj) {
                    };
                    // Shortcut function for checking if an object has a given property directly
                    // on itself (in other words, not on a prototype).
                    _.has = function (obj, key) {
                    };
                    // Utility Functions
                    // -----------------
                    // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
                    // previous owner. Returns a reference to the Underscore object.
                    _.noConflict = function () {
                    };
                    // Keep the identity function around for default iteratees.
                    _.identity = function (value) {
                    };
                    _.constant = function (value) {
                    };
                    _.noop = function () {
                    };
                    _.property = function (key) {
                    };
                    // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
                    _.matches = function (attrs) {
                    };
                    // Run a function **n** times.
                    _.times = function (n, iteratee, context) {
                    };
                    // Return a random integer between min and max (inclusive).
                    _.random = function (min, max) {
                    };
                    // A (possibly faster) way to get the current timestamp as an integer.
                    _.now = Date.now || function () {
                    };
                    // List of HTML entities for escaping.
                    var escapeMap = {
                        '&': '&amp;',
                        '<': '&lt;',
                        '>': '&gt;',
                        '"': '&quot;',
                        '\'': '&#x27;',
                        '`': '&#x60;'
                    };
                    var unescapeMap = _.invert(escapeMap);
                    // Functions for escaping and unescaping strings to/from HTML interpolation.
                    var createEscaper = function (map) {
                        var escaper = function (match) {
                        };
                        // Regexes for identifying a key that needs to be escaped
                        var source = '(?:' + _.keys(map).join('|') + ')';
                        var testRegexp = RegExp(source);
                        var replaceRegexp = RegExp(source, 'g');
                        return function (string) {
                        };
                    };
                    _.escape = createEscaper(escapeMap);
                    _.unescape = createEscaper(unescapeMap);
                    // If the value of the named `property` is a function then invoke it with the
                    // `object` as context; otherwise, return it.
                    _.result = function (object, property) {
                    };
                    // Generate a unique integer id (unique within the entire client session).
                    // Useful for temporary DOM ids.
                    var idCounter = 0;
                    _.uniqueId = function (prefix) {
                    };
                    // By default, Underscore uses ERB-style template delimiters, change the
                    // following template settings to use alternative delimiters.
                    _.templateSettings = {
                        evaluate: /<%([\s\S]+?)%>/g,
                        interpolate: /<%=([\s\S]+?)%>/g,
                        escape: /<%-([\s\S]+?)%>/g
                    };
                    // When customizing `templateSettings`, if you don't want to define an
                    // interpolation, evaluation or escaping regex, we need one that is
                    // guaranteed not to match.
                    var noMatch = /(.)^/;
                    // Certain characters need to be escaped so that they can be put into a
                    // string literal.
                    var escapes = {
                        '\'': '\'',
                        '\\': '\\',
                        '\r': 'r',
                        '\n': 'n',
                        '\u2028': 'u2028',
                        '\u2029': 'u2029'
                    };
                    var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
                    var escapeChar = function (match) {
                    };
                    // JavaScript micro-templating, similar to John Resig's implementation.
                    // Underscore templating handles arbitrary delimiters, preserves whitespace,
                    // and correctly escapes quotes within interpolated code.
                    // NB: `oldSettings` only exists for backwards compatibility.
                    _.template = function (text, settings, oldSettings) {
                    };
                    // Add a "chain" function. Start chaining a wrapped Underscore object.
                    _.chain = function (obj) {
                    };
                    // OOP
                    // ---------------
                    // If Underscore is called as a function, it returns a wrapped object that
                    // can be used OO-style. This wrapper holds altered versions of all the
                    // underscore functions. Wrapped objects may be chained.
                    // Helper function to continue chaining intermediate results.
                    var result = function (obj) {
                    };
                    // Add your own custom functions to the Underscore object.
                    _.mixin = function (obj) {
                        _.each(_.functions(obj), function (name) {
                            var func = _[name] = obj[name];
                            _.prototype[name] = function () {
                            };
                        });
                    };
                    // Add all of the Underscore functions to the wrapper object.
                    _.mixin(_);
                    // Add all mutator Array functions to the wrapper.
                    _.each([
                        'pop',
                        'push',
                        'reverse',
                        'shift',
                        'sort',
                        'splice',
                        'unshift'
                    ], function (name) {
                        var method = ArrayProto[name];
                        _.prototype[name] = function () {
                        };
                    });
                    // Add all accessor Array functions to the wrapper.
                    _.each([
                        'concat',
                        'join',
                        'slice'
                    ], function (name) {
                        var method = ArrayProto[name];
                        _.prototype[name] = function () {
                        };
                    });
                    // Extracts the result from a wrapped and chained object.
                    _.prototype.value = function () {
                    };
                    // AMD registration happens at the end for compatibility with AMD loaders
                    // that may not enforce next-turn semantics on modules. Even though general
                    // practice for AMD registration is to be anonymous, underscore registers
                    // as a named module because, like jQuery, it is a base library that is
                    // popular enough to be bundled in a third party lib, but not be part of
                    // an AMD load request. Those cases could generate an error when an
                    // anonymous define() is called outside of a loader request.
                    if (typeof define === 'function' && define.amd) {
                        define('underscore', [], function () {
                        });
                    }
                }.call(this));
            },
            {}
        ],
        81: [
            function (require, module, exports) {
                module.exports = {
                    'name': 'unexpected-messy',
                    'version': '6.1.2',
                    'description': 'Unexpected plugin for the messy library',
                    'main': 'lib/unexpectedMessy.js',
                    'directories': { 'test': 'test' },
                    'scripts': {
                        'lint': 'eslint .',
                        'test': 'mocha && mocha documentation',
                        'prepublish': 'browserify -p bundle-collapser/plugin -e lib/unexpectedMessy -s unexpectedMessy > unexpectedMessy.min.js',
                        'travis': 'npm test && npm run coverage && (<coverage/lcov.info coveralls || true) && npm run generate-site',
                        'coverage': 'NODE_ENV=development istanbul cover --report text --report lcov _mocha -- --reporter dot && echo google-chrome coverage/lcov-report/index.html',
                        'generate-site': 'generate-site --require ./bootstrap-unexpected-markdown.js',
                        'update-examples': 'generate-site --require ./bootstrap-unexpected-markdown.js --update-examples',
                        'deploy-site': 'deploy-site.sh'
                    },
                    'repository': {
                        'type': 'git',
                        'url': 'git://github.com/unexpectedjs/unexpected-messy.git'
                    },
                    'keywords': [
                        'HTTP',
                        'request',
                        'response',
                        'assertion',
                        'unexpected',
                        'test',
                        'mocha'
                    ],
                    'author': 'Andreas Lind <andreas@one.com>',
                    'license': 'BSD-3-Clause',
                    'bugs': { 'url': 'https://github.com/unexpectedjs/unexpected-messy/issues' },
                    'homepage': 'https://github.com/unexpectedjs/unexpected-messy',
                    'peerDependencies': {
                        'messy': '^6.7.1',
                        'magicpen-media': '^1.5.0',
                        'unexpected': '^10.10.0'
                    },
                    'devDependencies': {
                        'browserify': '11.0.1',
                        'bundle-collapser': '1.2.1',
                        'coveralls': '2.11.1',
                        'eslint': '2.7.0',
                        'eslint-config-onelint': '1.0.2',
                        'istanbul': '0.3.17',
                        'mocha': '2.2.5',
                        'unexpected': '10.10.5',
                        'unexpected-documentation-site-generator': '^4.0.0',
                        'unexpected-markdown': '^1.3.4'
                    },
                    'dependencies': {
                        'magicpen-media': '^1.5.0',
                        'messy': '^6.7.1',
                        'minimist': '1.1.1',
                        'underscore': '1.7.0'
                    }
                };
            },
            {}
        ]
    }, {}, [2])(2);
}));