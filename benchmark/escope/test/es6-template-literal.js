'use strict';

var _chai = require('chai');

var _esprima = require('../third_party/esprima');

var _ = require('..');

describe('ES6 template literal', function () {
    it('refer variables', function () {
        var ast = (0, _esprima.parse)('\n            (function () {\n                let i, j, k;\n                function testing() { }\n                let template = testing`testing ${i} and ${j}`\n                return template;\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(3);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(0);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.block.type).to.be.equal('FunctionExpression');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(6);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('i');
        (0, _chai.expect)(scope.variables[2].name).to.be.equal('j');
        (0, _chai.expect)(scope.variables[3].name).to.be.equal('k');
        (0, _chai.expect)(scope.variables[4].name).to.be.equal('testing');
        (0, _chai.expect)(scope.variables[5].name).to.be.equal('template');
        (0, _chai.expect)(scope.references).to.have.length(5);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('template');
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('testing');
        (0, _chai.expect)(scope.references[2].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[3].identifier.name).to.be.equal('j');
        (0, _chai.expect)(scope.references[4].identifier.name).to.be.equal('template');
    });
});

// vim: set sw=4 ts=4 et tw=80 :
// -*- coding: utf-8 -*-
//  Copyright (C) 2014 Yusuke Suzuki <utatane.tea@gmail.com>
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzNi10ZW1wbGF0ZS1saXRlcmFsLmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiaXQiLCJhc3QiLCJzY29wZU1hbmFnZXIiLCJlY21hVmVyc2lvbiIsInNjb3BlcyIsInRvIiwiaGF2ZSIsImxlbmd0aCIsInNjb3BlIiwidHlwZSIsImJlIiwiZXF1YWwiLCJibG9jayIsImlzU3RyaWN0IiwiZmFsc2UiLCJ2YXJpYWJsZXMiLCJuYW1lIiwicmVmZXJlbmNlcyIsImlkZW50aWZpZXIiXSwibWFwcGluZ3MiOiI7O0FBdUJBOztBQUNBOztBQUNBOztBQUVBQSxTQUFTLHNCQUFULEVBQWlDLFlBQVc7QUFDeENDLE9BQUcsaUJBQUgsRUFBc0IsWUFBVztBQUM3QixZQUFNQyxNQUFNLHVQQUFaOztBQVNBLFlBQU1DLGVBQWUsZUFBUUQsR0FBUixFQUFhLEVBQUNFLGFBQWEsQ0FBZCxFQUFiLENBQXJCO0FBQ0EsMEJBQU9ELGFBQWFFLE1BQXBCLEVBQTRCQyxFQUE1QixDQUErQkMsSUFBL0IsQ0FBb0NDLE1BQXBDLENBQTJDLENBQTNDOztBQUVBLFlBQUlDLFFBQVFOLGFBQWFFLE1BQWIsQ0FBb0IsQ0FBcEIsQ0FBWjtBQUNBLDBCQUFPSSxNQUFNQyxJQUFiLEVBQW1CSixFQUFuQixDQUFzQkssRUFBdEIsQ0FBeUJDLEtBQXpCLENBQStCLFFBQS9CO0FBQ0EsMEJBQU9ILE1BQU1JLEtBQU4sQ0FBWUgsSUFBbkIsRUFBeUJKLEVBQXpCLENBQTRCSyxFQUE1QixDQUErQkMsS0FBL0IsQ0FBcUMsU0FBckM7QUFDQSwwQkFBT0gsTUFBTUssUUFBYixFQUF1QlIsRUFBdkIsQ0FBMEJLLEVBQTFCLENBQTZCSSxLQUE3QjtBQUNBLDBCQUFPTixNQUFNTyxTQUFiLEVBQXdCVixFQUF4QixDQUEyQkMsSUFBM0IsQ0FBZ0NDLE1BQWhDLENBQXVDLENBQXZDOztBQUVBQyxnQkFBUU4sYUFBYUUsTUFBYixDQUFvQixDQUFwQixDQUFSO0FBQ0EsMEJBQU9JLE1BQU1DLElBQWIsRUFBbUJKLEVBQW5CLENBQXNCSyxFQUF0QixDQUF5QkMsS0FBekIsQ0FBK0IsVUFBL0I7QUFDQSwwQkFBT0gsTUFBTUksS0FBTixDQUFZSCxJQUFuQixFQUF5QkosRUFBekIsQ0FBNEJLLEVBQTVCLENBQStCQyxLQUEvQixDQUFxQyxvQkFBckM7QUFDQSwwQkFBT0gsTUFBTUssUUFBYixFQUF1QlIsRUFBdkIsQ0FBMEJLLEVBQTFCLENBQTZCSSxLQUE3QjtBQUNBLDBCQUFPTixNQUFNTyxTQUFiLEVBQXdCVixFQUF4QixDQUEyQkMsSUFBM0IsQ0FBZ0NDLE1BQWhDLENBQXVDLENBQXZDO0FBQ0EsMEJBQU9DLE1BQU1PLFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBbUJDLElBQTFCLEVBQWdDWCxFQUFoQyxDQUFtQ0ssRUFBbkMsQ0FBc0NDLEtBQXRDLENBQTRDLFdBQTVDO0FBQ0EsMEJBQU9ILE1BQU1PLFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBbUJDLElBQTFCLEVBQWdDWCxFQUFoQyxDQUFtQ0ssRUFBbkMsQ0FBc0NDLEtBQXRDLENBQTRDLEdBQTVDO0FBQ0EsMEJBQU9ILE1BQU1PLFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBbUJDLElBQTFCLEVBQWdDWCxFQUFoQyxDQUFtQ0ssRUFBbkMsQ0FBc0NDLEtBQXRDLENBQTRDLEdBQTVDO0FBQ0EsMEJBQU9ILE1BQU1PLFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBbUJDLElBQTFCLEVBQWdDWCxFQUFoQyxDQUFtQ0ssRUFBbkMsQ0FBc0NDLEtBQXRDLENBQTRDLEdBQTVDO0FBQ0EsMEJBQU9ILE1BQU1PLFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBbUJDLElBQTFCLEVBQWdDWCxFQUFoQyxDQUFtQ0ssRUFBbkMsQ0FBc0NDLEtBQXRDLENBQTRDLFNBQTVDO0FBQ0EsMEJBQU9ILE1BQU1PLFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBbUJDLElBQTFCLEVBQWdDWCxFQUFoQyxDQUFtQ0ssRUFBbkMsQ0FBc0NDLEtBQXRDLENBQTRDLFVBQTVDO0FBQ0EsMEJBQU9ILE1BQU1TLFVBQWIsRUFBeUJaLEVBQXpCLENBQTRCQyxJQUE1QixDQUFpQ0MsTUFBakMsQ0FBd0MsQ0FBeEM7QUFDQSwwQkFBT0MsTUFBTVMsVUFBTixDQUFpQixDQUFqQixFQUFvQkMsVUFBcEIsQ0FBK0JGLElBQXRDLEVBQTRDWCxFQUE1QyxDQUErQ0ssRUFBL0MsQ0FBa0RDLEtBQWxELENBQXdELFVBQXhEO0FBQ0EsMEJBQU9ILE1BQU1TLFVBQU4sQ0FBaUIsQ0FBakIsRUFBb0JDLFVBQXBCLENBQStCRixJQUF0QyxFQUE0Q1gsRUFBNUMsQ0FBK0NLLEVBQS9DLENBQWtEQyxLQUFsRCxDQUF3RCxTQUF4RDtBQUNBLDBCQUFPSCxNQUFNUyxVQUFOLENBQWlCLENBQWpCLEVBQW9CQyxVQUFwQixDQUErQkYsSUFBdEMsRUFBNENYLEVBQTVDLENBQStDSyxFQUEvQyxDQUFrREMsS0FBbEQsQ0FBd0QsR0FBeEQ7QUFDQSwwQkFBT0gsTUFBTVMsVUFBTixDQUFpQixDQUFqQixFQUFvQkMsVUFBcEIsQ0FBK0JGLElBQXRDLEVBQTRDWCxFQUE1QyxDQUErQ0ssRUFBL0MsQ0FBa0RDLEtBQWxELENBQXdELEdBQXhEO0FBQ0EsMEJBQU9ILE1BQU1TLFVBQU4sQ0FBaUIsQ0FBakIsRUFBb0JDLFVBQXBCLENBQStCRixJQUF0QyxFQUE0Q1gsRUFBNUMsQ0FBK0NLLEVBQS9DLENBQWtEQyxLQUFsRCxDQUF3RCxVQUF4RDtBQUNILEtBcENEO0FBcUNILENBdENEOztBQXdDQTtBQW5FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJlczYtdGVtcGxhdGUtbGl0ZXJhbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuLy8gIENvcHlyaWdodCAoQykgMjAxNCBZdXN1a2UgU3V6dWtpIDx1dGF0YW5lLnRlYUBnbWFpbC5jb20+XG4vL1xuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuLy8gIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy9cbi8vICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbi8vICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuLy8gICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4vLyAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vL1xuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4vLyAgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuLy8gIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4vLyAgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIDxDT1BZUklHSFQgSE9MREVSPiBCRSBMSUFCTEUgRk9SIEFOWVxuLy8gIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4vLyAgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuLy8gIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORFxuLy8gIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4vLyAgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GXG4vLyAgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJy4uL3RoaXJkX3BhcnR5L2VzcHJpbWEnO1xuaW1wb3J0IHsgYW5hbHl6ZSB9IGZyb20gJy4uJztcblxuZGVzY3JpYmUoJ0VTNiB0ZW1wbGF0ZSBsaXRlcmFsJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ3JlZmVyIHZhcmlhYmxlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBhc3QgPSBwYXJzZShgXG4gICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGxldCBpLCBqLCBrO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRlc3RpbmcoKSB7IH1cbiAgICAgICAgICAgICAgICBsZXQgdGVtcGxhdGUgPSB0ZXN0aW5nXFxgdGVzdGluZyBcXCR7aX0gYW5kIFxcJHtqfVxcYFxuICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICAgICAgICAgIH0oKSk7XG4gICAgICAgIGApO1xuXG4gICAgICAgIGNvbnN0IHNjb3BlTWFuYWdlciA9IGFuYWx5emUoYXN0LCB7ZWNtYVZlcnNpb246IDZ9KTtcbiAgICAgICAgZXhwZWN0KHNjb3BlTWFuYWdlci5zY29wZXMpLnRvLmhhdmUubGVuZ3RoKDMpO1xuXG4gICAgICAgIGxldCBzY29wZSA9IHNjb3BlTWFuYWdlci5zY29wZXNbMF07XG4gICAgICAgIGV4cGVjdChzY29wZS50eXBlKS50by5iZS5lcXVhbCgnZ2xvYmFsJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5ibG9jay50eXBlKS50by5iZS5lcXVhbCgnUHJvZ3JhbScpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuaXNTdHJpY3QpLnRvLmJlLmZhbHNlO1xuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzKS50by5oYXZlLmxlbmd0aCgwKTtcblxuICAgICAgICBzY29wZSA9IHNjb3BlTWFuYWdlci5zY29wZXNbMV07XG4gICAgICAgIGV4cGVjdChzY29wZS50eXBlKS50by5iZS5lcXVhbCgnZnVuY3Rpb24nKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLmJsb2NrLnR5cGUpLnRvLmJlLmVxdWFsKCdGdW5jdGlvbkV4cHJlc3Npb24nKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLmlzU3RyaWN0KS50by5iZS5mYWxzZTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnZhcmlhYmxlcykudG8uaGF2ZS5sZW5ndGgoNik7XG4gICAgICAgIGV4cGVjdChzY29wZS52YXJpYWJsZXNbMF0ubmFtZSkudG8uYmUuZXF1YWwoJ2FyZ3VtZW50cycpO1xuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzWzFdLm5hbWUpLnRvLmJlLmVxdWFsKCdpJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS52YXJpYWJsZXNbMl0ubmFtZSkudG8uYmUuZXF1YWwoJ2onKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnZhcmlhYmxlc1szXS5uYW1lKS50by5iZS5lcXVhbCgnaycpO1xuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzWzRdLm5hbWUpLnRvLmJlLmVxdWFsKCd0ZXN0aW5nJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS52YXJpYWJsZXNbNV0ubmFtZSkudG8uYmUuZXF1YWwoJ3RlbXBsYXRlJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5yZWZlcmVuY2VzKS50by5oYXZlLmxlbmd0aCg1KTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnJlZmVyZW5jZXNbMF0uaWRlbnRpZmllci5uYW1lKS50by5iZS5lcXVhbCgndGVtcGxhdGUnKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnJlZmVyZW5jZXNbMV0uaWRlbnRpZmllci5uYW1lKS50by5iZS5lcXVhbCgndGVzdGluZycpO1xuICAgICAgICBleHBlY3Qoc2NvcGUucmVmZXJlbmNlc1syXS5pZGVudGlmaWVyLm5hbWUpLnRvLmJlLmVxdWFsKCdpJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5yZWZlcmVuY2VzWzNdLmlkZW50aWZpZXIubmFtZSkudG8uYmUuZXF1YWwoJ2onKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnJlZmVyZW5jZXNbNF0uaWRlbnRpZmllci5uYW1lKS50by5iZS5lcXVhbCgndGVtcGxhdGUnKTtcbiAgICB9KTtcbn0pO1xuXG4vLyB2aW06IHNldCBzdz00IHRzPTQgZXQgdHc9ODAgOlxuIl19
