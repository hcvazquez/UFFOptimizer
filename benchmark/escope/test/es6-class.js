'use strict';

var _chai = require('chai');

var _esprima = require('../third_party/esprima');

var _ = require('..');

describe('ES6 class', function () {
    it('declaration name creates class scope', function () {
        var ast = (0, _esprima.parse)('\n            class Derived extends Base {\n                constructor() {\n                }\n            }\n            new Derived();\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(3);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('Derived');
        (0, _chai.expect)(scope.references).to.have.length(2);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('Base');
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('Derived');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('class');
        (0, _chai.expect)(scope.block.type).to.be.equal('ClassDeclaration');
        (0, _chai.expect)(scope.isStrict).to.be.true;
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('Derived');
        (0, _chai.expect)(scope.references).to.have.length(0);

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.block.type).to.be.equal('FunctionExpression');
        (0, _chai.expect)(scope.isStrict).to.be.true;
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.references).to.have.length(0);
    });

    it('expression name creates class scope#1', function () {
        var ast = (0, _esprima.parse)('\n            (class Derived extends Base {\n                constructor() {\n                }\n            });\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(3);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('Base');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('class');
        (0, _chai.expect)(scope.block.type).to.be.equal('ClassExpression');
        (0, _chai.expect)(scope.isStrict).to.be.true;
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('Derived');
        (0, _chai.expect)(scope.references).to.have.length(0);

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.block.type).to.be.equal('FunctionExpression');
    });

    it('expression name creates class scope#2', function () {
        var ast = (0, _esprima.parse)('\n            (class extends Base {\n                constructor() {\n                }\n            });\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(3);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('Base');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('class');
        (0, _chai.expect)(scope.block.type).to.be.equal('ClassExpression');

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.block.type).to.be.equal('FunctionExpression');
    });

    it('computed property key may refer variables', function () {
        var ast = (0, _esprima.parse)('\n            (function () {\n                var yuyushiki = 42;\n                (class {\n                    [yuyushiki]() {\n                    }\n\n                    [yuyushiki + 40]() {\n                    }\n                });\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(5);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.block.type).to.be.equal('FunctionExpression');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(2);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('yuyushiki');
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('yuyushiki');

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('class');
        (0, _chai.expect)(scope.block.type).to.be.equal('ClassExpression');
        (0, _chai.expect)(scope.isStrict).to.be.true;
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(2);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('yuyushiki');
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('yuyushiki');
    });

    it('regression #49', function () {
        var ast = (0, _esprima.parse)('\n            class Shoe {\n                constructor() {\n                    //Shoe.x = true;\n                }\n            }\n            let shoe = new Shoe();\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(3);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(2);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('Shoe');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('shoe');
        (0, _chai.expect)(scope.references).to.have.length(2);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('shoe');
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('Shoe');
    });
});

// vim: set sw=4 ts=4 et tw=80 :
// -*- coding: utf-8 -*-
//  Copyright (C) 2014 Yusuke Suzuki <utatane.tea@gmail.com>
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//# sourceMappingURL=data:application/json;charset=utf8;base64,
