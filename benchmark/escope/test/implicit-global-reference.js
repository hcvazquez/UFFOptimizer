'use strict';

var _chai = require('chai');

var _ = require('..');

var _esprima = require('esprima');

describe('implicit global reference', function () {
    it('assignments global scope', function () {
        var ast = (0, _esprima.parse)('\n            var x = 20;\n            x = 300;\n        ');

        var _analyze = (0, _.analyze)(ast);

        var scopes = _analyze.scopes;


        (0, _chai.expect)(scopes.map(function (scope) {
            return scope.variables.map(function (variable) {
                return variable.defs.map(function (def) {
                    return def.type;
                });
            });
        })).to.be.eql([[['Variable']]]);

        (0, _chai.expect)(scopes[0].implicit.variables.map(function (variable) {
            return variable.name;
        })).to.be.eql([]);
    });

    it('assignments global scope without definition', function () {
        var ast = (0, _esprima.parse)('\n            x = 300;\n            x = 300;\n        ');

        var _analyze2 = (0, _.analyze)(ast);

        var scopes = _analyze2.scopes;


        (0, _chai.expect)(scopes.map(function (scope) {
            return scope.variables.map(function (variable) {
                return variable.defs.map(function (def) {
                    return def.type;
                });
            });
        })).to.be.eql([[]]);

        (0, _chai.expect)(scopes[0].implicit.variables.map(function (variable) {
            return variable.name;
        })).to.be.eql(['x']);
    });

    it('assignments global scope without definition eval', function () {
        var ast = (0, _esprima.parse)('\n            function inner() {\n                eval(str);\n                x = 300;\n            }\n        ');

        var _analyze3 = (0, _.analyze)(ast);

        var scopes = _analyze3.scopes;


        (0, _chai.expect)(scopes.map(function (scope) {
            return scope.variables.map(function (variable) {
                return variable.defs.map(function (def) {
                    return def.type;
                });
            });
        })).to.be.eql([[['FunctionName']], [[]]]);

        (0, _chai.expect)(scopes[0].implicit.variables.map(function (variable) {
            return variable.name;
        })).to.be.eql([]);
    });

    it('assignment leaks', function () {
        var ast = (0, _esprima.parse)('\n            function outer() {\n                x = 20;\n            }\n        ');

        var _analyze4 = (0, _.analyze)(ast);

        var scopes = _analyze4.scopes;


        (0, _chai.expect)(scopes.map(function (scope) {
            return scope.variables.map(function (variable) {
                return variable.name;
            });
        })).to.be.eql([['outer'], ['arguments']]);

        (0, _chai.expect)(scopes[0].implicit.variables.map(function (variable) {
            return variable.name;
        })).to.be.eql(['x']);
    });

    it('assignment doesn\'t leak', function () {
        var ast = (0, _esprima.parse)('\n            function outer() {\n                function inner() {\n                    x = 20;\n                }\n                var x;\n            }\n        ');

        var _analyze5 = (0, _.analyze)(ast);

        var scopes = _analyze5.scopes;


        (0, _chai.expect)(scopes.map(function (scope) {
            return scope.variables.map(function (variable) {
                return variable.name;
            });
        })).to.be.eql([['outer'], ['arguments', 'inner', 'x'], ['arguments']]);

        (0, _chai.expect)(scopes[0].implicit.variables.map(function (variable) {
            return variable.name;
        })).to.be.eql([]);
    });

    it('for-in-statement leaks', function () {
        var ast = (0, _esprima.parse)('\n            function outer() {\n                for (x in y) { }\n            }');

        var _analyze6 = (0, _.analyze)(ast);

        var scopes = _analyze6.scopes;


        (0, _chai.expect)(scopes.map(function (scope) {
            return scope.variables.map(function (variable) {
                return variable.name;
            });
        })).to.be.eql([['outer'], ['arguments']]);

        (0, _chai.expect)(scopes[0].implicit.variables.map(function (variable) {
            return variable.name;
        })).to.be.eql(['x']);
    });

    it('for-in-statement doesn\'t leaks', function () {
        var ast = (0, _esprima.parse)('\n            function outer() {\n                function inner() {\n                    for (x in y) { }\n                }\n                var x;\n            }\n        ');

        var _analyze7 = (0, _.analyze)(ast);

        var scopes = _analyze7.scopes;


        (0, _chai.expect)(scopes.map(function (scope) {
            return scope.variables.map(function (variable) {
                return variable.name;
            });
        })).to.be.eql([['outer'], ['arguments', 'inner', 'x'], ['arguments']]);

        (0, _chai.expect)(scopes[0].implicit.variables.map(function (variable) {
            return variable.name;
        })).to.be.eql([]);
    });
}); // Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//   * Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//   * Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//# sourceMappingURL=data:application/json;charset=utf8;base64,
