'use strict';

var _chai = require('chai');

var _esprima = require('esprima');

var _ = require('..');

describe('function name', function () {
    it('should create its special scope', function () {
        var ast = (0, _esprima.parse)('\n            (function name() {\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast);
        (0, _chai.expect)(scopeManager.scopes).to.have.length(3);
        var globalScope = scopeManager.scopes[0];
        (0, _chai.expect)(globalScope.type).to.be.equal('global');
        (0, _chai.expect)(globalScope.variables).to.have.length(0);
        (0, _chai.expect)(globalScope.references).to.have.length(0);
        (0, _chai.expect)(globalScope.isArgumentsMaterialized()).to.be.true;

        // Function expression name scope
        var scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function-expression-name');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('name');
        (0, _chai.expect)(scope.isArgumentsMaterialized()).to.be.true;
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.upper === globalScope).to.be.true;

        // Function scope
        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.isArgumentsMaterialized()).to.be.false;
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.upper === scopeManager.scopes[1]).to.be.true;
    });
});

// vim: set sw=4 ts=4 et tw=80 :
// -*- coding: utf-8 -*-
//  Copyright (C) 2015 Yusuke Suzuki <utatane.tea@gmail.com>
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZ1bmN0aW9uLWV4cHJlc3Npb24tbmFtZS5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwiYXN0Iiwic2NvcGVNYW5hZ2VyIiwic2NvcGVzIiwidG8iLCJoYXZlIiwibGVuZ3RoIiwiZ2xvYmFsU2NvcGUiLCJ0eXBlIiwiYmUiLCJlcXVhbCIsInZhcmlhYmxlcyIsInJlZmVyZW5jZXMiLCJpc0FyZ3VtZW50c01hdGVyaWFsaXplZCIsInRydWUiLCJzY29wZSIsIm5hbWUiLCJ1cHBlciIsImZhbHNlIl0sIm1hcHBpbmdzIjoiOztBQXVCQTs7QUFDQTs7QUFDQTs7QUFFQUEsU0FBUyxlQUFULEVBQTBCLFlBQVc7QUFDakNDLE9BQUcsaUNBQUgsRUFBc0MsWUFBVztBQUM3QyxZQUFNQyxNQUFNLG9GQUFaOztBQUtBLFlBQU1DLGVBQWUsZUFBUUQsR0FBUixDQUFyQjtBQUNBLDBCQUFPQyxhQUFhQyxNQUFwQixFQUE0QkMsRUFBNUIsQ0FBK0JDLElBQS9CLENBQW9DQyxNQUFwQyxDQUEyQyxDQUEzQztBQUNBLFlBQU1DLGNBQWNMLGFBQWFDLE1BQWIsQ0FBb0IsQ0FBcEIsQ0FBcEI7QUFDQSwwQkFBT0ksWUFBWUMsSUFBbkIsRUFBeUJKLEVBQXpCLENBQTRCSyxFQUE1QixDQUErQkMsS0FBL0IsQ0FBcUMsUUFBckM7QUFDQSwwQkFBT0gsWUFBWUksU0FBbkIsRUFBOEJQLEVBQTlCLENBQWlDQyxJQUFqQyxDQUFzQ0MsTUFBdEMsQ0FBNkMsQ0FBN0M7QUFDQSwwQkFBT0MsWUFBWUssVUFBbkIsRUFBK0JSLEVBQS9CLENBQWtDQyxJQUFsQyxDQUF1Q0MsTUFBdkMsQ0FBOEMsQ0FBOUM7QUFDQSwwQkFBT0MsWUFBWU0sdUJBQVosRUFBUCxFQUE4Q1QsRUFBOUMsQ0FBaURLLEVBQWpELENBQW9ESyxJQUFwRDs7QUFFQTtBQUNBLFlBQUlDLFFBQVFiLGFBQWFDLE1BQWIsQ0FBb0IsQ0FBcEIsQ0FBWjtBQUNBLDBCQUFPWSxNQUFNUCxJQUFiLEVBQW1CSixFQUFuQixDQUFzQkssRUFBdEIsQ0FBeUJDLEtBQXpCLENBQStCLDBCQUEvQjtBQUNBLDBCQUFPSyxNQUFNSixTQUFiLEVBQXdCUCxFQUF4QixDQUEyQkMsSUFBM0IsQ0FBZ0NDLE1BQWhDLENBQXVDLENBQXZDO0FBQ0EsMEJBQU9TLE1BQU1KLFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBbUJLLElBQTFCLEVBQWdDWixFQUFoQyxDQUFtQ0ssRUFBbkMsQ0FBc0NDLEtBQXRDLENBQTRDLE1BQTVDO0FBQ0EsMEJBQU9LLE1BQU1GLHVCQUFOLEVBQVAsRUFBd0NULEVBQXhDLENBQTJDSyxFQUEzQyxDQUE4Q0ssSUFBOUM7QUFDQSwwQkFBT0MsTUFBTUgsVUFBYixFQUF5QlIsRUFBekIsQ0FBNEJDLElBQTVCLENBQWlDQyxNQUFqQyxDQUF3QyxDQUF4QztBQUNBLDBCQUFPUyxNQUFNRSxLQUFOLEtBQWdCVixXQUF2QixFQUFvQ0gsRUFBcEMsQ0FBdUNLLEVBQXZDLENBQTBDSyxJQUExQzs7QUFFQTtBQUNBQyxnQkFBUWIsYUFBYUMsTUFBYixDQUFvQixDQUFwQixDQUFSO0FBQ0EsMEJBQU9ZLE1BQU1QLElBQWIsRUFBbUJKLEVBQW5CLENBQXNCSyxFQUF0QixDQUF5QkMsS0FBekIsQ0FBK0IsVUFBL0I7QUFDQSwwQkFBT0ssTUFBTUosU0FBYixFQUF3QlAsRUFBeEIsQ0FBMkJDLElBQTNCLENBQWdDQyxNQUFoQyxDQUF1QyxDQUF2QztBQUNBLDBCQUFPUyxNQUFNSixTQUFOLENBQWdCLENBQWhCLEVBQW1CSyxJQUExQixFQUFnQ1osRUFBaEMsQ0FBbUNLLEVBQW5DLENBQXNDQyxLQUF0QyxDQUE0QyxXQUE1QztBQUNBLDBCQUFPSyxNQUFNRix1QkFBTixFQUFQLEVBQXdDVCxFQUF4QyxDQUEyQ0ssRUFBM0MsQ0FBOENTLEtBQTlDO0FBQ0EsMEJBQU9ILE1BQU1ILFVBQWIsRUFBeUJSLEVBQXpCLENBQTRCQyxJQUE1QixDQUFpQ0MsTUFBakMsQ0FBd0MsQ0FBeEM7QUFDQSwwQkFBT1MsTUFBTUUsS0FBTixLQUFnQmYsYUFBYUMsTUFBYixDQUFvQixDQUFwQixDQUF2QixFQUErQ0MsRUFBL0MsQ0FBa0RLLEVBQWxELENBQXFESyxJQUFyRDtBQUNILEtBL0JEO0FBZ0NILENBakNEOztBQW9DQTtBQS9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJmdW5jdGlvbi1leHByZXNzaW9uLW5hbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAtKi0gY29kaW5nOiB1dGYtOCAtKi1cbi8vICBDb3B5cmlnaHQgKEMpIDIwMTUgWXVzdWtlIFN1enVraSA8dXRhdGFuZS50ZWFAZ21haWwuY29tPlxuLy9cbi8vICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbi8vICBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbi8vXG4vLyAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4vLyAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbi8vICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbi8vICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuLy8gICAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuLy9cbi8vICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuLy8gIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbi8vICBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuLy8gIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCA8Q09QWVJJR0hUIEhPTERFUj4gQkUgTElBQkxFIEZPUiBBTllcbi8vICBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuLy8gIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUztcbi8vICBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkRcbi8vICBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuLy8gIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRlxuLy8gIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cbmltcG9ydCB7IGV4cGVjdCB9IGZyb20gJ2NoYWknO1xuaW1wb3J0IHsgcGFyc2UgYXMgcGFyc2UgfSBmcm9tICdlc3ByaW1hJztcbmltcG9ydCB7IGFuYWx5emUgfSBmcm9tICcuLic7XG5cbmRlc2NyaWJlKCdmdW5jdGlvbiBuYW1lJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgaXRzIHNwZWNpYWwgc2NvcGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgYXN0ID0gcGFyc2UoYFxuICAgICAgICAgICAgKGZ1bmN0aW9uIG5hbWUoKSB7XG4gICAgICAgICAgICB9KCkpO1xuICAgICAgICBgKTtcblxuICAgICAgICBjb25zdCBzY29wZU1hbmFnZXIgPSBhbmFseXplKGFzdCk7XG4gICAgICAgIGV4cGVjdChzY29wZU1hbmFnZXIuc2NvcGVzKS50by5oYXZlLmxlbmd0aCgzKTtcbiAgICAgICAgY29uc3QgZ2xvYmFsU2NvcGUgPSBzY29wZU1hbmFnZXIuc2NvcGVzWzBdO1xuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUudHlwZSkudG8uYmUuZXF1YWwoJ2dsb2JhbCcpO1xuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUudmFyaWFibGVzKS50by5oYXZlLmxlbmd0aCgwKTtcbiAgICAgICAgZXhwZWN0KGdsb2JhbFNjb3BlLnJlZmVyZW5jZXMpLnRvLmhhdmUubGVuZ3RoKDApO1xuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUuaXNBcmd1bWVudHNNYXRlcmlhbGl6ZWQoKSkudG8uYmUudHJ1ZTtcblxuICAgICAgICAvLyBGdW5jdGlvbiBleHByZXNzaW9uIG5hbWUgc2NvcGVcbiAgICAgICAgbGV0IHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1sxXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdmdW5jdGlvbi1leHByZXNzaW9uLW5hbWUnKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnZhcmlhYmxlcykudG8uaGF2ZS5sZW5ndGgoMSk7XG4gICAgICAgIGV4cGVjdChzY29wZS52YXJpYWJsZXNbMF0ubmFtZSkudG8uYmUuZXF1YWwoJ25hbWUnKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLmlzQXJndW1lbnRzTWF0ZXJpYWxpemVkKCkpLnRvLmJlLnRydWU7XG4gICAgICAgIGV4cGVjdChzY29wZS5yZWZlcmVuY2VzKS50by5oYXZlLmxlbmd0aCgwKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnVwcGVyID09PSBnbG9iYWxTY29wZSkudG8uYmUudHJ1ZTtcblxuICAgICAgICAvLyBGdW5jdGlvbiBzY29wZVxuICAgICAgICBzY29wZSA9IHNjb3BlTWFuYWdlci5zY29wZXNbMl07XG4gICAgICAgIGV4cGVjdChzY29wZS50eXBlKS50by5iZS5lcXVhbCgnZnVuY3Rpb24nKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnZhcmlhYmxlcykudG8uaGF2ZS5sZW5ndGgoMSk7XG4gICAgICAgIGV4cGVjdChzY29wZS52YXJpYWJsZXNbMF0ubmFtZSkudG8uYmUuZXF1YWwoJ2FyZ3VtZW50cycpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuaXNBcmd1bWVudHNNYXRlcmlhbGl6ZWQoKSkudG8uYmUuZmFsc2U7XG4gICAgICAgIGV4cGVjdChzY29wZS5yZWZlcmVuY2VzKS50by5oYXZlLmxlbmd0aCgwKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnVwcGVyID09PSBzY29wZU1hbmFnZXIuc2NvcGVzWzFdKS50by5iZS50cnVlO1xuICAgIH0pO1xufSk7XG5cblxuLy8gdmltOiBzZXQgc3c9NCB0cz00IGV0IHR3PTgwIDpcbiJdfQ==
