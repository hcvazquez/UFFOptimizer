'use strict';

var _chai = require('chai');

var _esprima = require('../third_party/esprima');

var _ = require('..');

describe('ES6 switch', function () {
    it('materialize scope', function () {
        var ast = (0, _esprima.parse)('\n            switch (ok) {\n                case hello:\n                    let i = 20;\n                    i;\n                    break;\n\n                default:\n                    let test = 30;\n                    test;\n            }\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('ok');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('switch');
        (0, _chai.expect)(scope.block.type).to.be.equal('SwitchStatement');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(2);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('i');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('test');
        (0, _chai.expect)(scope.references).to.have.length(5);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('hello');
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[2].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[3].identifier.name).to.be.equal('test');
        (0, _chai.expect)(scope.references[4].identifier.name).to.be.equal('test');
    });
});

// vim: set sw=4 ts=4 et tw=80 :
// -*- coding: utf-8 -*-
//  Copyright (C) 2014 Yusuke Suzuki <utatane.tea@gmail.com>
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzNi1zd2l0Y2guanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsImFzdCIsInNjb3BlTWFuYWdlciIsImVjbWFWZXJzaW9uIiwic2NvcGVzIiwidG8iLCJoYXZlIiwibGVuZ3RoIiwic2NvcGUiLCJ0eXBlIiwiYmUiLCJlcXVhbCIsImJsb2NrIiwiaXNTdHJpY3QiLCJmYWxzZSIsInZhcmlhYmxlcyIsInJlZmVyZW5jZXMiLCJpZGVudGlmaWVyIiwibmFtZSJdLCJtYXBwaW5ncyI6Ijs7QUF1QkE7O0FBQ0E7O0FBQ0E7O0FBRUFBLFNBQVMsWUFBVCxFQUF1QixZQUFXO0FBQzlCQyxPQUFHLG1CQUFILEVBQXdCLFlBQVc7QUFDL0IsWUFBTUMsTUFBTSx3UkFBWjs7QUFhQSxZQUFNQyxlQUFlLGVBQVFELEdBQVIsRUFBYSxFQUFDRSxhQUFhLENBQWQsRUFBYixDQUFyQjtBQUNBLDBCQUFPRCxhQUFhRSxNQUFwQixFQUE0QkMsRUFBNUIsQ0FBK0JDLElBQS9CLENBQW9DQyxNQUFwQyxDQUEyQyxDQUEzQzs7QUFFQSxZQUFJQyxRQUFRTixhQUFhRSxNQUFiLENBQW9CLENBQXBCLENBQVo7QUFDQSwwQkFBT0ksTUFBTUMsSUFBYixFQUFtQkosRUFBbkIsQ0FBc0JLLEVBQXRCLENBQXlCQyxLQUF6QixDQUErQixRQUEvQjtBQUNBLDBCQUFPSCxNQUFNSSxLQUFOLENBQVlILElBQW5CLEVBQXlCSixFQUF6QixDQUE0QkssRUFBNUIsQ0FBK0JDLEtBQS9CLENBQXFDLFNBQXJDO0FBQ0EsMEJBQU9ILE1BQU1LLFFBQWIsRUFBdUJSLEVBQXZCLENBQTBCSyxFQUExQixDQUE2QkksS0FBN0I7QUFDQSwwQkFBT04sTUFBTU8sU0FBYixFQUF3QlYsRUFBeEIsQ0FBMkJDLElBQTNCLENBQWdDQyxNQUFoQyxDQUF1QyxDQUF2QztBQUNBLDBCQUFPQyxNQUFNUSxVQUFiLEVBQXlCWCxFQUF6QixDQUE0QkMsSUFBNUIsQ0FBaUNDLE1BQWpDLENBQXdDLENBQXhDO0FBQ0EsMEJBQU9DLE1BQU1RLFVBQU4sQ0FBaUIsQ0FBakIsRUFBb0JDLFVBQXBCLENBQStCQyxJQUF0QyxFQUE0Q2IsRUFBNUMsQ0FBK0NLLEVBQS9DLENBQWtEQyxLQUFsRCxDQUF3RCxJQUF4RDs7QUFFQUgsZ0JBQVFOLGFBQWFFLE1BQWIsQ0FBb0IsQ0FBcEIsQ0FBUjtBQUNBLDBCQUFPSSxNQUFNQyxJQUFiLEVBQW1CSixFQUFuQixDQUFzQkssRUFBdEIsQ0FBeUJDLEtBQXpCLENBQStCLFFBQS9CO0FBQ0EsMEJBQU9ILE1BQU1JLEtBQU4sQ0FBWUgsSUFBbkIsRUFBeUJKLEVBQXpCLENBQTRCSyxFQUE1QixDQUErQkMsS0FBL0IsQ0FBcUMsaUJBQXJDO0FBQ0EsMEJBQU9ILE1BQU1LLFFBQWIsRUFBdUJSLEVBQXZCLENBQTBCSyxFQUExQixDQUE2QkksS0FBN0I7QUFDQSwwQkFBT04sTUFBTU8sU0FBYixFQUF3QlYsRUFBeEIsQ0FBMkJDLElBQTNCLENBQWdDQyxNQUFoQyxDQUF1QyxDQUF2QztBQUNBLDBCQUFPQyxNQUFNTyxTQUFOLENBQWdCLENBQWhCLEVBQW1CRyxJQUExQixFQUFnQ2IsRUFBaEMsQ0FBbUNLLEVBQW5DLENBQXNDQyxLQUF0QyxDQUE0QyxHQUE1QztBQUNBLDBCQUFPSCxNQUFNTyxTQUFOLENBQWdCLENBQWhCLEVBQW1CRyxJQUExQixFQUFnQ2IsRUFBaEMsQ0FBbUNLLEVBQW5DLENBQXNDQyxLQUF0QyxDQUE0QyxNQUE1QztBQUNBLDBCQUFPSCxNQUFNUSxVQUFiLEVBQXlCWCxFQUF6QixDQUE0QkMsSUFBNUIsQ0FBaUNDLE1BQWpDLENBQXdDLENBQXhDO0FBQ0EsMEJBQU9DLE1BQU1RLFVBQU4sQ0FBaUIsQ0FBakIsRUFBb0JDLFVBQXBCLENBQStCQyxJQUF0QyxFQUE0Q2IsRUFBNUMsQ0FBK0NLLEVBQS9DLENBQWtEQyxLQUFsRCxDQUF3RCxPQUF4RDtBQUNBLDBCQUFPSCxNQUFNUSxVQUFOLENBQWlCLENBQWpCLEVBQW9CQyxVQUFwQixDQUErQkMsSUFBdEMsRUFBNENiLEVBQTVDLENBQStDSyxFQUEvQyxDQUFrREMsS0FBbEQsQ0FBd0QsR0FBeEQ7QUFDQSwwQkFBT0gsTUFBTVEsVUFBTixDQUFpQixDQUFqQixFQUFvQkMsVUFBcEIsQ0FBK0JDLElBQXRDLEVBQTRDYixFQUE1QyxDQUErQ0ssRUFBL0MsQ0FBa0RDLEtBQWxELENBQXdELEdBQXhEO0FBQ0EsMEJBQU9ILE1BQU1RLFVBQU4sQ0FBaUIsQ0FBakIsRUFBb0JDLFVBQXBCLENBQStCQyxJQUF0QyxFQUE0Q2IsRUFBNUMsQ0FBK0NLLEVBQS9DLENBQWtEQyxLQUFsRCxDQUF3RCxNQUF4RDtBQUNBLDBCQUFPSCxNQUFNUSxVQUFOLENBQWlCLENBQWpCLEVBQW9CQyxVQUFwQixDQUErQkMsSUFBdEMsRUFBNENiLEVBQTVDLENBQStDSyxFQUEvQyxDQUFrREMsS0FBbEQsQ0FBd0QsTUFBeEQ7QUFDSCxLQXRDRDtBQXVDSCxDQXhDRDs7QUEwQ0E7QUFyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZXM2LXN3aXRjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuLy8gIENvcHlyaWdodCAoQykgMjAxNCBZdXN1a2UgU3V6dWtpIDx1dGF0YW5lLnRlYUBnbWFpbC5jb20+XG4vL1xuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuLy8gIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy9cbi8vICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbi8vICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuLy8gICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4vLyAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vL1xuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4vLyAgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuLy8gIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4vLyAgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIDxDT1BZUklHSFQgSE9MREVSPiBCRSBMSUFCTEUgRk9SIEFOWVxuLy8gIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4vLyAgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuLy8gIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORFxuLy8gIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4vLyAgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GXG4vLyAgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJy4uL3RoaXJkX3BhcnR5L2VzcHJpbWEnO1xuaW1wb3J0IHsgYW5hbHl6ZSB9IGZyb20gJy4uJztcblxuZGVzY3JpYmUoJ0VTNiBzd2l0Y2gnLCBmdW5jdGlvbigpIHtcbiAgICBpdCgnbWF0ZXJpYWxpemUgc2NvcGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgYXN0ID0gcGFyc2UoYFxuICAgICAgICAgICAgc3dpdGNoIChvaykge1xuICAgICAgICAgICAgICAgIGNhc2UgaGVsbG86XG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gMjA7XG4gICAgICAgICAgICAgICAgICAgIGk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRlc3QgPSAzMDtcbiAgICAgICAgICAgICAgICAgICAgdGVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYCk7XG5cbiAgICAgICAgY29uc3Qgc2NvcGVNYW5hZ2VyID0gYW5hbHl6ZShhc3QsIHtlY21hVmVyc2lvbjogNn0pO1xuICAgICAgICBleHBlY3Qoc2NvcGVNYW5hZ2VyLnNjb3BlcykudG8uaGF2ZS5sZW5ndGgoMik7XG5cbiAgICAgICAgbGV0IHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1swXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdnbG9iYWwnKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLmJsb2NrLnR5cGUpLnRvLmJlLmVxdWFsKCdQcm9ncmFtJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5pc1N0cmljdCkudG8uYmUuZmFsc2U7XG4gICAgICAgIGV4cGVjdChzY29wZS52YXJpYWJsZXMpLnRvLmhhdmUubGVuZ3RoKDApO1xuICAgICAgICBleHBlY3Qoc2NvcGUucmVmZXJlbmNlcykudG8uaGF2ZS5sZW5ndGgoMSk7XG4gICAgICAgIGV4cGVjdChzY29wZS5yZWZlcmVuY2VzWzBdLmlkZW50aWZpZXIubmFtZSkudG8uYmUuZXF1YWwoJ29rJyk7XG5cbiAgICAgICAgc2NvcGUgPSBzY29wZU1hbmFnZXIuc2NvcGVzWzFdO1xuICAgICAgICBleHBlY3Qoc2NvcGUudHlwZSkudG8uYmUuZXF1YWwoJ3N3aXRjaCcpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuYmxvY2sudHlwZSkudG8uYmUuZXF1YWwoJ1N3aXRjaFN0YXRlbWVudCcpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuaXNTdHJpY3QpLnRvLmJlLmZhbHNlO1xuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzKS50by5oYXZlLmxlbmd0aCgyKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnZhcmlhYmxlc1swXS5uYW1lKS50by5iZS5lcXVhbCgnaScpO1xuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzWzFdLm5hbWUpLnRvLmJlLmVxdWFsKCd0ZXN0Jyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5yZWZlcmVuY2VzKS50by5oYXZlLmxlbmd0aCg1KTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnJlZmVyZW5jZXNbMF0uaWRlbnRpZmllci5uYW1lKS50by5iZS5lcXVhbCgnaGVsbG8nKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnJlZmVyZW5jZXNbMV0uaWRlbnRpZmllci5uYW1lKS50by5iZS5lcXVhbCgnaScpO1xuICAgICAgICBleHBlY3Qoc2NvcGUucmVmZXJlbmNlc1syXS5pZGVudGlmaWVyLm5hbWUpLnRvLmJlLmVxdWFsKCdpJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5yZWZlcmVuY2VzWzNdLmlkZW50aWZpZXIubmFtZSkudG8uYmUuZXF1YWwoJ3Rlc3QnKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnJlZmVyZW5jZXNbNF0uaWRlbnRpZmllci5uYW1lKS50by5iZS5lcXVhbCgndGVzdCcpO1xuICAgIH0pO1xufSk7XG5cbi8vIHZpbTogc2V0IHN3PTQgdHM9NCBldCB0dz04MCA6XG4iXX0=
