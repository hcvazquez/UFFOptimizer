'use strict';

var _chai = require('chai');

var _esprima = require('esprima');

var _esprima2 = _interopRequireDefault(_esprima);

var _ = require('..');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('childVisitorKeys option', function () {
    it('should handle as a known node if the childVisitorKeys option was given.', function () {
        var ast = _esprima2.default.parse('\n            var foo = 0;\n        ');

        ast.body[0].declarations[0].init.type = 'NumericLiteral';

        // should no error
        (0, _.analyze)(ast, {
            fallback: 'none',
            childVisitorKeys: {
                NumericLiteral: []
            }
        });
    });

    it('should not visit to properties which are not given.', function () {
        var ast = _esprima2.default.parse('\n            let foo = bar;\n        ');

        ast.body[0].declarations[0].init = {
            type: 'TestNode',
            argument: ast.body[0].declarations[0].init
        };

        var result = (0, _.analyze)(ast, {
            childVisitorKeys: {
                TestNode: []
            }
        });

        (0, _chai.expect)(result.scopes).to.have.length(1);
        var globalScope = result.scopes[0];

        // `bar` in TestNode has not been visited.
        (0, _chai.expect)(globalScope.through).to.have.length(0);
    });

    it('should visit to given properties.', function () {
        var ast = _esprima2.default.parse('\n            let foo = bar;\n        ');

        ast.body[0].declarations[0].init = {
            type: 'TestNode',
            argument: ast.body[0].declarations[0].init
        };

        var result = (0, _.analyze)(ast, {
            childVisitorKeys: {
                TestNode: ['argument']
            }
        });

        (0, _chai.expect)(result.scopes).to.have.length(1);
        var globalScope = result.scopes[0];

        // `bar` in TestNode has been visited.
        (0, _chai.expect)(globalScope.through).to.have.length(1);
        (0, _chai.expect)(globalScope.through[0].identifier.name).to.equal('bar');
    });
});

// vim: set sw=4 ts=4 et tw=80 :
// -*- coding: utf-8 -*-
//  Copyright (C) 2016 Yusuke Suzuki <utatane.tea@gmail.com>
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoaWxkLXZpc2l0b3Ita2V5cy5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwiYXN0IiwicGFyc2UiLCJib2R5IiwiZGVjbGFyYXRpb25zIiwiaW5pdCIsInR5cGUiLCJmYWxsYmFjayIsImNoaWxkVmlzaXRvcktleXMiLCJOdW1lcmljTGl0ZXJhbCIsImFyZ3VtZW50IiwicmVzdWx0IiwiVGVzdE5vZGUiLCJzY29wZXMiLCJ0byIsImhhdmUiLCJsZW5ndGgiLCJnbG9iYWxTY29wZSIsInRocm91Z2giLCJpZGVudGlmaWVyIiwibmFtZSIsImVxdWFsIl0sIm1hcHBpbmdzIjoiOztBQXVCQTs7QUFDQTs7OztBQUNBOzs7O0FBRUFBLFNBQVMseUJBQVQsRUFBb0MsWUFBVztBQUMzQ0MsT0FBRyx5RUFBSCxFQUE4RSxZQUFXO0FBQ3JGLFlBQU1DLE1BQU0sa0JBQVFDLEtBQVIsd0NBQVo7O0FBSUFELFlBQUlFLElBQUosQ0FBUyxDQUFULEVBQVlDLFlBQVosQ0FBeUIsQ0FBekIsRUFBNEJDLElBQTVCLENBQWlDQyxJQUFqQyxHQUF3QyxnQkFBeEM7O0FBRUE7QUFDQSx1QkFDSUwsR0FESixFQUVJO0FBQ0lNLHNCQUFVLE1BRGQ7QUFFSUMsOEJBQWtCO0FBQ2RDLGdDQUFnQjtBQURGO0FBRnRCLFNBRko7QUFTSCxLQWpCRDs7QUFtQkFULE9BQUcscURBQUgsRUFBMEQsWUFBVztBQUNqRSxZQUFNQyxNQUFNLGtCQUFRQyxLQUFSLDBDQUFaOztBQUlBRCxZQUFJRSxJQUFKLENBQVMsQ0FBVCxFQUFZQyxZQUFaLENBQXlCLENBQXpCLEVBQTRCQyxJQUE1QixHQUFtQztBQUMvQkMsa0JBQU0sVUFEeUI7QUFFL0JJLHNCQUFVVCxJQUFJRSxJQUFKLENBQVMsQ0FBVCxFQUFZQyxZQUFaLENBQXlCLENBQXpCLEVBQTRCQztBQUZQLFNBQW5DOztBQUtBLFlBQUlNLFNBQVMsZUFDVFYsR0FEUyxFQUVUO0FBQ0lPLDhCQUFrQjtBQUNkSSwwQkFBVTtBQURJO0FBRHRCLFNBRlMsQ0FBYjs7QUFTQSwwQkFBT0QsT0FBT0UsTUFBZCxFQUFzQkMsRUFBdEIsQ0FBeUJDLElBQXpCLENBQThCQyxNQUE5QixDQUFxQyxDQUFyQztBQUNBLFlBQU1DLGNBQWNOLE9BQU9FLE1BQVAsQ0FBYyxDQUFkLENBQXBCOztBQUVBO0FBQ0EsMEJBQU9JLFlBQVlDLE9BQW5CLEVBQTRCSixFQUE1QixDQUErQkMsSUFBL0IsQ0FBb0NDLE1BQXBDLENBQTJDLENBQTNDO0FBQ0gsS0F4QkQ7O0FBMEJBaEIsT0FBRyxtQ0FBSCxFQUF3QyxZQUFXO0FBQy9DLFlBQU1DLE1BQU0sa0JBQVFDLEtBQVIsMENBQVo7O0FBSUFELFlBQUlFLElBQUosQ0FBUyxDQUFULEVBQVlDLFlBQVosQ0FBeUIsQ0FBekIsRUFBNEJDLElBQTVCLEdBQW1DO0FBQy9CQyxrQkFBTSxVQUR5QjtBQUUvQkksc0JBQVVULElBQUlFLElBQUosQ0FBUyxDQUFULEVBQVlDLFlBQVosQ0FBeUIsQ0FBekIsRUFBNEJDO0FBRlAsU0FBbkM7O0FBS0EsWUFBSU0sU0FBUyxlQUNUVixHQURTLEVBRVQ7QUFDSU8sOEJBQWtCO0FBQ2RJLDBCQUFVLENBQUMsVUFBRDtBQURJO0FBRHRCLFNBRlMsQ0FBYjs7QUFTQSwwQkFBT0QsT0FBT0UsTUFBZCxFQUFzQkMsRUFBdEIsQ0FBeUJDLElBQXpCLENBQThCQyxNQUE5QixDQUFxQyxDQUFyQztBQUNBLFlBQU1DLGNBQWNOLE9BQU9FLE1BQVAsQ0FBYyxDQUFkLENBQXBCOztBQUVBO0FBQ0EsMEJBQU9JLFlBQVlDLE9BQW5CLEVBQTRCSixFQUE1QixDQUErQkMsSUFBL0IsQ0FBb0NDLE1BQXBDLENBQTJDLENBQTNDO0FBQ0EsMEJBQU9DLFlBQVlDLE9BQVosQ0FBb0IsQ0FBcEIsRUFBdUJDLFVBQXZCLENBQWtDQyxJQUF6QyxFQUErQ04sRUFBL0MsQ0FBa0RPLEtBQWxELENBQXdELEtBQXhEO0FBQ0gsS0F6QkQ7QUEwQkgsQ0F4RUQ7O0FBMEVBO0FBckdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImNoaWxkLXZpc2l0b3Ita2V5cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuLy8gIENvcHlyaWdodCAoQykgMjAxNiBZdXN1a2UgU3V6dWtpIDx1dGF0YW5lLnRlYUBnbWFpbC5jb20+XG4vL1xuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuLy8gIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy9cbi8vICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbi8vICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuLy8gICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4vLyAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vL1xuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4vLyAgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuLy8gIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4vLyAgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIDxDT1BZUklHSFQgSE9MREVSPiBCRSBMSUFCTEUgRk9SIEFOWVxuLy8gIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4vLyAgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuLy8gIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORFxuLy8gIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4vLyAgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GXG4vLyAgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgZXNwcmltYSBmcm9tICdlc3ByaW1hJztcbmltcG9ydCB7IGFuYWx5emUgfSBmcm9tICcuLic7XG5cbmRlc2NyaWJlKCdjaGlsZFZpc2l0b3JLZXlzIG9wdGlvbicsIGZ1bmN0aW9uKCkge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIGFzIGEga25vd24gbm9kZSBpZiB0aGUgY2hpbGRWaXNpdG9yS2V5cyBvcHRpb24gd2FzIGdpdmVuLicsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBhc3QgPSBlc3ByaW1hLnBhcnNlKGBcbiAgICAgICAgICAgIHZhciBmb28gPSAwO1xuICAgICAgICBgKTtcblxuICAgICAgICBhc3QuYm9keVswXS5kZWNsYXJhdGlvbnNbMF0uaW5pdC50eXBlID0gJ051bWVyaWNMaXRlcmFsJztcblxuICAgICAgICAvLyBzaG91bGQgbm8gZXJyb3JcbiAgICAgICAgYW5hbHl6ZShcbiAgICAgICAgICAgIGFzdCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmYWxsYmFjazogJ25vbmUnLFxuICAgICAgICAgICAgICAgIGNoaWxkVmlzaXRvcktleXM6IHtcbiAgICAgICAgICAgICAgICAgICAgTnVtZXJpY0xpdGVyYWw6IFtdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3QgdmlzaXQgdG8gcHJvcGVydGllcyB3aGljaCBhcmUgbm90IGdpdmVuLicsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBhc3QgPSBlc3ByaW1hLnBhcnNlKGBcbiAgICAgICAgICAgIGxldCBmb28gPSBiYXI7XG4gICAgICAgIGApO1xuXG4gICAgICAgIGFzdC5ib2R5WzBdLmRlY2xhcmF0aW9uc1swXS5pbml0ID0ge1xuICAgICAgICAgICAgdHlwZTogJ1Rlc3ROb2RlJyxcbiAgICAgICAgICAgIGFyZ3VtZW50OiBhc3QuYm9keVswXS5kZWNsYXJhdGlvbnNbMF0uaW5pdFxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZXN1bHQgPSBhbmFseXplKFxuICAgICAgICAgICAgYXN0LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNoaWxkVmlzaXRvcktleXM6IHtcbiAgICAgICAgICAgICAgICAgICAgVGVzdE5vZGU6IFtdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIGV4cGVjdChyZXN1bHQuc2NvcGVzKS50by5oYXZlLmxlbmd0aCgxKTtcbiAgICAgICAgY29uc3QgZ2xvYmFsU2NvcGUgPSByZXN1bHQuc2NvcGVzWzBdO1xuXG4gICAgICAgIC8vIGBiYXJgIGluIFRlc3ROb2RlIGhhcyBub3QgYmVlbiB2aXNpdGVkLlxuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUudGhyb3VnaCkudG8uaGF2ZS5sZW5ndGgoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZpc2l0IHRvIGdpdmVuIHByb3BlcnRpZXMuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGFzdCA9IGVzcHJpbWEucGFyc2UoYFxuICAgICAgICAgICAgbGV0IGZvbyA9IGJhcjtcbiAgICAgICAgYCk7XG5cbiAgICAgICAgYXN0LmJvZHlbMF0uZGVjbGFyYXRpb25zWzBdLmluaXQgPSB7XG4gICAgICAgICAgICB0eXBlOiAnVGVzdE5vZGUnLFxuICAgICAgICAgICAgYXJndW1lbnQ6IGFzdC5ib2R5WzBdLmRlY2xhcmF0aW9uc1swXS5pbml0XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IGFuYWx5emUoXG4gICAgICAgICAgICBhc3QsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2hpbGRWaXNpdG9yS2V5czoge1xuICAgICAgICAgICAgICAgICAgICBUZXN0Tm9kZTogWydhcmd1bWVudCddXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIGV4cGVjdChyZXN1bHQuc2NvcGVzKS50by5oYXZlLmxlbmd0aCgxKTtcbiAgICAgICAgY29uc3QgZ2xvYmFsU2NvcGUgPSByZXN1bHQuc2NvcGVzWzBdO1xuXG4gICAgICAgIC8vIGBiYXJgIGluIFRlc3ROb2RlIGhhcyBiZWVuIHZpc2l0ZWQuXG4gICAgICAgIGV4cGVjdChnbG9iYWxTY29wZS50aHJvdWdoKS50by5oYXZlLmxlbmd0aCgxKTtcbiAgICAgICAgZXhwZWN0KGdsb2JhbFNjb3BlLnRocm91Z2hbMF0uaWRlbnRpZmllci5uYW1lKS50by5lcXVhbCgnYmFyJyk7XG4gICAgfSk7XG59KTtcblxuLy8gdmltOiBzZXQgc3c9NCB0cz00IGV0IHR3PTgwIDpcbiJdfQ==
