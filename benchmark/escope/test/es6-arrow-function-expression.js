'use strict';

var _chai = require('chai');

var _esprima = require('../third_party/esprima');

var _ = require('..');

describe('ES6 arrow function expression', function () {
    it('materialize scope for arrow function expression', function () {
        var ast = (0, _esprima.parse)('\n            var arrow = () => {\n                let i = 0;\n                var j = 20;\n                console.log(i);\n            }\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(1);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.block.type).to.be.equal('ArrowFunctionExpression');
        (0, _chai.expect)(scope.isStrict).to.be.true;
        (0, _chai.expect)(scope.variables).to.have.length(2);
        // There's no "arguments"
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('i');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('j');
    });

    it('generate bindings for parameters', function () {
        var ast = (0, _esprima.parse)('var arrow = (a, b, c, d) => {}');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(1);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.block.type).to.be.equal('ArrowFunctionExpression');
        (0, _chai.expect)(scope.isStrict).to.be.true;
        (0, _chai.expect)(scope.variables).to.have.length(4);
        // There's no "arguments"
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('a');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('b');
        (0, _chai.expect)(scope.variables[2].name).to.be.equal('c');
        (0, _chai.expect)(scope.variables[3].name).to.be.equal('d');
    });
});

// vim: set sw=4 ts=4 et tw=80 :
// -*- coding: utf-8 -*-
//  Copyright (C) 2014 Yusuke Suzuki <utatane.tea@gmail.com>
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzNi1hcnJvdy1mdW5jdGlvbi1leHByZXNzaW9uLmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiaXQiLCJhc3QiLCJzY29wZU1hbmFnZXIiLCJlY21hVmVyc2lvbiIsInNjb3BlcyIsInRvIiwiaGF2ZSIsImxlbmd0aCIsInNjb3BlIiwidHlwZSIsImJlIiwiZXF1YWwiLCJibG9jayIsImlzU3RyaWN0IiwiZmFsc2UiLCJ2YXJpYWJsZXMiLCJ0cnVlIiwibmFtZSJdLCJtYXBwaW5ncyI6Ijs7QUF1QkE7O0FBQ0E7O0FBQ0E7O0FBRUFBLFNBQVMsK0JBQVQsRUFBMEMsWUFBVztBQUNqREMsT0FBRyxpREFBSCxFQUFzRCxZQUFXO0FBQzdELFlBQU1DLE1BQU0sMktBQVo7O0FBUUEsWUFBTUMsZUFBZSxlQUFRRCxHQUFSLEVBQWEsRUFBQ0UsYUFBYSxDQUFkLEVBQWIsQ0FBckI7QUFDQSwwQkFBT0QsYUFBYUUsTUFBcEIsRUFBNEJDLEVBQTVCLENBQStCQyxJQUEvQixDQUFvQ0MsTUFBcEMsQ0FBMkMsQ0FBM0M7O0FBRUEsWUFBSUMsUUFBUU4sYUFBYUUsTUFBYixDQUFvQixDQUFwQixDQUFaO0FBQ0EsMEJBQU9JLE1BQU1DLElBQWIsRUFBbUJKLEVBQW5CLENBQXNCSyxFQUF0QixDQUF5QkMsS0FBekIsQ0FBK0IsUUFBL0I7QUFDQSwwQkFBT0gsTUFBTUksS0FBTixDQUFZSCxJQUFuQixFQUF5QkosRUFBekIsQ0FBNEJLLEVBQTVCLENBQStCQyxLQUEvQixDQUFxQyxTQUFyQztBQUNBLDBCQUFPSCxNQUFNSyxRQUFiLEVBQXVCUixFQUF2QixDQUEwQkssRUFBMUIsQ0FBNkJJLEtBQTdCO0FBQ0EsMEJBQU9OLE1BQU1PLFNBQWIsRUFBd0JWLEVBQXhCLENBQTJCQyxJQUEzQixDQUFnQ0MsTUFBaEMsQ0FBdUMsQ0FBdkM7O0FBRUFDLGdCQUFRTixhQUFhRSxNQUFiLENBQW9CLENBQXBCLENBQVI7QUFDQSwwQkFBT0ksTUFBTUMsSUFBYixFQUFtQkosRUFBbkIsQ0FBc0JLLEVBQXRCLENBQXlCQyxLQUF6QixDQUErQixVQUEvQjtBQUNBLDBCQUFPSCxNQUFNSSxLQUFOLENBQVlILElBQW5CLEVBQXlCSixFQUF6QixDQUE0QkssRUFBNUIsQ0FBK0JDLEtBQS9CLENBQXFDLHlCQUFyQztBQUNBLDBCQUFPSCxNQUFNSyxRQUFiLEVBQXVCUixFQUF2QixDQUEwQkssRUFBMUIsQ0FBNkJNLElBQTdCO0FBQ0EsMEJBQU9SLE1BQU1PLFNBQWIsRUFBd0JWLEVBQXhCLENBQTJCQyxJQUEzQixDQUFnQ0MsTUFBaEMsQ0FBdUMsQ0FBdkM7QUFDQTtBQUNBLDBCQUFPQyxNQUFNTyxTQUFOLENBQWdCLENBQWhCLEVBQW1CRSxJQUExQixFQUFnQ1osRUFBaEMsQ0FBbUNLLEVBQW5DLENBQXNDQyxLQUF0QyxDQUE0QyxHQUE1QztBQUNBLDBCQUFPSCxNQUFNTyxTQUFOLENBQWdCLENBQWhCLEVBQW1CRSxJQUExQixFQUFnQ1osRUFBaEMsQ0FBbUNLLEVBQW5DLENBQXNDQyxLQUF0QyxDQUE0QyxHQUE1QztBQUNILEtBMUJEOztBQTRCQVgsT0FBRyxrQ0FBSCxFQUF1QyxZQUFXO0FBQzlDLFlBQU1DLE1BQU0scURBQVo7O0FBRUEsWUFBTUMsZUFBZSxlQUFRRCxHQUFSLEVBQWEsRUFBQ0UsYUFBYSxDQUFkLEVBQWIsQ0FBckI7QUFDQSwwQkFBT0QsYUFBYUUsTUFBcEIsRUFBNEJDLEVBQTVCLENBQStCQyxJQUEvQixDQUFvQ0MsTUFBcEMsQ0FBMkMsQ0FBM0M7O0FBRUEsWUFBSUMsUUFBUU4sYUFBYUUsTUFBYixDQUFvQixDQUFwQixDQUFaO0FBQ0EsMEJBQU9JLE1BQU1DLElBQWIsRUFBbUJKLEVBQW5CLENBQXNCSyxFQUF0QixDQUF5QkMsS0FBekIsQ0FBK0IsUUFBL0I7QUFDQSwwQkFBT0gsTUFBTUksS0FBTixDQUFZSCxJQUFuQixFQUF5QkosRUFBekIsQ0FBNEJLLEVBQTVCLENBQStCQyxLQUEvQixDQUFxQyxTQUFyQztBQUNBLDBCQUFPSCxNQUFNSyxRQUFiLEVBQXVCUixFQUF2QixDQUEwQkssRUFBMUIsQ0FBNkJJLEtBQTdCO0FBQ0EsMEJBQU9OLE1BQU1PLFNBQWIsRUFBd0JWLEVBQXhCLENBQTJCQyxJQUEzQixDQUFnQ0MsTUFBaEMsQ0FBdUMsQ0FBdkM7O0FBRUFDLGdCQUFRTixhQUFhRSxNQUFiLENBQW9CLENBQXBCLENBQVI7QUFDQSwwQkFBT0ksTUFBTUMsSUFBYixFQUFtQkosRUFBbkIsQ0FBc0JLLEVBQXRCLENBQXlCQyxLQUF6QixDQUErQixVQUEvQjtBQUNBLDBCQUFPSCxNQUFNSSxLQUFOLENBQVlILElBQW5CLEVBQXlCSixFQUF6QixDQUE0QkssRUFBNUIsQ0FBK0JDLEtBQS9CLENBQXFDLHlCQUFyQztBQUNBLDBCQUFPSCxNQUFNSyxRQUFiLEVBQXVCUixFQUF2QixDQUEwQkssRUFBMUIsQ0FBNkJNLElBQTdCO0FBQ0EsMEJBQU9SLE1BQU1PLFNBQWIsRUFBd0JWLEVBQXhCLENBQTJCQyxJQUEzQixDQUFnQ0MsTUFBaEMsQ0FBdUMsQ0FBdkM7QUFDQTtBQUNBLDBCQUFPQyxNQUFNTyxTQUFOLENBQWdCLENBQWhCLEVBQW1CRSxJQUExQixFQUFnQ1osRUFBaEMsQ0FBbUNLLEVBQW5DLENBQXNDQyxLQUF0QyxDQUE0QyxHQUE1QztBQUNBLDBCQUFPSCxNQUFNTyxTQUFOLENBQWdCLENBQWhCLEVBQW1CRSxJQUExQixFQUFnQ1osRUFBaEMsQ0FBbUNLLEVBQW5DLENBQXNDQyxLQUF0QyxDQUE0QyxHQUE1QztBQUNBLDBCQUFPSCxNQUFNTyxTQUFOLENBQWdCLENBQWhCLEVBQW1CRSxJQUExQixFQUFnQ1osRUFBaEMsQ0FBbUNLLEVBQW5DLENBQXNDQyxLQUF0QyxDQUE0QyxHQUE1QztBQUNBLDBCQUFPSCxNQUFNTyxTQUFOLENBQWdCLENBQWhCLEVBQW1CRSxJQUExQixFQUFnQ1osRUFBaEMsQ0FBbUNLLEVBQW5DLENBQXNDQyxLQUF0QyxDQUE0QyxHQUE1QztBQUNILEtBdEJEO0FBdUJILENBcEREOztBQXNEQTtBQWpGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJlczYtYXJyb3ctZnVuY3Rpb24tZXhwcmVzc2lvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuLy8gIENvcHlyaWdodCAoQykgMjAxNCBZdXN1a2UgU3V6dWtpIDx1dGF0YW5lLnRlYUBnbWFpbC5jb20+XG4vL1xuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuLy8gIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy9cbi8vICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbi8vICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuLy8gICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4vLyAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vL1xuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4vLyAgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuLy8gIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4vLyAgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIDxDT1BZUklHSFQgSE9MREVSPiBCRSBMSUFCTEUgRk9SIEFOWVxuLy8gIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4vLyAgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuLy8gIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORFxuLy8gIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4vLyAgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GXG4vLyAgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJy4uL3RoaXJkX3BhcnR5L2VzcHJpbWEnO1xuaW1wb3J0IHsgYW5hbHl6ZSB9IGZyb20gJy4uJztcblxuZGVzY3JpYmUoJ0VTNiBhcnJvdyBmdW5jdGlvbiBleHByZXNzaW9uJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ21hdGVyaWFsaXplIHNjb3BlIGZvciBhcnJvdyBmdW5jdGlvbiBleHByZXNzaW9uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGFzdCA9IHBhcnNlKGBcbiAgICAgICAgICAgIHZhciBhcnJvdyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIGogPSAyMDtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYCk7XG5cbiAgICAgICAgY29uc3Qgc2NvcGVNYW5hZ2VyID0gYW5hbHl6ZShhc3QsIHtlY21hVmVyc2lvbjogNn0pO1xuICAgICAgICBleHBlY3Qoc2NvcGVNYW5hZ2VyLnNjb3BlcykudG8uaGF2ZS5sZW5ndGgoMik7XG5cbiAgICAgICAgbGV0IHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1swXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdnbG9iYWwnKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLmJsb2NrLnR5cGUpLnRvLmJlLmVxdWFsKCdQcm9ncmFtJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5pc1N0cmljdCkudG8uYmUuZmFsc2U7XG4gICAgICAgIGV4cGVjdChzY29wZS52YXJpYWJsZXMpLnRvLmhhdmUubGVuZ3RoKDEpO1xuXG4gICAgICAgIHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1sxXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdmdW5jdGlvbicpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuYmxvY2sudHlwZSkudG8uYmUuZXF1YWwoJ0Fycm93RnVuY3Rpb25FeHByZXNzaW9uJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5pc1N0cmljdCkudG8uYmUudHJ1ZTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnZhcmlhYmxlcykudG8uaGF2ZS5sZW5ndGgoMik7XG4gICAgICAgIC8vIFRoZXJlJ3Mgbm8gXCJhcmd1bWVudHNcIlxuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzWzBdLm5hbWUpLnRvLmJlLmVxdWFsKCdpJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS52YXJpYWJsZXNbMV0ubmFtZSkudG8uYmUuZXF1YWwoJ2onKTtcbiAgICB9KTtcblxuICAgIGl0KCdnZW5lcmF0ZSBiaW5kaW5ncyBmb3IgcGFyYW1ldGVycycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBhc3QgPSBwYXJzZShgdmFyIGFycm93ID0gKGEsIGIsIGMsIGQpID0+IHt9YCk7XG5cbiAgICAgICAgY29uc3Qgc2NvcGVNYW5hZ2VyID0gYW5hbHl6ZShhc3QsIHtlY21hVmVyc2lvbjogNn0pO1xuICAgICAgICBleHBlY3Qoc2NvcGVNYW5hZ2VyLnNjb3BlcykudG8uaGF2ZS5sZW5ndGgoMik7XG5cbiAgICAgICAgbGV0IHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1swXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdnbG9iYWwnKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLmJsb2NrLnR5cGUpLnRvLmJlLmVxdWFsKCdQcm9ncmFtJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5pc1N0cmljdCkudG8uYmUuZmFsc2U7XG4gICAgICAgIGV4cGVjdChzY29wZS52YXJpYWJsZXMpLnRvLmhhdmUubGVuZ3RoKDEpO1xuXG4gICAgICAgIHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1sxXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdmdW5jdGlvbicpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuYmxvY2sudHlwZSkudG8uYmUuZXF1YWwoJ0Fycm93RnVuY3Rpb25FeHByZXNzaW9uJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5pc1N0cmljdCkudG8uYmUudHJ1ZTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnZhcmlhYmxlcykudG8uaGF2ZS5sZW5ndGgoNCk7XG4gICAgICAgIC8vIFRoZXJlJ3Mgbm8gXCJhcmd1bWVudHNcIlxuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzWzBdLm5hbWUpLnRvLmJlLmVxdWFsKCdhJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS52YXJpYWJsZXNbMV0ubmFtZSkudG8uYmUuZXF1YWwoJ2InKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnZhcmlhYmxlc1syXS5uYW1lKS50by5iZS5lcXVhbCgnYycpO1xuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzWzNdLm5hbWUpLnRvLmJlLmVxdWFsKCdkJyk7XG4gICAgfSk7XG59KTtcblxuLy8gdmltOiBzZXQgc3c9NCB0cz00IGV0IHR3PTgwIDpcbiJdfQ==
