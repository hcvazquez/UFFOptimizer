'use strict';

var _chai = require('chai');

var _esprima = require('../third_party/esprima');

var _ = require('..');

describe('nodejsScope option', function () {
    it('creates a function scope following the global scope immediately', function () {
        var ast = (0, _esprima.parse)('\n            \'use strict\';\n            var hello = 20;\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6, nodejsScope: true });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(0);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.true;
        (0, _chai.expect)(scope.variables).to.have.length(2);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('hello');
    });

    it('creates a function scope following the global scope immediately and creates module scope', function () {
        var ast = (0, _esprima.parse)('\n            import {x as v} from "mod";', { sourceType: 'module' });

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6, nodejsScope: true, sourceType: 'module' });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(3);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(0);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('module');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('v');
        (0, _chai.expect)(scope.variables[0].defs[0].type).to.be.equal('ImportBinding');
        (0, _chai.expect)(scope.references).to.have.length(0);
    });
});

// vim: set sw=4 ts=4 et tw=80 :
// -*- coding: utf-8 -*-
//  Copyright (C) 2015 Yusuke Suzuki <utatane.tea@gmail.com>
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//# sourceMappingURL=data:application/json;charset=utf8;base64,
