'use strict';

var _chai = require('chai');

var _esprima = require('esprima');

var _ = require('..');

describe('label', function () {
    it('should not create variables', function () {
        var ast = (0, _esprima.parse)('function bar() { q: for(;;) { break q; } }');

        var scopeManager = (0, _.analyze)(ast);
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);
        var globalScope = scopeManager.scopes[0];
        (0, _chai.expect)(globalScope.type).to.be.equal('global');
        (0, _chai.expect)(globalScope.variables).to.have.length(1);
        (0, _chai.expect)(globalScope.variables[0].name).to.be.equal('bar');
        (0, _chai.expect)(globalScope.references).to.have.length(0);

        var scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.isArgumentsMaterialized()).to.be.false;
        (0, _chai.expect)(scope.references).to.have.length(0);
    });

    it('should count child node references', function () {
        var ast = (0, _esprima.parse)('\n            var foo = 5;\n\n            label: while (true) {\n              console.log(foo);\n              break;\n            }\n        ');

        var scopeManager = (0, _.analyze)(ast);
        (0, _chai.expect)(scopeManager.scopes).to.have.length(1);
        var globalScope = scopeManager.scopes[0];
        (0, _chai.expect)(globalScope.type).to.be.equal('global');
        (0, _chai.expect)(globalScope.variables).to.have.length(1);
        (0, _chai.expect)(globalScope.variables[0].name).to.be.equal('foo');
        (0, _chai.expect)(globalScope.through.length).to.be.equal(3);
        (0, _chai.expect)(globalScope.through[2].identifier.name).to.be.equal('foo');
        (0, _chai.expect)(globalScope.through[2].isRead()).to.be.true;
    });
});

// vim: set sw=4 ts=4 et tw=80 :
// -*- coding: utf-8 -*-
//  Copyright (C) 2015 Yusuke Suzuki <utatane.tea@gmail.com>
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxhYmVsLmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiaXQiLCJhc3QiLCJzY29wZU1hbmFnZXIiLCJzY29wZXMiLCJ0byIsImhhdmUiLCJsZW5ndGgiLCJnbG9iYWxTY29wZSIsInR5cGUiLCJiZSIsImVxdWFsIiwidmFyaWFibGVzIiwibmFtZSIsInJlZmVyZW5jZXMiLCJzY29wZSIsImlzQXJndW1lbnRzTWF0ZXJpYWxpemVkIiwiZmFsc2UiLCJ0aHJvdWdoIiwiaWRlbnRpZmllciIsImlzUmVhZCIsInRydWUiXSwibWFwcGluZ3MiOiI7O0FBdUJBOztBQUNBOztBQUNBOztBQUVBQSxTQUFTLE9BQVQsRUFBa0IsWUFBVztBQUN6QkMsT0FBRyw2QkFBSCxFQUFrQyxZQUFXO0FBQ3pDLFlBQU1DLE1BQU0saUVBQVo7O0FBRUEsWUFBTUMsZUFBZSxlQUFRRCxHQUFSLENBQXJCO0FBQ0EsMEJBQU9DLGFBQWFDLE1BQXBCLEVBQTRCQyxFQUE1QixDQUErQkMsSUFBL0IsQ0FBb0NDLE1BQXBDLENBQTJDLENBQTNDO0FBQ0EsWUFBTUMsY0FBY0wsYUFBYUMsTUFBYixDQUFvQixDQUFwQixDQUFwQjtBQUNBLDBCQUFPSSxZQUFZQyxJQUFuQixFQUF5QkosRUFBekIsQ0FBNEJLLEVBQTVCLENBQStCQyxLQUEvQixDQUFxQyxRQUFyQztBQUNBLDBCQUFPSCxZQUFZSSxTQUFuQixFQUE4QlAsRUFBOUIsQ0FBaUNDLElBQWpDLENBQXNDQyxNQUF0QyxDQUE2QyxDQUE3QztBQUNBLDBCQUFPQyxZQUFZSSxTQUFaLENBQXNCLENBQXRCLEVBQXlCQyxJQUFoQyxFQUFzQ1IsRUFBdEMsQ0FBeUNLLEVBQXpDLENBQTRDQyxLQUE1QyxDQUFrRCxLQUFsRDtBQUNBLDBCQUFPSCxZQUFZTSxVQUFuQixFQUErQlQsRUFBL0IsQ0FBa0NDLElBQWxDLENBQXVDQyxNQUF2QyxDQUE4QyxDQUE5Qzs7QUFFQSxZQUFNUSxRQUFRWixhQUFhQyxNQUFiLENBQW9CLENBQXBCLENBQWQ7QUFDQSwwQkFBT1csTUFBTU4sSUFBYixFQUFtQkosRUFBbkIsQ0FBc0JLLEVBQXRCLENBQXlCQyxLQUF6QixDQUErQixVQUEvQjtBQUNBLDBCQUFPSSxNQUFNSCxTQUFiLEVBQXdCUCxFQUF4QixDQUEyQkMsSUFBM0IsQ0FBZ0NDLE1BQWhDLENBQXVDLENBQXZDO0FBQ0EsMEJBQU9RLE1BQU1ILFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBbUJDLElBQTFCLEVBQWdDUixFQUFoQyxDQUFtQ0ssRUFBbkMsQ0FBc0NDLEtBQXRDLENBQTRDLFdBQTVDO0FBQ0EsMEJBQU9JLE1BQU1DLHVCQUFOLEVBQVAsRUFBd0NYLEVBQXhDLENBQTJDSyxFQUEzQyxDQUE4Q08sS0FBOUM7QUFDQSwwQkFBT0YsTUFBTUQsVUFBYixFQUF5QlQsRUFBekIsQ0FBNEJDLElBQTVCLENBQWlDQyxNQUFqQyxDQUF3QyxDQUF4QztBQUNILEtBakJEOztBQW1CQU4sT0FBRyxvQ0FBSCxFQUF5QyxZQUFXO0FBQ2hELFlBQU1DLE1BQU0sc0tBQVo7O0FBU0EsWUFBTUMsZUFBZSxlQUFRRCxHQUFSLENBQXJCO0FBQ0EsMEJBQU9DLGFBQWFDLE1BQXBCLEVBQTRCQyxFQUE1QixDQUErQkMsSUFBL0IsQ0FBb0NDLE1BQXBDLENBQTJDLENBQTNDO0FBQ0EsWUFBTUMsY0FBY0wsYUFBYUMsTUFBYixDQUFvQixDQUFwQixDQUFwQjtBQUNBLDBCQUFPSSxZQUFZQyxJQUFuQixFQUF5QkosRUFBekIsQ0FBNEJLLEVBQTVCLENBQStCQyxLQUEvQixDQUFxQyxRQUFyQztBQUNBLDBCQUFPSCxZQUFZSSxTQUFuQixFQUE4QlAsRUFBOUIsQ0FBaUNDLElBQWpDLENBQXNDQyxNQUF0QyxDQUE2QyxDQUE3QztBQUNBLDBCQUFPQyxZQUFZSSxTQUFaLENBQXNCLENBQXRCLEVBQXlCQyxJQUFoQyxFQUFzQ1IsRUFBdEMsQ0FBeUNLLEVBQXpDLENBQTRDQyxLQUE1QyxDQUFrRCxLQUFsRDtBQUNBLDBCQUFPSCxZQUFZVSxPQUFaLENBQW9CWCxNQUEzQixFQUFtQ0YsRUFBbkMsQ0FBc0NLLEVBQXRDLENBQXlDQyxLQUF6QyxDQUErQyxDQUEvQztBQUNBLDBCQUFPSCxZQUFZVSxPQUFaLENBQW9CLENBQXBCLEVBQXVCQyxVQUF2QixDQUFrQ04sSUFBekMsRUFBK0NSLEVBQS9DLENBQWtESyxFQUFsRCxDQUFxREMsS0FBckQsQ0FBMkQsS0FBM0Q7QUFDQSwwQkFBT0gsWUFBWVUsT0FBWixDQUFvQixDQUFwQixFQUF1QkUsTUFBdkIsRUFBUCxFQUF3Q2YsRUFBeEMsQ0FBMkNLLEVBQTNDLENBQThDVyxJQUE5QztBQUNILEtBbkJEO0FBb0JILENBeENEOztBQTBDQTtBQXJFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJsYWJlbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuLy8gIENvcHlyaWdodCAoQykgMjAxNSBZdXN1a2UgU3V6dWtpIDx1dGF0YW5lLnRlYUBnbWFpbC5jb20+XG4vL1xuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuLy8gIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy9cbi8vICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbi8vICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuLy8gICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4vLyAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vL1xuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4vLyAgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuLy8gIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4vLyAgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIDxDT1BZUklHSFQgSE9MREVSPiBCRSBMSUFCTEUgRk9SIEFOWVxuLy8gIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4vLyAgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuLy8gIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORFxuLy8gIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4vLyAgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GXG4vLyAgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJ2VzcHJpbWEnO1xuaW1wb3J0IHsgYW5hbHl6ZSB9IGZyb20gJy4uJztcblxuZGVzY3JpYmUoJ2xhYmVsJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ3Nob3VsZCBub3QgY3JlYXRlIHZhcmlhYmxlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBhc3QgPSBwYXJzZShgZnVuY3Rpb24gYmFyKCkgeyBxOiBmb3IoOzspIHsgYnJlYWsgcTsgfSB9YCk7XG5cbiAgICAgICAgY29uc3Qgc2NvcGVNYW5hZ2VyID0gYW5hbHl6ZShhc3QpO1xuICAgICAgICBleHBlY3Qoc2NvcGVNYW5hZ2VyLnNjb3BlcykudG8uaGF2ZS5sZW5ndGgoMik7XG4gICAgICAgIGNvbnN0IGdsb2JhbFNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1swXTtcbiAgICAgICAgZXhwZWN0KGdsb2JhbFNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdnbG9iYWwnKTtcbiAgICAgICAgZXhwZWN0KGdsb2JhbFNjb3BlLnZhcmlhYmxlcykudG8uaGF2ZS5sZW5ndGgoMSk7XG4gICAgICAgIGV4cGVjdChnbG9iYWxTY29wZS52YXJpYWJsZXNbMF0ubmFtZSkudG8uYmUuZXF1YWwoJ2JhcicpO1xuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUucmVmZXJlbmNlcykudG8uaGF2ZS5sZW5ndGgoMCk7XG5cbiAgICAgICAgY29uc3Qgc2NvcGUgPSBzY29wZU1hbmFnZXIuc2NvcGVzWzFdO1xuICAgICAgICBleHBlY3Qoc2NvcGUudHlwZSkudG8uYmUuZXF1YWwoJ2Z1bmN0aW9uJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS52YXJpYWJsZXMpLnRvLmhhdmUubGVuZ3RoKDEpO1xuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzWzBdLm5hbWUpLnRvLmJlLmVxdWFsKCdhcmd1bWVudHMnKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLmlzQXJndW1lbnRzTWF0ZXJpYWxpemVkKCkpLnRvLmJlLmZhbHNlO1xuICAgICAgICBleHBlY3Qoc2NvcGUucmVmZXJlbmNlcykudG8uaGF2ZS5sZW5ndGgoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNvdW50IGNoaWxkIG5vZGUgcmVmZXJlbmNlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBhc3QgPSBwYXJzZShgXG4gICAgICAgICAgICB2YXIgZm9vID0gNTtcblxuICAgICAgICAgICAgbGFiZWw6IHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZvbyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICBgKTtcblxuICAgICAgICBjb25zdCBzY29wZU1hbmFnZXIgPSBhbmFseXplKGFzdCk7XG4gICAgICAgIGV4cGVjdChzY29wZU1hbmFnZXIuc2NvcGVzKS50by5oYXZlLmxlbmd0aCgxKTtcbiAgICAgICAgY29uc3QgZ2xvYmFsU2NvcGUgPSBzY29wZU1hbmFnZXIuc2NvcGVzWzBdO1xuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUudHlwZSkudG8uYmUuZXF1YWwoJ2dsb2JhbCcpO1xuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUudmFyaWFibGVzKS50by5oYXZlLmxlbmd0aCgxKTtcbiAgICAgICAgZXhwZWN0KGdsb2JhbFNjb3BlLnZhcmlhYmxlc1swXS5uYW1lKS50by5iZS5lcXVhbCgnZm9vJyk7XG4gICAgICAgIGV4cGVjdChnbG9iYWxTY29wZS50aHJvdWdoLmxlbmd0aCkudG8uYmUuZXF1YWwoMyk7XG4gICAgICAgIGV4cGVjdChnbG9iYWxTY29wZS50aHJvdWdoWzJdLmlkZW50aWZpZXIubmFtZSkudG8uYmUuZXF1YWwoJ2ZvbycpO1xuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUudGhyb3VnaFsyXS5pc1JlYWQoKSkudG8uYmUudHJ1ZTtcbiAgICB9KTtcbn0pO1xuXG4vLyB2aW06IHNldCBzdz00IHRzPTQgZXQgdHc9ODAgOlxuIl19
