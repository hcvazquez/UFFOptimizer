'use strict';

var _chai = require('chai');

var _esprima = require('../third_party/esprima');

var _ = require('..');

describe('ES6 block scope', function () {
    it('let is materialized in ES6 block scope#1', function () {
        var ast = (0, _esprima.parse)('\n            {\n                let i = 20;\n                i;\n            }\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2); // Program and BlcokStatement scope.

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0); // No variable in Program scope.

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('block');
        (0, _chai.expect)(scope.variables).to.have.length(1); // `i` in block scope.
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('i');
        (0, _chai.expect)(scope.references).to.have.length(2);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('i');
    });

    it('let is materialized in ES6 block scope#2', function () {
        var ast = (0, _esprima.parse)('\n            {\n                let i = 20;\n                var i = 20;\n                i;\n            }\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2); // Program and BlcokStatement scope.

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(1); // No variable in Program scope.
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('i');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('block');
        (0, _chai.expect)(scope.variables).to.have.length(1); // `i` in block scope.
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('i');
        (0, _chai.expect)(scope.references).to.have.length(3);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[2].identifier.name).to.be.equal('i');
    });

    it('function delaration is materialized in ES6 block scope', function () {
        var ast = (0, _esprima.parse)('\n            {\n                function test() {\n                }\n                test();\n            }\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(3);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('block');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('test');
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('test');

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.references).to.have.length(0);
    });

    it('let is not hoistable#1', function () {
        var ast = (0, _esprima.parse)('\n            var i = 42; (1)\n            {\n                i;  // (2) ReferenceError at runtime.\n                let i = 20;  // (2)\n                i;  // (2)\n            }\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var globalScope = scopeManager.scopes[0];
        (0, _chai.expect)(globalScope.type).to.be.equal('global');
        (0, _chai.expect)(globalScope.variables).to.have.length(1);
        (0, _chai.expect)(globalScope.variables[0].name).to.be.equal('i');
        (0, _chai.expect)(globalScope.references).to.have.length(1);

        var scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('block');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('i');
        (0, _chai.expect)(scope.references).to.have.length(3);
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(scope.variables[0]);
        (0, _chai.expect)(scope.references[1].resolved).to.be.equal(scope.variables[0]);
        (0, _chai.expect)(scope.references[2].resolved).to.be.equal(scope.variables[0]);
    });

    it('let is not hoistable#2', function () {
        var ast = (0, _esprima.parse)('\n            (function () {\n                var i = 42; // (1)\n                i;  // (1)\n                {\n                    i;  // (3)\n                    {\n                        i;  // (2)\n                        let i = 20;  // (2)\n                        i;  // (2)\n                    }\n                    let i = 30;  // (3)\n                    i;  // (3)\n                }\n                i;  // (1)\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(4);

        var globalScope = scopeManager.scopes[0];
        (0, _chai.expect)(globalScope.type).to.be.equal('global');
        (0, _chai.expect)(globalScope.variables).to.have.length(0);
        (0, _chai.expect)(globalScope.references).to.have.length(0);

        var scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(2);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('i');
        var v1 = scope.variables[1];
        (0, _chai.expect)(scope.references).to.have.length(3);
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(v1);
        (0, _chai.expect)(scope.references[1].resolved).to.be.equal(v1);
        (0, _chai.expect)(scope.references[2].resolved).to.be.equal(v1);

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('block');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('i');
        var v3 = scope.variables[0];
        (0, _chai.expect)(scope.references).to.have.length(3);
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(v3);
        (0, _chai.expect)(scope.references[1].resolved).to.be.equal(v3);
        (0, _chai.expect)(scope.references[2].resolved).to.be.equal(v3);

        scope = scopeManager.scopes[3];
        (0, _chai.expect)(scope.type).to.be.equal('block');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('i');
        var v2 = scope.variables[0];
        (0, _chai.expect)(scope.references).to.have.length(3);
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(v2);
        (0, _chai.expect)(scope.references[1].resolved).to.be.equal(v2);
        (0, _chai.expect)(scope.references[2].resolved).to.be.equal(v2);
    });
});

// vim: set sw=4 ts=4 et tw=80 :
// -*- coding: utf-8 -*-
//  Copyright (C) 2014 Yusuke Suzuki <utatane.tea@gmail.com>
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//# sourceMappingURL=data:application/json;charset=utf8;base64,
