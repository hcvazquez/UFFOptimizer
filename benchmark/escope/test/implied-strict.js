'use strict';

var _chai = require('chai');

var _esprima = require('../third_party/esprima');

var _ = require('..');

describe('impliedStrict option', function () {
    it('ensures all user scopes are strict if ecmaVersion >= 5', function () {
        var ast = (0, _esprima.parse)('\n            function foo() {\n                function bar() {\n                    \'use strict\';\n                }\n            }\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 5, impliedStrict: true });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(3);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.true;

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.block.type).to.be.equal('FunctionDeclaration');
        (0, _chai.expect)(scope.isStrict).to.be.true;

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.block.type).to.be.equal('FunctionDeclaration');
        (0, _chai.expect)(scope.isStrict).to.be.true;
    });

    it('ensures impliedStrict option is only effective when ecmaVersion option >= 5', function () {
        var ast = (0, _esprima.parse)('\n            function foo() {}\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 3, impliedStrict: true });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.block.type).to.be.equal('FunctionDeclaration');
        (0, _chai.expect)(scope.isStrict).to.be.false;
    });

    it('omits a nodejs global scope when ensuring all user scopes are strict', function () {
        var ast = (0, _esprima.parse)('\n            function foo() {}\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 5, nodejsScope: true, impliedStrict: true });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(3);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.true;

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.block.type).to.be.equal('FunctionDeclaration');
        (0, _chai.expect)(scope.isStrict).to.be.true;
    });

    it('omits a module global scope when ensuring all user scopes are strict', function () {
        var ast = (0, _esprima.parse)('\n            function foo() {}', { sourceType: 'module' });

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6, impliedStrict: true, sourceType: 'module' });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(3);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('module');
        (0, _chai.expect)(scope.isStrict).to.be.true;

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.block.type).to.be.equal('FunctionDeclaration');
        (0, _chai.expect)(scope.isStrict).to.be.true;
    });
});

// vim: set sw=4 ts=4 et tw=80 :
// -*- coding: utf-8 -*-
//  Copyright (C) 2015 Yusuke Suzuki <utatane.tea@gmail.com>
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcGxpZWQtc3RyaWN0LmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiaXQiLCJhc3QiLCJzY29wZU1hbmFnZXIiLCJlY21hVmVyc2lvbiIsImltcGxpZWRTdHJpY3QiLCJzY29wZXMiLCJ0byIsImhhdmUiLCJsZW5ndGgiLCJzY29wZSIsInR5cGUiLCJiZSIsImVxdWFsIiwiYmxvY2siLCJpc1N0cmljdCIsInRydWUiLCJmYWxzZSIsIm5vZGVqc1Njb3BlIiwic291cmNlVHlwZSJdLCJtYXBwaW5ncyI6Ijs7QUF1QkE7O0FBQ0E7O0FBQ0E7O0FBRUFBLFNBQVMsc0JBQVQsRUFBaUMsWUFBVztBQUN4Q0MsT0FBRyx3REFBSCxFQUE2RCxZQUFXO0FBQ3BFLFlBQU1DLE1BQU0sd0tBQVo7O0FBUUEsWUFBTUMsZUFBZSxlQUFRRCxHQUFSLEVBQWEsRUFBQ0UsYUFBYSxDQUFkLEVBQWlCQyxlQUFlLElBQWhDLEVBQWIsQ0FBckI7QUFDQSwwQkFBT0YsYUFBYUcsTUFBcEIsRUFBNEJDLEVBQTVCLENBQStCQyxJQUEvQixDQUFvQ0MsTUFBcEMsQ0FBMkMsQ0FBM0M7O0FBRUEsWUFBSUMsUUFBUVAsYUFBYUcsTUFBYixDQUFvQixDQUFwQixDQUFaO0FBQ0EsMEJBQU9JLE1BQU1DLElBQWIsRUFBbUJKLEVBQW5CLENBQXNCSyxFQUF0QixDQUF5QkMsS0FBekIsQ0FBK0IsUUFBL0I7QUFDQSwwQkFBT0gsTUFBTUksS0FBTixDQUFZSCxJQUFuQixFQUF5QkosRUFBekIsQ0FBNEJLLEVBQTVCLENBQStCQyxLQUEvQixDQUFxQyxTQUFyQztBQUNBLDBCQUFPSCxNQUFNSyxRQUFiLEVBQXVCUixFQUF2QixDQUEwQkssRUFBMUIsQ0FBNkJJLElBQTdCOztBQUVBTixnQkFBUVAsYUFBYUcsTUFBYixDQUFvQixDQUFwQixDQUFSO0FBQ0EsMEJBQU9JLE1BQU1DLElBQWIsRUFBbUJKLEVBQW5CLENBQXNCSyxFQUF0QixDQUF5QkMsS0FBekIsQ0FBK0IsVUFBL0I7QUFDQSwwQkFB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LEVBQTFCLENBQTZCSyxLQUE3Qjs7QUFFQVAsZ0JBQVFQLGFBQWFHLE1BQWIsQ0FBb0IsQ0FBcEIsQ0FBUjtBQUNBLDBCQUFPSSxNQUFNQyxJQUFiLEVBQW1CSixFQUFuQixDQUFzQkssRUFBdEIsQ0FBeUJDLEtBQXpCLENBQStCLFFBQS9CO0FBQ0EsMEJBQU9ILE1BQU1LLFFBQWIsRUFBdUJSLEVBQXZCLENBQTBCSyxFQUExQixDQUE2QkksSUFBN0I7O0FBRUFOLGdCQUFRUCxhQUFhRyxNQUFiLENBQW9CLENBQXBCLENBQVI7QUFDQSwwQkFBT0ksTUFBTUMsSUFBYixFQUFtQkosRUFBbkIsQ0FBc0JLLEVBQXRCLENBQXlCQyxLQUF6QixDQUErQixVQUEvQjtBQUNBLDBCQUFPSCxNQUFNSSxLQUFOLENBQVlILElBQW5CLEVBQXlCSixFQUF6QixDQUE0QkssRUFBNUIsQ0FBK0JDLEtBQS9CLENBQXFDLHFCQUFyQztBQUNBLDBCQUFPSCxNQUFNSyxRQUFiLEVBQXVCUixFQUF2QixDQUEwQkssRUFBMUIsQ0FBNkJJLElBQTdCO0FBQ0gsS0F0QkQ7QUF1QkgsQ0EvRkQ7O0FBaUdBO0FBNUhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImltcGxpZWQtc3RyaWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gLSotIGNvZGluZzogdXRmLTggLSotXG4vLyAgQ29weXJpZ2h0IChDKSAyMDE1IFl1c3VrZSBTdXp1a2kgPHV0YXRhbmUudGVhQGdtYWlsLmNvbT5cbi8vXG4vLyAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4vLyAgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4vL1xuLy8gICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuLy8gICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4vLyAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbi8vICAgICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbi8vXG4vLyAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbi8vICBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4vLyAgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0Vcbi8vICBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgPENPUFlSSUdIVCBIT0xERVI+IEJFIExJQUJMRSBGT1IgQU5ZXG4vLyAgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbi8vICAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7XG4vLyAgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG4vLyAgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbi8vICAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0Zcbi8vICBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuXG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICdjaGFpJztcbmltcG9ydCB7IHBhcnNlIH0gZnJvbSAnLi4vdGhpcmRfcGFydHkvZXNwcmltYSc7XG5pbXBvcnQgeyBhbmFseXplIH0gZnJvbSAnLi4nO1xuXG5kZXNjcmliZSgnaW1wbGllZFN0cmljdCBvcHRpb24nLCBmdW5jdGlvbigpIHtcbiAgICBpdCgnZW5zdXJlcyBhbGwgdXNlciBzY29wZXMgYXJlIHN0cmljdCBpZiBlY21hVmVyc2lvbiA+PSA1JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGFzdCA9IHBhcnNlKGBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZvbygpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBiYXIoKSB7XG4gICAgICAgICAgICAgICAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIGApO1xuXG4gICAgICAgIGNvbnN0IHNjb3BlTWFuYWdlciA9IGFuYWx5emUoYXN0LCB7ZWNtYVZlcnNpb246IDUsIGltcGxpZWRTdHJpY3Q6IHRydWV9KTtcbiAgICAgICAgZXhwZWN0KHNjb3BlTWFuYWdlci5zY29wZXMpLnRvLmhhdmUubGVuZ3RoKDMpO1xuXG4gICAgICAgIGxldCBzY29wZSA9IHNjb3BlTWFuYWdlci5zY29wZXNbMF07XG4gICAgICAgIGV4cGVjdChzY29wZS50eXBlKS50by5iZS5lcXVhbCgnZ2xvYmFsJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5ibG9jay50eXBlKS50by5iZS5lcXVhbCgnUHJvZ3JhbScpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuaXNTdHJpY3QpLnRvLmJlLnRydWU7XG5cbiAgICAgICAgc2NvcGUgPSBzY29wZU1hbmFnZXIuc2NvcGVzWzFdO1xuICAgICAgICBleHBlY3Qoc2NvcGUudHlwZSkudG8uYmUuZXF1YWwoJ2Z1bmN0aW9uJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5ibG9jay50eXBlKS50by5iZS5lcXVhbCgnRnVuY3Rpb25EZWNsYXJhdGlvbicpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuaXNTdHJpY3QpLnRvLmJlLnRydWU7XG5cbiAgICAgICAgc2NvcGUgPSBzY29wZU1hbmFnZXIuc2NvcGVzWzJdO1xuICAgICAgICBleHBlY3Qoc2NvcGUudHlwZSkudG8uYmUuZXF1YWwoJ2Z1bmN0aW9uJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5ibG9jay50eXBlKS50by5iZS5lcXVhbCgnRnVuY3Rpb25EZWNsYXJhdGlvbicpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuaXNTdHJpY3QpLnRvLmJlLnRydWU7XG4gICAgfSk7XG5cbiAgICBpdCgnZW5zdXJlcyBpbXBsaWVkU3RyaWN0IG9wdGlvbiBpcyBvbmx5IGVmZmVjdGl2ZSB3aGVuIGVjbWFWZXJzaW9uIG9wdGlvbiA+PSA1JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGFzdCA9IHBhcnNlKGBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZvbygpIHt9XG4gICAgICAgIGApO1xuXG4gICAgICAgIGNvbnN0IHNjb3BlTWFuYWdlciA9IGFuYWx5emUoYXN0LCB7ZWNtYVZlcnNpb246IDMsIGltcGxpZWRTdHJpY3Q6IHRydWV9KTtcbiAgICAgICAgZXhwZWN0KHNjb3BlTWFuYWdlci5zY29wZXMpLnRvLmhhdmUubGVuZ3RoKDIpO1xuXG4gICAgICAgIGxldCBzY29wZSA9IHNjb3BlTWFuYWdlci5zY29wZXNbMF07XG4gICAgICAgIGV4cGVjdChzY29wZS50eXBlKS50by5iZS5lcXVhbCgnZ2xvYmFsJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5ibG9jay50eXBlKS50by5iZS5lcXVhbCgnUHJvZ3JhbScpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuaXNTdHJpY3QpLnRvLmJlLmZhbHNlO1xuXG4gICAgICAgIHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1sxXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdmdW5jdGlvbicpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuYmxvY2sudHlwZSkudG8uYmUuZXF1YWwoJ0Z1bmN0aW9uRGVjbGFyYXRpb24nKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLmlzU3RyaWN0KS50by5iZS5mYWxzZTtcbiAgICB9KTtcblxuICAgIGl0KCdvbWl0cyBhIG5vZGVqcyBnbG9iYWwgc2NvcGUgd2hlbiBlbnN1cmluZyBhbGwgdXNlciBzY29wZXMgYXJlIHN0cmljdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBhc3QgPSBwYXJzZShgXG4gICAgICAgICAgICBmdW5jdGlvbiBmb28oKSB7fVxuICAgICAgICBgKTtcblxuICAgICAgICBsZXQgc2NvcGVNYW5hZ2VyID0gYW5hbHl6ZShhc3QsIHtlY21hVmVyc2lvbjogNSwgbm9kZWpzU2NvcGU6IHRydWUsIGltcGxpZWRTdHJpY3Q6IHRydWV9KTtcbiAgICAgICAgZXhwZWN0KHNjb3BlTWFuYWdlci5zY29wZXMpLnRvLmhhdmUubGVuZ3RoKDMpO1xuXG4gICAgICAgIGxldCBzY29wZSA9IHNjb3BlTWFuYWdlci5zY29wZXNbMF07XG4gICAgICAgIGV4cGVjdChzY29wZS50eXBlKS50by5iZS5lcXVhbCgnZ2xvYmFsJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5ibG9jay50eXBlKS50by5iZS5lcXVhbCgnUHJvZ3JhbScpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuaXNTdHJpY3QpLnRvLmJlLmZhbHNlO1xuXG4gICAgICAgIHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1sxXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdmdW5jdGlvbicpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuYmxvY2sudHlwZSkudG8uYmUuZXF1YWwoJ1Byb2dyYW0nKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLmlzU3RyaWN0KS50by5iZS50cnVlO1xuXG4gICAgICAgIHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1syXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdmdW5jdGlvbicpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuYmxvY2sudHlwZSkudG8uYmUuZXF1YWwoJ0Z1bmN0aW9uRGVjbGFyYXRpb24nKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLmlzU3RyaWN0KS50by5iZS50cnVlO1xuICAgIH0pO1xuXG4gICAgaXQoJ29taXRzIGEgbW9kdWxlIGdsb2JhbCBzY29wZSB3aGVuIGVuc3VyaW5nIGFsbCB1c2VyIHNjb3BlcyBhcmUgc3RyaWN0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGFzdCA9IHBhcnNlKGBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZvbygpIHt9YCxcbiAgICAgICAgICAgIHtzb3VyY2VUeXBlOiAnbW9kdWxlJ31cbiAgICAgICAgKTtcblxuICAgICAgICBsZXQgc2NvcGVNYW5hZ2VyID0gYW5hbHl6ZShhc3QsIHtlY21hVmVyc2lvbjogNiwgaW1wbGllZFN0cmljdDogdHJ1ZSwgc291cmNlVHlwZTogJ21vZHVsZSd9KTtcbiAgICAgICAgZXhwZWN0KHNjb3BlTWFuYWdlci5zY29wZXMpLnRvLmhhdmUubGVuZ3RoKDMpO1xuXG4gICAgICAgIGxldCBzY29wZSA9IHNjb3BlTWFuYWdlci5zY29wZXNbMF07XG4gICAgICAgIGV4cGVjdChzY29wZS50eXBlKS50by5iZS5lcXVhbCgnZ2xvYmFsJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5ibG9jay50eXBlKS50by5iZS5lcXVhbCgnUHJvZ3JhbScpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuaXNTdHJpY3QpLnRvLmJlLmZhbHNlO1xuXG4gICAgICAgIHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1sxXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdtb2R1bGUnKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLmlzU3RyaWN0KS50by5iZS50cnVlO1xuXG4gICAgICAgIHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1syXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdmdW5jdGlvbicpO1xuICAgICAgICBleHBlY3Qoc2NvcGUuYmxvY2sudHlwZSkudG8uYmUuZXF1YWwoJ0Z1bmN0aW9uRGVjbGFyYXRpb24nKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLmlzU3RyaWN0KS50by5iZS50cnVlO1xuICAgIH0pO1xufSk7XG5cbi8vIHZpbTogc2V0IHN3PTQgdHM9NCBldCB0dz04MCA6XG4iXX0=
