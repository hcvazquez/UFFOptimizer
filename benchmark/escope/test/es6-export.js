'use strict';

var _chai = require('chai');

var _espree = require('../third_party/espree');

var _espree2 = _interopRequireDefault(_espree);

var _ = require('..');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('export declaration', function () {
    // http://people.mozilla.org/~jorendorff/es6-draft.html#sec-static-and-runtme-semantics-module-records
    it('should create vairable bindings', function () {
        var ast = (0, _espree2.default)('export var v;', { sourceType: 'module' });

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6, sourceType: 'module' });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);
        var globalScope = scopeManager.scopes[0];
        (0, _chai.expect)(globalScope.type).to.be.equal('global');
        (0, _chai.expect)(globalScope.variables).to.have.length(0);
        (0, _chai.expect)(globalScope.references).to.have.length(0);

        var scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('module');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('v');
        (0, _chai.expect)(scope.variables[0].defs[0].type).to.be.equal('Variable');
        (0, _chai.expect)(scope.references).to.have.length(0);
    });

    it('should create function declaration bindings', function () {
        var ast = (0, _espree2.default)('export default function f(){};', { sourceType: 'module' });

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6, sourceType: 'module' });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(3);
        var globalScope = scopeManager.scopes[0];
        (0, _chai.expect)(globalScope.type).to.be.equal('global');
        (0, _chai.expect)(globalScope.variables).to.have.length(0);
        (0, _chai.expect)(globalScope.references).to.have.length(0);

        var scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('module');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('f');
        (0, _chai.expect)(scope.variables[0].defs[0].type).to.be.equal('FunctionName');
        (0, _chai.expect)(scope.references).to.have.length(0);

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.references).to.have.length(0);
    });

    it('should export function expression', function () {
        var ast = (0, _espree2.default)('export default function(){};', { sourceType: 'module' });

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6, sourceType: 'module' });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(3);
        var globalScope = scopeManager.scopes[0];
        (0, _chai.expect)(globalScope.type).to.be.equal('global');
        (0, _chai.expect)(globalScope.variables).to.have.length(0);
        (0, _chai.expect)(globalScope.references).to.have.length(0);

        var scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('module');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.references).to.have.length(0);
    });

    it('should export literal', function () {
        var ast = (0, _espree2.default)('export default 42;', { sourceType: 'module' });

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6, sourceType: 'module' });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);
        var globalScope = scopeManager.scopes[0];
        (0, _chai.expect)(globalScope.type).to.be.equal('global');
        (0, _chai.expect)(globalScope.variables).to.have.length(0);
        (0, _chai.expect)(globalScope.references).to.have.length(0);

        var scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('module');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
    });

    it('should refer exported references#1', function () {
        var ast = (0, _espree2.default)('export {x};', { sourceType: 'module' });

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6, sourceType: 'module' });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);
        var globalScope = scopeManager.scopes[0];
        (0, _chai.expect)(globalScope.type).to.be.equal('global');
        (0, _chai.expect)(globalScope.variables).to.have.length(0);
        (0, _chai.expect)(globalScope.references).to.have.length(0);

        var scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('module');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('x');
    });

    it('should refer exported references#2', function () {
        var ast = (0, _espree2.default)('export {v as x};', { sourceType: 'module' });

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6, sourceType: 'module' });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);
        var globalScope = scopeManager.scopes[0];
        (0, _chai.expect)(globalScope.type).to.be.equal('global');
        (0, _chai.expect)(globalScope.variables).to.have.length(0);
        (0, _chai.expect)(globalScope.references).to.have.length(0);

        var scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('module');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('v');
    });

    it('should not refer exported references from other source#1', function () {
        var ast = (0, _espree2.default)('export {x} from "mod";', { sourceType: 'module' });

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6, sourceType: 'module' });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);
        var globalScope = scopeManager.scopes[0];
        (0, _chai.expect)(globalScope.type).to.be.equal('global');
        (0, _chai.expect)(globalScope.variables).to.have.length(0);
        (0, _chai.expect)(globalScope.references).to.have.length(0);

        var scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('module');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
    });

    it('should not refer exported references from other source#2', function () {
        var ast = (0, _espree2.default)('export {v as x} from "mod";', { sourceType: 'module' });

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6, sourceType: 'module' });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);
        var globalScope = scopeManager.scopes[0];
        (0, _chai.expect)(globalScope.type).to.be.equal('global');
        (0, _chai.expect)(globalScope.variables).to.have.length(0);
        (0, _chai.expect)(globalScope.references).to.have.length(0);

        var scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('module');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
    });

    it('should not refer exported references from other source#3', function () {
        var ast = (0, _espree2.default)('export * from "mod";', { sourceType: 'module' });

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6, sourceType: 'module' });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);
        var globalScope = scopeManager.scopes[0];
        (0, _chai.expect)(globalScope.type).to.be.equal('global');
        (0, _chai.expect)(globalScope.variables).to.have.length(0);
        (0, _chai.expect)(globalScope.references).to.have.length(0);

        var scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('module');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
    });
});

// vim: set sw=4 ts=4 et tw=80 :
// -*- coding: utf-8 -*-
//  Copyright (C) 2014 Yusuke Suzuki <utatane.tea@gmail.com>
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzNi1leHBvcnQuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsImFzdCIsInNvdXJjZVR5cGUiLCJzY29wZU1hbmFnZXIiLCJlY21hVmVyc2lvbiIsInNjb3BlcyIsInRvIiwiaGF2ZSIsImxlbmd0aCIsImdsb2JhbFNjb3BlIiwidHlwZSIsImJlIiwiZXF1YWwiLCJ2YXJpYWJsZXMiLCJyZWZlcmVuY2VzIiwic2NvcGUiLCJuYW1lIiwiZGVmcyIsImlkZW50aWZpZXIiXSwibWFwcGluZ3MiOiI7O0FBdUJBOztBQUNBOzs7O0FBQ0E7Ozs7QUFFQUEsU0FBUyxvQkFBVCxFQUErQixZQUFXO0FBQ3RDO0FBQ0FDLE9BQUcsaUNBQUgsRUFBc0MsWUFBVztBQUM3QyxZQUFNQyxNQUFNLHVDQUF3QixFQUFDQyxZQUFZLFFBQWIsRUFBeEIsQ0FBWjs7QUFFQSxZQUFNQyxlQUFlLGVBQVFGLEdBQVIsRUFBYSxFQUFDRyxhQUFhLENBQWQsRUFBaUJGLFlBQVksUUFBN0IsRUFBYixDQUFyQjtBQUNBLDBCQUFPQyxhQUFhRSxNQUFwQixFQUE0QkMsRUFBNUIsQ0FBK0JDLElBQS9CLENBQW9DQyxNQUFwQyxDQUEyQyxDQUEzQztBQUNBLFlBQU1DLGNBQWNOLGFBQWFFLE1BQWIsQ0FBb0IsQ0FBcEIsQ0FBcEI7QUFDQSwwQkFBT0ksWUFBWUMsSUFBbkIsRUFBeUJKLEVBQXpCLENBQTRCSyxFQUE1QixDQUErQkMsS0FBL0IsQ0FBcUMsUUFBckM7QUFDQSwwQkFBT0gsWUFBWUksU0FBbkIsRUFBOEJQLEVBQTlCLENBQWlDQyxJQUFqQyxDQUFzQ0MsTUFBdEMsQ0FBNkMsQ0FBN0M7QUFDQSwwQkFBT0MsWUFBWUssVUFBbkIsRUFBK0JSLEVBQS9CLENBQWtDQyxJQUFsQyxDQUF1Q0MsTUFBdkMsQ0FBOEMsQ0FBOUM7O0FBRUEsWUFBTU8sUUFBUVosYUFBYUUsTUFBYixDQUFvQixDQUFwQixDQUFkO0FBQ0EsMEJBQU9VLE1BQU1MLElBQWIsRUFBbUJKLEVBQW5CLENBQXNC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LEVBQWlCRixZQUFZLFFBQTdCLEVBQWIsQ0FBckI7QUFDQSwwQkFBT0MsYUFBYUUsTUFBcEIsRUFBNEJDLEVBQTVCLENBQStCQyxJQUEvQixDQUFvQ0MsTUFBcEMsQ0FBMkMsQ0FBM0M7QUFDQSxZQUFNQyxjQUFjTixhQUFhRSxNQUFiLENBQW9CLENBQXBCLENBQXBCO0FBQ0EsMEJBQU9JLFlBQVlDLElBQW5CLEVBQXlCSixFQUF6QixDQUE0QkssRUFBNUIsQ0FBK0JDLEtBQS9CLENBQXFDLFFBQXJDO0FBQ0EsMEJBQU9ILFlBQVlJLFNBQW5CLEVBQThCUCxFQUE5QixDQUFpQ0MsSUFBakMsQ0FBc0NDLE1BQXRDLENBQTZDLENBQTdDO0FBQ0EsMEJBQU9DLFlBQVlLLFVBQW5CLEVBQStCUixFQUEvQixDQUFrQ0MsSUFBbEMsQ0FBdUNDLE1BQXZDLENBQThDLENBQTlDOztBQUVBLFlBQU1PLFFBQVFaLGFBQWFFLE1BQWIsQ0FBb0IsQ0FBcEIsQ0FBZDtBQUNBLDBCQUFPVSxNQUFNTCxJQUFiLEVBQW1CSixFQUFuQixDQUFzQkssRUFBdEIsQ0FBeUJDLEtBQXpCLENBQStCLFFBQS9CO0FBQ0EsMEJBQU9HLE1BQU1GLFNBQWIsRUFBd0JQLEVBQXhCLENBQTJCQyxJQUEzQixDQUFnQ0MsTUFBaEMsQ0FBdUMsQ0FBdkM7QUFDQSwwQkFBT08sTUFBTUQsVUFBYixFQUF5QlIsRUFBekIsQ0FBNEJDLElBQTVCLENBQWlDQyxNQUFqQyxDQUF3QyxDQUF4QztBQUNILEtBZEQ7QUFlSCxDQXBLRDs7QUFzS0E7QUFqTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZXM2LWV4cG9ydC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuLy8gIENvcHlyaWdodCAoQykgMjAxNCBZdXN1a2UgU3V6dWtpIDx1dGF0YW5lLnRlYUBnbWFpbC5jb20+XG4vL1xuLy8gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuLy8gIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuLy9cbi8vICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbi8vICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuLy8gICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuLy8gICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4vLyAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4vL1xuLy8gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4vLyAgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuLy8gIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4vLyAgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIDxDT1BZUklHSFQgSE9MREVSPiBCRSBMSUFCTEUgRk9SIEFOWVxuLy8gIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4vLyAgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuLy8gIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORFxuLy8gIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4vLyAgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GXG4vLyAgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblxuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgZXNwcmVlIGZyb20gJy4uL3RoaXJkX3BhcnR5L2VzcHJlZSc7XG5pbXBvcnQgeyBhbmFseXplIH0gZnJvbSAnLi4nO1xuXG5kZXNjcmliZSgnZXhwb3J0IGRlY2xhcmF0aW9uJywgZnVuY3Rpb24oKSB7XG4gICAgLy8gaHR0cDovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtc3RhdGljLWFuZC1ydW50bWUtc2VtYW50aWNzLW1vZHVsZS1yZWNvcmRzXG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgdmFpcmFibGUgYmluZGluZ3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgYXN0ID0gZXNwcmVlKGBleHBvcnQgdmFyIHY7YCwge3NvdXJjZVR5cGU6ICdtb2R1bGUnfSk7XG5cbiAgICAgICAgY29uc3Qgc2NvcGVNYW5hZ2VyID0gYW5hbHl6ZShhc3QsIHtlY21hVmVyc2lvbjogNiwgc291cmNlVHlwZTogJ21vZHVsZSd9KTtcbiAgICAgICAgZXhwZWN0KHNjb3BlTWFuYWdlci5zY29wZXMpLnRvLmhhdmUubGVuZ3RoKDIpO1xuICAgICAgICBjb25zdCBnbG9iYWxTY29wZSA9IHNjb3BlTWFuYWdlci5zY29wZXNbMF07XG4gICAgICAgIGV4cGVjdChnbG9iYWxTY29wZS50eXBlKS50by5iZS5lcXVhbCgnZ2xvYmFsJyk7XG4gICAgICAgIGV4cGVjdChnbG9iYWxTY29wZS52YXJpYWJsZXMpLnRvLmhhdmUubGVuZ3RoKDApO1xuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUucmVmZXJlbmNlcykudG8uaGF2ZS5sZW5ndGgoMCk7XG5cbiAgICAgICAgY29uc3Qgc2NvcGUgPSBzY29wZU1hbmFnZXIuc2NvcGVzWzFdO1xuICAgICAgICBleHBlY3Qoc2NvcGUudHlwZSkudG8uYmUuZXF1YWwoJ21vZHVsZScpO1xuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzKS50by5oYXZlLmxlbmd0aCgxKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnZhcmlhYmxlc1swXS5uYW1lKS50by5iZS5lcXVhbCgndicpO1xuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzWzBdLmRlZnNbMF0udHlwZSkudG8uYmUuZXF1YWwoJ1ZhcmlhYmxlJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5yZWZlcmVuY2VzKS50by5oYXZlLmxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIGZ1bmN0aW9uIGRlY2xhcmF0aW9uIGJpbmRpbmdzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGFzdCA9IGVzcHJlZShgZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZigpe307YCwge3NvdXJjZVR5cGU6ICdtb2R1bGUnfSk7XG5cbiAgICAgICAgY29uc3Qgc2NvcGVNYW5hZ2VyID0gYW5hbHl6ZShhc3QsIHtlY21hVmVyc2lvbjogNiwgc291cmNlVHlwZTogJ21vZHVsZSd9KTtcbiAgICAgICAgZXhwZWN0KHNjb3BlTWFuYWdlci5zY29wZXMpLnRvLmhhdmUubGVuZ3RoKDMpO1xuICAgICAgICBjb25zdCBnbG9iYWxTY29wZSA9IHNjb3BlTWFuYWdlci5zY29wZXNbMF07XG4gICAgICAgIGV4cGVjdChnbG9iYWxTY29wZS50eXBlKS50by5iZS5lcXVhbCgnZ2xvYmFsJyk7XG4gICAgICAgIGV4cGVjdChnbG9iYWxTY29wZS52YXJpYWJsZXMpLnRvLmhhdmUubGVuZ3RoKDApO1xuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUucmVmZXJlbmNlcykudG8uaGF2ZS5sZW5ndGgoMCk7XG5cbiAgICAgICAgbGV0IHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1sxXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdtb2R1bGUnKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnZhcmlhYmxlcykudG8uaGF2ZS5sZW5ndGgoMSk7XG4gICAgICAgIGV4cGVjdChzY29wZS52YXJpYWJsZXNbMF0ubmFtZSkudG8uYmUuZXF1YWwoJ2YnKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnZhcmlhYmxlc1swXS5kZWZzWzBdLnR5cGUpLnRvLmJlLmVxdWFsKCdGdW5jdGlvbk5hbWUnKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnJlZmVyZW5jZXMpLnRvLmhhdmUubGVuZ3RoKDApO1xuXG4gICAgICAgIHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1syXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdmdW5jdGlvbicpO1xuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzKS50by5oYXZlLmxlbmd0aCgxKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnZhcmlhYmxlc1swXS5uYW1lKS50by5iZS5lcXVhbCgnYXJndW1lbnRzJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5yZWZlcmVuY2VzKS50by5oYXZlLmxlbmd0aCgwKTtcbiAgICB9KTtcblxuXG4gICAgaXQoJ3Nob3VsZCBleHBvcnQgZnVuY3Rpb24gZXhwcmVzc2lvbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBhc3QgPSBlc3ByZWUoYGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCl7fTtgLCB7c291cmNlVHlwZTogJ21vZHVsZSd9KTtcblxuICAgICAgICBjb25zdCBzY29wZU1hbmFnZXIgPSBhbmFseXplKGFzdCwge2VjbWFWZXJzaW9uOiA2LCBzb3VyY2VUeXBlOiAnbW9kdWxlJ30pO1xuICAgICAgICBleHBlY3Qoc2NvcGVNYW5hZ2VyLnNjb3BlcykudG8uaGF2ZS5sZW5ndGgoMyk7XG4gICAgICAgIGNvbnN0IGdsb2JhbFNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1swXTtcbiAgICAgICAgZXhwZWN0KGdsb2JhbFNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdnbG9iYWwnKTtcbiAgICAgICAgZXhwZWN0KGdsb2JhbFNjb3BlLnZhcmlhYmxlcykudG8uaGF2ZS5sZW5ndGgoMCk7XG4gICAgICAgIGV4cGVjdChnbG9iYWxTY29wZS5yZWZlcmVuY2VzKS50by5oYXZlLmxlbmd0aCgwKTtcblxuICAgICAgICBsZXQgc2NvcGUgPSBzY29wZU1hbmFnZXIuc2NvcGVzWzFdO1xuICAgICAgICBleHBlY3Qoc2NvcGUudHlwZSkudG8uYmUuZXF1YWwoJ21vZHVsZScpO1xuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzKS50by5oYXZlLmxlbmd0aCgwKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnJlZmVyZW5jZXMpLnRvLmhhdmUubGVuZ3RoKDApO1xuXG4gICAgICAgIHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1syXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdmdW5jdGlvbicpO1xuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzKS50by5oYXZlLmxlbmd0aCgxKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnZhcmlhYmxlc1swXS5uYW1lKS50by5iZS5lcXVhbCgnYXJndW1lbnRzJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS5yZWZlcmVuY2VzKS50by5oYXZlLmxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZXhwb3J0IGxpdGVyYWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgYXN0ID0gZXNwcmVlKGBleHBvcnQgZGVmYXVsdCA0MjtgLCB7c291cmNlVHlwZTogJ21vZHVsZSd9KTtcblxuICAgICAgICBjb25zdCBzY29wZU1hbmFnZXIgPSBhbmFseXplKGFzdCwge2VjbWFWZXJzaW9uOiA2LCBzb3VyY2VUeXBlOiAnbW9kdWxlJ30pO1xuICAgICAgICBleHBlY3Qoc2NvcGVNYW5hZ2VyLnNjb3BlcykudG8uaGF2ZS5sZW5ndGgoMik7XG4gICAgICAgIGNvbnN0IGdsb2JhbFNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1swXTtcbiAgICAgICAgZXhwZWN0KGdsb2JhbFNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdnbG9iYWwnKTtcbiAgICAgICAgZXhwZWN0KGdsb2JhbFNjb3BlLnZhcmlhYmxlcykudG8uaGF2ZS5sZW5ndGgoMCk7XG4gICAgICAgIGV4cGVjdChnbG9iYWxTY29wZS5yZWZlcmVuY2VzKS50by5oYXZlLmxlbmd0aCgwKTtcblxuICAgICAgICBjb25zdCBzY29wZSA9IHNjb3BlTWFuYWdlci5zY29wZXNbMV07XG4gICAgICAgIGV4cGVjdChzY29wZS50eXBlKS50by5iZS5lcXVhbCgnbW9kdWxlJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS52YXJpYWJsZXMpLnRvLmhhdmUubGVuZ3RoKDApO1xuICAgICAgICBleHBlY3Qoc2NvcGUucmVmZXJlbmNlcykudG8uaGF2ZS5sZW5ndGgoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlZmVyIGV4cG9ydGVkIHJlZmVyZW5jZXMjMScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBhc3QgPSBlc3ByZWUoYGV4cG9ydCB7eH07YCwge3NvdXJjZVR5cGU6ICdtb2R1bGUnfSk7XG5cbiAgICAgICAgY29uc3Qgc2NvcGVNYW5hZ2VyID0gYW5hbHl6ZShhc3QsIHtlY21hVmVyc2lvbjogNiwgc291cmNlVHlwZTogJ21vZHVsZSd9KTtcbiAgICAgICAgZXhwZWN0KHNjb3BlTWFuYWdlci5zY29wZXMpLnRvLmhhdmUubGVuZ3RoKDIpO1xuICAgICAgICBjb25zdCBnbG9iYWxTY29wZSA9IHNjb3BlTWFuYWdlci5zY29wZXNbMF07XG4gICAgICAgIGV4cGVjdChnbG9iYWxTY29wZS50eXBlKS50by5iZS5lcXVhbCgnZ2xvYmFsJyk7XG4gICAgICAgIGV4cGVjdChnbG9iYWxTY29wZS52YXJpYWJsZXMpLnRvLmhhdmUubGVuZ3RoKDApO1xuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUucmVmZXJlbmNlcykudG8uaGF2ZS5sZW5ndGgoMCk7XG5cbiAgICAgICAgY29uc3Qgc2NvcGUgPSBzY29wZU1hbmFnZXIuc2NvcGVzWzFdO1xuICAgICAgICBleHBlY3Qoc2NvcGUudHlwZSkudG8uYmUuZXF1YWwoJ21vZHVsZScpO1xuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzKS50by5oYXZlLmxlbmd0aCgwKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnJlZmVyZW5jZXMpLnRvLmhhdmUubGVuZ3RoKDEpO1xuICAgICAgICBleHBlY3Qoc2NvcGUucmVmZXJlbmNlc1swXS5pZGVudGlmaWVyLm5hbWUpLnRvLmJlLmVxdWFsKCd4Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlZmVyIGV4cG9ydGVkIHJlZmVyZW5jZXMjMicsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBhc3QgPSBlc3ByZWUoYGV4cG9ydCB7diBhcyB4fTtgLCB7c291cmNlVHlwZTogJ21vZHVsZSd9KTtcblxuICAgICAgICBjb25zdCBzY29wZU1hbmFnZXIgPSBhbmFseXplKGFzdCwge2VjbWFWZXJzaW9uOiA2LCBzb3VyY2VUeXBlOiAnbW9kdWxlJ30pO1xuICAgICAgICBleHBlY3Qoc2NvcGVNYW5hZ2VyLnNjb3BlcykudG8uaGF2ZS5sZW5ndGgoMik7XG4gICAgICAgIGNvbnN0IGdsb2JhbFNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1swXTtcbiAgICAgICAgZXhwZWN0KGdsb2JhbFNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdnbG9iYWwnKTtcbiAgICAgICAgZXhwZWN0KGdsb2JhbFNjb3BlLnZhcmlhYmxlcykudG8uaGF2ZS5sZW5ndGgoMCk7XG4gICAgICAgIGV4cGVjdChnbG9iYWxTY29wZS5yZWZlcmVuY2VzKS50by5oYXZlLmxlbmd0aCgwKTtcblxuICAgICAgICBjb25zdCBzY29wZSA9IHNjb3BlTWFuYWdlci5zY29wZXNbMV07XG4gICAgICAgIGV4cGVjdChzY29wZS50eXBlKS50by5iZS5lcXVhbCgnbW9kdWxlJyk7XG4gICAgICAgIGV4cGVjdChzY29wZS52YXJpYWJsZXMpLnRvLmhhdmUubGVuZ3RoKDApO1xuICAgICAgICBleHBlY3Qoc2NvcGUucmVmZXJlbmNlcykudG8uaGF2ZS5sZW5ndGgoMSk7XG4gICAgICAgIGV4cGVjdChzY29wZS5yZWZlcmVuY2VzWzBdLmlkZW50aWZpZXIubmFtZSkudG8uYmUuZXF1YWwoJ3YnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90IHJlZmVyIGV4cG9ydGVkIHJlZmVyZW5jZXMgZnJvbSBvdGhlciBzb3VyY2UjMScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBhc3QgPSBlc3ByZWUoYGV4cG9ydCB7eH0gZnJvbSBcIm1vZFwiO2AsIHtzb3VyY2VUeXBlOiAnbW9kdWxlJ30pO1xuXG4gICAgICAgIGNvbnN0IHNjb3BlTWFuYWdlciA9IGFuYWx5emUoYXN0LCB7ZWNtYVZlcnNpb246IDYsIHNvdXJjZVR5cGU6ICdtb2R1bGUnfSk7XG4gICAgICAgIGV4cGVjdChzY29wZU1hbmFnZXIuc2NvcGVzKS50by5oYXZlLmxlbmd0aCgyKTtcbiAgICAgICAgY29uc3QgZ2xvYmFsU2NvcGUgPSBzY29wZU1hbmFnZXIuc2NvcGVzWzBdO1xuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUudHlwZSkudG8uYmUuZXF1YWwoJ2dsb2JhbCcpO1xuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUudmFyaWFibGVzKS50by5oYXZlLmxlbmd0aCgwKTtcbiAgICAgICAgZXhwZWN0KGdsb2JhbFNjb3BlLnJlZmVyZW5jZXMpLnRvLmhhdmUubGVuZ3RoKDApO1xuXG4gICAgICAgIGNvbnN0IHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1sxXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdtb2R1bGUnKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnZhcmlhYmxlcykudG8uaGF2ZS5sZW5ndGgoMCk7XG4gICAgICAgIGV4cGVjdChzY29wZS5yZWZlcmVuY2VzKS50by5oYXZlLmxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90IHJlZmVyIGV4cG9ydGVkIHJlZmVyZW5jZXMgZnJvbSBvdGhlciBzb3VyY2UjMicsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBhc3QgPSBlc3ByZWUoYGV4cG9ydCB7diBhcyB4fSBmcm9tIFwibW9kXCI7YCwge3NvdXJjZVR5cGU6ICdtb2R1bGUnfSk7XG5cbiAgICAgICAgY29uc3Qgc2NvcGVNYW5hZ2VyID0gYW5hbHl6ZShhc3QsIHtlY21hVmVyc2lvbjogNiwgc291cmNlVHlwZTogJ21vZHVsZSd9KTtcbiAgICAgICAgZXhwZWN0KHNjb3BlTWFuYWdlci5zY29wZXMpLnRvLmhhdmUubGVuZ3RoKDIpO1xuICAgICAgICBjb25zdCBnbG9iYWxTY29wZSA9IHNjb3BlTWFuYWdlci5zY29wZXNbMF07XG4gICAgICAgIGV4cGVjdChnbG9iYWxTY29wZS50eXBlKS50by5iZS5lcXVhbCgnZ2xvYmFsJyk7XG4gICAgICAgIGV4cGVjdChnbG9iYWxTY29wZS52YXJpYWJsZXMpLnRvLmhhdmUubGVuZ3RoKDApO1xuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUucmVmZXJlbmNlcykudG8uaGF2ZS5sZW5ndGgoMCk7XG5cbiAgICAgICAgY29uc3Qgc2NvcGUgPSBzY29wZU1hbmFnZXIuc2NvcGVzWzFdO1xuICAgICAgICBleHBlY3Qoc2NvcGUudHlwZSkudG8uYmUuZXF1YWwoJ21vZHVsZScpO1xuICAgICAgICBleHBlY3Qoc2NvcGUudmFyaWFibGVzKS50by5oYXZlLmxlbmd0aCgwKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnJlZmVyZW5jZXMpLnRvLmhhdmUubGVuZ3RoKDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3QgcmVmZXIgZXhwb3J0ZWQgcmVmZXJlbmNlcyBmcm9tIG90aGVyIHNvdXJjZSMzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGFzdCA9IGVzcHJlZShgZXhwb3J0ICogZnJvbSBcIm1vZFwiO2AsIHtzb3VyY2VUeXBlOiAnbW9kdWxlJ30pO1xuXG4gICAgICAgIGNvbnN0IHNjb3BlTWFuYWdlciA9IGFuYWx5emUoYXN0LCB7ZWNtYVZlcnNpb246IDYsIHNvdXJjZVR5cGU6ICdtb2R1bGUnfSk7XG4gICAgICAgIGV4cGVjdChzY29wZU1hbmFnZXIuc2NvcGVzKS50by5oYXZlLmxlbmd0aCgyKTtcbiAgICAgICAgY29uc3QgZ2xvYmFsU2NvcGUgPSBzY29wZU1hbmFnZXIuc2NvcGVzWzBdO1xuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUudHlwZSkudG8uYmUuZXF1YWwoJ2dsb2JhbCcpO1xuICAgICAgICBleHBlY3QoZ2xvYmFsU2NvcGUudmFyaWFibGVzKS50by5oYXZlLmxlbmd0aCgwKTtcbiAgICAgICAgZXhwZWN0KGdsb2JhbFNjb3BlLnJlZmVyZW5jZXMpLnRvLmhhdmUubGVuZ3RoKDApO1xuXG4gICAgICAgIGNvbnN0IHNjb3BlID0gc2NvcGVNYW5hZ2VyLnNjb3Blc1sxXTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnR5cGUpLnRvLmJlLmVxdWFsKCdtb2R1bGUnKTtcbiAgICAgICAgZXhwZWN0KHNjb3BlLnZhcmlhYmxlcykudG8uaGF2ZS5sZW5ndGgoMCk7XG4gICAgICAgIGV4cGVjdChzY29wZS5yZWZlcmVuY2VzKS50by5oYXZlLmxlbmd0aCgwKTtcbiAgICB9KTtcbn0pO1xuXG4vLyB2aW06IHNldCBzdz00IHRzPTQgZXQgdHc9ODAgOlxuIl19
