'use strict';

var _chai = require('chai');

var _esprima = require('../third_party/esprima');

var _ = require('..');

describe('ES6 iteration scope', function () {
    it('let materialize iteration scope for ForInStatement#1', function () {
        var ast = (0, _esprima.parse)('\n            (function () {\n                let i = 20;\n                for (let i in i) {\n                    console.log(i);\n                }\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(5);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(2);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('i');
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(scope.variables[1]);

        var iterScope = scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('TDZ');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('i');
        (0, _chai.expect)(scope.variables[0].defs[0].type).to.be.equal('TDZ');
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(scope.variables[0]);

        iterScope = scope = scopeManager.scopes[3];
        (0, _chai.expect)(scope.type).to.be.equal('for');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('i');
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(scope.variables[0]);

        scope = scopeManager.scopes[4];
        (0, _chai.expect)(scope.type).to.be.equal('block');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(2);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('console');
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(null);
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[1].resolved).to.be.equal(iterScope.variables[0]);
    });

    it('let materialize iteration scope for ForInStatement#2', function () {
        var ast = (0, _esprima.parse)('\n            (function () {\n                let i = 20;\n                for (let { i, j, k } in i) {\n                    console.log(i);\n                }\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(5);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(2);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('i');
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(scope.variables[1]);

        var iterScope = scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('TDZ');
        (0, _chai.expect)(scope.variables).to.have.length(3);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('i');
        (0, _chai.expect)(scope.variables[0].defs[0].type).to.be.equal('TDZ');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('j');
        (0, _chai.expect)(scope.variables[1].defs[0].type).to.be.equal('TDZ');
        (0, _chai.expect)(scope.variables[2].name).to.be.equal('k');
        (0, _chai.expect)(scope.variables[2].defs[0].type).to.be.equal('TDZ');
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(scope.variables[0]);

        iterScope = scope = scopeManager.scopes[3];
        (0, _chai.expect)(scope.type).to.be.equal('for');
        (0, _chai.expect)(scope.variables).to.have.length(3);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('i');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('j');
        (0, _chai.expect)(scope.variables[2].name).to.be.equal('k');
        (0, _chai.expect)(scope.references).to.have.length(3);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(scope.variables[0]);
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('j');
        (0, _chai.expect)(scope.references[1].resolved).to.be.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[2].identifier.name).to.be.equal('k');
        (0, _chai.expect)(scope.references[2].resolved).to.be.equal(scope.variables[2]);

        scope = scopeManager.scopes[4];
        (0, _chai.expect)(scope.type).to.be.equal('block');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(2);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('console');
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(null);
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[1].resolved).to.be.equal(iterScope.variables[0]);
    });

    it('let materialize iteration scope for ForStatement#2', function () {
        var ast = (0, _esprima.parse)('\n            (function () {\n                let i = 20;\n                let obj = {};\n                for (let { i, j, k } = obj; i < okok; ++i) {\n                    console.log(i, j, k);\n                }\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(4);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);

        var functionScope = scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(3);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('i');
        (0, _chai.expect)(scope.variables[2].name).to.be.equal('obj');
        (0, _chai.expect)(scope.references).to.have.length(2);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('obj');
        (0, _chai.expect)(scope.references[1].resolved).to.be.equal(scope.variables[2]);

        var iterScope = scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('for');
        (0, _chai.expect)(scope.variables).to.have.length(3);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('i');
        (0, _chai.expect)(scope.variables[0].defs[0].type).to.be.equal('Variable');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('j');
        (0, _chai.expect)(scope.variables[1].defs[0].type).to.be.equal('Variable');
        (0, _chai.expect)(scope.variables[2].name).to.be.equal('k');
        (0, _chai.expect)(scope.variables[2].defs[0].type).to.be.equal('Variable');
        (0, _chai.expect)(scope.references).to.have.length(7);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(scope.variables[0]);
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('j');
        (0, _chai.expect)(scope.references[1].resolved).to.be.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[2].identifier.name).to.be.equal('k');
        (0, _chai.expect)(scope.references[2].resolved).to.be.equal(scope.variables[2]);
        (0, _chai.expect)(scope.references[3].identifier.name).to.be.equal('obj');
        (0, _chai.expect)(scope.references[3].resolved).to.be.equal(functionScope.variables[2]);
        (0, _chai.expect)(scope.references[4].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[4].resolved).to.be.equal(scope.variables[0]);
        (0, _chai.expect)(scope.references[5].identifier.name).to.be.equal('okok');
        (0, _chai.expect)(scope.references[5].resolved).to.be.null;
        (0, _chai.expect)(scope.references[6].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[6].resolved).to.be.equal(scope.variables[0]);

        scope = scopeManager.scopes[3];
        (0, _chai.expect)(scope.type).to.be.equal('block');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(4);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('console');
        (0, _chai.expect)(scope.references[0].resolved).to.be.null;
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('i');
        (0, _chai.expect)(scope.references[1].resolved).to.be.equal(iterScope.variables[0]);
        (0, _chai.expect)(scope.references[2].identifier.name).to.be.equal('j');
        (0, _chai.expect)(scope.references[2].resolved).to.be.equal(iterScope.variables[1]);
        (0, _chai.expect)(scope.references[3].identifier.name).to.be.equal('k');
        (0, _chai.expect)(scope.references[3].resolved).to.be.equal(iterScope.variables[2]);
    });
});

// vim: set sw=4 ts=4 et tw=80 :
// -*- coding: utf-8 -*-
//  Copyright (C) 2014 Yusuke Suzuki <utatane.tea@gmail.com>
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//# sourceMappingURL=data:application/json;charset=utf8;base64,
