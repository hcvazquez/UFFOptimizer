'use strict';

var _chai = require('chai');

var _esprima = require('../third_party/esprima');

var _esprima2 = _interopRequireDefault(_esprima);

var _espree = require('../third_party/espree');

var _espree2 = _interopRequireDefault(_espree);

var _ = require('..');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// -*- coding: utf-8 -*-
//  Copyright (C) 2014 Yusuke Suzuki <utatane.tea@gmail.com>
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

describe('ES6 destructuring assignments', function () {
    it('Pattern in var in ForInStatement', function () {
        var ast = _esprima2.default.parse('\n            (function () {\n                for (var [a, b, c] in array);\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(1);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.be.equal('array');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(4);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('a');
        (0, _chai.expect)(scope.variables[2].name).to.be.equal('b');
        (0, _chai.expect)(scope.variables[3].name).to.be.equal('c');
        (0, _chai.expect)(scope.references).to.have.length(4);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('a');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[0].partial).to.be.true;
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('b');
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[1].partial).to.be.true;
        (0, _chai.expect)(scope.references[1].resolved).to.be.equal(scope.variables[2]);
        (0, _chai.expect)(scope.references[2].identifier.name).to.be.equal('c');
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[2].partial).to.be.true;
        (0, _chai.expect)(scope.references[2].resolved).to.be.equal(scope.variables[3]);
        (0, _chai.expect)(scope.references[3].identifier.name).to.be.equal('array');
        (0, _chai.expect)(scope.references[3].isWrite()).to.be.false;
    });

    it('Pattern in let in ForInStatement', function () {
        var ast = _esprima2.default.parse('\n            (function () {\n                for (let [a, b, c] in array);\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(4); // [global, function, TDZ, for]

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(1);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.equal('array');

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.equal('TDZ');
        (0, _chai.expect)(scope.variables).to.have.length(3);
        (0, _chai.expect)(scope.variables[0].name).to.equal('a');
        (0, _chai.expect)(scope.variables[1].name).to.equal('b');
        (0, _chai.expect)(scope.variables[2].name).to.equal('c');
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.equal('array');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.false;

        scope = scopeManager.scopes[3];
        (0, _chai.expect)(scope.type).to.equal('for');
        (0, _chai.expect)(scope.variables).to.have.length(3);
        (0, _chai.expect)(scope.variables[0].name).to.equal('a');
        (0, _chai.expect)(scope.variables[1].name).to.equal('b');
        (0, _chai.expect)(scope.variables[2].name).to.equal('c');
        (0, _chai.expect)(scope.references).to.have.length(3);
        (0, _chai.expect)(scope.references[0].identifier.name).to.equal('a');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[0].partial).to.be.true;
        (0, _chai.expect)(scope.references[0].resolved).to.equal(scope.variables[0]);
        (0, _chai.expect)(scope.references[1].identifier.name).to.equal('b');
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[1].partial).to.be.true;
        (0, _chai.expect)(scope.references[1].resolved).to.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[2].identifier.name).to.equal('c');
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[2].partial).to.be.true;
        (0, _chai.expect)(scope.references[2].resolved).to.equal(scope.variables[2]);
    });

    it('Pattern with default values in var in ForInStatement', function () {
        var ast = (0, _espree2.default)('\n            (function () {\n                for (var [a, b, c = d] in array);\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(2);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.equal('d');
        (0, _chai.expect)(scope.implicit.left[1].identifier.name).to.equal('array');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(4);
        (0, _chai.expect)(scope.variables[0].name).to.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.equal('a');
        (0, _chai.expect)(scope.variables[2].name).to.equal('b');
        (0, _chai.expect)(scope.variables[3].name).to.equal('c');
        (0, _chai.expect)(scope.references).to.have.length(6);
        (0, _chai.expect)(scope.references[0].identifier.name).to.equal('c');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[0].writeExpr.name).to.equal('d');
        (0, _chai.expect)(scope.references[0].partial).to.be.false;
        (0, _chai.expect)(scope.references[0].resolved).to.equal(scope.variables[3]);
        (0, _chai.expect)(scope.references[1].identifier.name).to.equal('d');
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[2].identifier.name).to.equal('a');
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[2].partial).to.be.true;
        (0, _chai.expect)(scope.references[2].resolved).to.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[3].identifier.name).to.equal('b');
        (0, _chai.expect)(scope.references[3].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[3].partial).to.be.true;
        (0, _chai.expect)(scope.references[3].resolved).to.equal(scope.variables[2]);
        (0, _chai.expect)(scope.references[4].identifier.name).to.equal('c');
        (0, _chai.expect)(scope.references[4].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[4].writeExpr.name).to.equal('array');
        (0, _chai.expect)(scope.references[4].partial).to.be.true;
        (0, _chai.expect)(scope.references[4].resolved).to.equal(scope.variables[3]);
        (0, _chai.expect)(scope.references[5].identifier.name).to.equal('array');
        (0, _chai.expect)(scope.references[5].isWrite()).to.be.false;
    });

    it('Pattern with default values in let in ForInStatement', function () {
        var ast = (0, _espree2.default)('\n            (function () {\n                for (let [a, b, c = d] in array);\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(4); // [global, function, TDZ, for]

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(2);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.equal('array');
        (0, _chai.expect)(scope.implicit.left[0].from.type).to.equal('TDZ');
        (0, _chai.expect)(scope.implicit.left[1].identifier.name).to.equal('d');
        (0, _chai.expect)(scope.implicit.left[1].from.type).to.equal('for');

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.equal('TDZ');
        (0, _chai.expect)(scope.variables).to.have.length(3);
        (0, _chai.expect)(scope.variables[0].name).to.equal('a');
        (0, _chai.expect)(scope.variables[1].name).to.equal('b');
        (0, _chai.expect)(scope.variables[2].name).to.equal('c');
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.equal('array');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.false;

        scope = scopeManager.scopes[3];
        (0, _chai.expect)(scope.type).to.equal('for');
        (0, _chai.expect)(scope.variables).to.have.length(3);
        (0, _chai.expect)(scope.variables[0].name).to.equal('a');
        (0, _chai.expect)(scope.variables[1].name).to.equal('b');
        (0, _chai.expect)(scope.variables[2].name).to.equal('c');
        (0, _chai.expect)(scope.references).to.have.length(5);
        (0, _chai.expect)(scope.references[0].identifier.name).to.equal('c');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[0].writeExpr.name).to.equal('d');
        (0, _chai.expect)(scope.references[0].partial).to.be.false;
        (0, _chai.expect)(scope.references[0].resolved).to.equal(scope.variables[2]);
        (0, _chai.expect)(scope.references[1].identifier.name).to.equal('d');
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[2].identifier.name).to.equal('a');
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[2].writeExpr.name).to.equal('array');
        (0, _chai.expect)(scope.references[2].partial).to.be.true;
        (0, _chai.expect)(scope.references[2].resolved).to.equal(scope.variables[0]);
        (0, _chai.expect)(scope.references[3].identifier.name).to.equal('b');
        (0, _chai.expect)(scope.references[3].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[3].writeExpr.name).to.equal('array');
        (0, _chai.expect)(scope.references[3].partial).to.be.true;
        (0, _chai.expect)(scope.references[3].resolved).to.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[4].identifier.name).to.equal('c');
        (0, _chai.expect)(scope.references[4].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[4].writeExpr.name).to.equal('array');
        (0, _chai.expect)(scope.references[4].partial).to.be.true;
        (0, _chai.expect)(scope.references[4].resolved).to.equal(scope.variables[2]);
    });

    it('Pattern with nested default values in var in ForInStatement', function () {
        var ast = (0, _espree2.default)('\n            (function () {\n                for (var [a, [b, c = d] = e] in array);\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(3);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.equal('d');
        (0, _chai.expect)(scope.implicit.left[1].identifier.name).to.equal('e');
        (0, _chai.expect)(scope.implicit.left[2].identifier.name).to.equal('array');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(4);
        (0, _chai.expect)(scope.variables[0].name).to.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.equal('a');
        (0, _chai.expect)(scope.variables[2].name).to.equal('b');
        (0, _chai.expect)(scope.variables[3].name).to.equal('c');
        (0, _chai.expect)(scope.references).to.have.length(9);
        (0, _chai.expect)(scope.references[0].identifier.name).to.equal('b');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[0].writeExpr.name).to.equal('e');
        (0, _chai.expect)(scope.references[0].partial).to.be.true;
        (0, _chai.expect)(scope.references[0].resolved).to.equal(scope.variables[2]);
        (0, _chai.expect)(scope.references[1].identifier.name).to.equal('c');
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[1].writeExpr.name).to.equal('e');
        (0, _chai.expect)(scope.references[1].partial).to.be.true;
        (0, _chai.expect)(scope.references[1].resolved).to.equal(scope.variables[3]);
        (0, _chai.expect)(scope.references[2].identifier.name).to.equal('c');
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[2].writeExpr.name).to.equal('d');
        (0, _chai.expect)(scope.references[2].partial).to.be.false;
        (0, _chai.expect)(scope.references[2].resolved).to.equal(scope.variables[3]);
        (0, _chai.expect)(scope.references[3].identifier.name).to.equal('d');
        (0, _chai.expect)(scope.references[3].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[4].identifier.name).to.equal('e');
        (0, _chai.expect)(scope.references[4].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[5].identifier.name).to.equal('a');
        (0, _chai.expect)(scope.references[5].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[5].writeExpr.name).to.equal('array');
        (0, _chai.expect)(scope.references[5].partial).to.be.true;
        (0, _chai.expect)(scope.references[5].resolved).to.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[6].identifier.name).to.equal('b');
        (0, _chai.expect)(scope.references[6].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[6].writeExpr.name).to.equal('array');
        (0, _chai.expect)(scope.references[6].partial).to.be.true;
        (0, _chai.expect)(scope.references[6].resolved).to.equal(scope.variables[2]);
        (0, _chai.expect)(scope.references[7].identifier.name).to.equal('c');
        (0, _chai.expect)(scope.references[7].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[7].writeExpr.name).to.equal('array');
        (0, _chai.expect)(scope.references[7].partial).to.be.true;
        (0, _chai.expect)(scope.references[7].resolved).to.equal(scope.variables[3]);
        (0, _chai.expect)(scope.references[8].identifier.name).to.equal('array');
        (0, _chai.expect)(scope.references[8].isWrite()).to.be.false;
    });

    it('Pattern with nested default values in let in ForInStatement', function () {
        var ast = (0, _espree2.default)('\n            (function () {\n                for (let [a, [b, c = d] = e] in array);\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(4); // [global, function, TDZ, for]

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(3);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.equal('array');
        (0, _chai.expect)(scope.implicit.left[0].from.type).to.equal('TDZ');
        (0, _chai.expect)(scope.implicit.left[1].identifier.name).to.equal('d');
        (0, _chai.expect)(scope.implicit.left[1].from.type).to.equal('for');
        (0, _chai.expect)(scope.implicit.left[2].identifier.name).to.equal('e');
        (0, _chai.expect)(scope.implicit.left[2].from.type).to.equal('for');

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.equal('TDZ');
        (0, _chai.expect)(scope.variables).to.have.length(3);
        (0, _chai.expect)(scope.variables[0].name).to.equal('a');
        (0, _chai.expect)(scope.variables[1].name).to.equal('b');
        (0, _chai.expect)(scope.variables[2].name).to.equal('c');
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.equal('array');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.false;

        scope = scopeManager.scopes[3];
        (0, _chai.expect)(scope.type).to.equal('for');
        (0, _chai.expect)(scope.variables).to.have.length(3);
        (0, _chai.expect)(scope.variables[0].name).to.equal('a');
        (0, _chai.expect)(scope.variables[1].name).to.equal('b');
        (0, _chai.expect)(scope.variables[2].name).to.equal('c');
        (0, _chai.expect)(scope.references).to.have.length(8);
        (0, _chai.expect)(scope.references[0].identifier.name).to.equal('b');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[0].writeExpr.name).to.equal('e');
        (0, _chai.expect)(scope.references[0].partial).to.be.true;
        (0, _chai.expect)(scope.references[0].resolved).to.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[1].identifier.name).to.equal('c');
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[1].writeExpr.name).to.equal('e');
        (0, _chai.expect)(scope.references[1].partial).to.be.true;
        (0, _chai.expect)(scope.references[1].resolved).to.equal(scope.variables[2]);
        (0, _chai.expect)(scope.references[2].identifier.name).to.equal('c');
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[2].writeExpr.name).to.equal('d');
        (0, _chai.expect)(scope.references[2].partial).to.be.false;
        (0, _chai.expect)(scope.references[2].resolved).to.equal(scope.variables[2]);
        (0, _chai.expect)(scope.references[3].identifier.name).to.equal('d');
        (0, _chai.expect)(scope.references[3].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[4].identifier.name).to.equal('e');
        (0, _chai.expect)(scope.references[4].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[5].identifier.name).to.equal('a');
        (0, _chai.expect)(scope.references[5].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[5].writeExpr.name).to.equal('array');
        (0, _chai.expect)(scope.references[5].partial).to.be.true;
        (0, _chai.expect)(scope.references[5].resolved).to.equal(scope.variables[0]);
        (0, _chai.expect)(scope.references[6].identifier.name).to.equal('b');
        (0, _chai.expect)(scope.references[6].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[6].writeExpr.name).to.equal('array');
        (0, _chai.expect)(scope.references[6].partial).to.be.true;
        (0, _chai.expect)(scope.references[6].resolved).to.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[7].identifier.name).to.equal('c');
        (0, _chai.expect)(scope.references[7].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[7].writeExpr.name).to.equal('array');
        (0, _chai.expect)(scope.references[7].partial).to.be.true;
        (0, _chai.expect)(scope.references[7].resolved).to.equal(scope.variables[2]);
    });

    it('Pattern with default values in var in ForInStatement (separate declarations)', function () {
        var ast = (0, _espree2.default)('\n            (function () {\n                var a, b, c;\n                for ([a, b, c = d] in array);\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(2);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.equal('d');
        (0, _chai.expect)(scope.implicit.left[1].identifier.name).to.equal('array');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(4);
        (0, _chai.expect)(scope.variables[0].name).to.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.equal('a');
        (0, _chai.expect)(scope.variables[2].name).to.equal('b');
        (0, _chai.expect)(scope.variables[3].name).to.equal('c');
        (0, _chai.expect)(scope.references).to.have.length(6);
        (0, _chai.expect)(scope.references[0].identifier.name).to.equal('a');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[0].partial).to.be.true;
        (0, _chai.expect)(scope.references[0].resolved).to.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[1].identifier.name).to.equal('b');
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[1].partial).to.be.true;
        (0, _chai.expect)(scope.references[1].resolved).to.equal(scope.variables[2]);
        (0, _chai.expect)(scope.references[2].identifier.name).to.equal('c');
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[2].writeExpr.name).to.equal('d');
        (0, _chai.expect)(scope.references[2].partial).to.be.false;
        (0, _chai.expect)(scope.references[2].resolved).to.equal(scope.variables[3]);
        (0, _chai.expect)(scope.references[3].identifier.name).to.equal('c');
        (0, _chai.expect)(scope.references[3].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[3].writeExpr.name).to.equal('array');
        (0, _chai.expect)(scope.references[3].partial).to.be.true;
        (0, _chai.expect)(scope.references[3].resolved).to.equal(scope.variables[3]);
        (0, _chai.expect)(scope.references[4].identifier.name).to.equal('d');
        (0, _chai.expect)(scope.references[4].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[5].identifier.name).to.equal('array');
        (0, _chai.expect)(scope.references[5].isWrite()).to.be.false;
    });

    it('Pattern with default values in var in ForInStatement (separate declarations and with MemberExpression)', function () {
        var ast = (0, _espree2.default)('\n            (function () {\n                var obj;\n                for ([obj.a, obj.b, obj.c = d] in array);\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(2);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.equal('d');
        (0, _chai.expect)(scope.implicit.left[1].identifier.name).to.equal('array');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(2);
        (0, _chai.expect)(scope.variables[0].name).to.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.equal('obj');
        (0, _chai.expect)(scope.references).to.have.length(5);
        (0, _chai.expect)(scope.references[0].identifier.name).to.equal('obj'); // obj.a
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[0].isRead()).to.be.true;
        (0, _chai.expect)(scope.references[0].resolved).to.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[1].identifier.name).to.equal('obj'); // obj.b
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[1].isRead()).to.be.true;
        (0, _chai.expect)(scope.references[1].resolved).to.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[2].identifier.name).to.equal('obj'); // obj.c
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[2].isRead()).to.be.true;
        (0, _chai.expect)(scope.references[2].resolved).to.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[3].identifier.name).to.equal('d');
        (0, _chai.expect)(scope.references[3].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[3].isRead()).to.be.true;
        (0, _chai.expect)(scope.references[4].identifier.name).to.equal('array');
        (0, _chai.expect)(scope.references[4].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[4].isRead()).to.be.true;
    });

    it('ArrayPattern in var', function () {
        var ast = _esprima2.default.parse('\n            (function () {\n                var [a, b, c] = array;\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(1);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.be.equal('array');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(4);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('a');
        (0, _chai.expect)(scope.variables[2].name).to.be.equal('b');
        (0, _chai.expect)(scope.variables[3].name).to.be.equal('c');
        (0, _chai.expect)(scope.references).to.have.length(4);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('a');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[0].partial).to.be.true;
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('b');
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[1].partial).to.be.true;
        (0, _chai.expect)(scope.references[1].resolved).to.be.equal(scope.variables[2]);
        (0, _chai.expect)(scope.references[2].identifier.name).to.be.equal('c');
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[2].partial).to.be.true;
        (0, _chai.expect)(scope.references[2].resolved).to.be.equal(scope.variables[3]);
        (0, _chai.expect)(scope.references[3].identifier.name).to.be.equal('array');
        (0, _chai.expect)(scope.references[3].isWrite()).to.be.false;
    });

    it('SpreadElement in var', function () {
        var ast = _esprima2.default.parse('\n            (function () {\n                var [a, b, ...rest] = array;\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(1);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.be.equal('array');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(4);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('a');
        (0, _chai.expect)(scope.variables[2].name).to.be.equal('b');
        (0, _chai.expect)(scope.variables[3].name).to.be.equal('rest');
        (0, _chai.expect)(scope.references).to.have.length(4);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('a');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[0].partial).to.be.true;
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('b');
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[1].partial).to.be.true;
        (0, _chai.expect)(scope.references[1].resolved).to.be.equal(scope.variables[2]);
        (0, _chai.expect)(scope.references[2].identifier.name).to.be.equal('rest');
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[2].partial).to.be.true;
        (0, _chai.expect)(scope.references[2].resolved).to.be.equal(scope.variables[3]);
        (0, _chai.expect)(scope.references[3].identifier.name).to.be.equal('array');
        (0, _chai.expect)(scope.references[3].isWrite()).to.be.false;

        ast = _esprima2.default.parse('\n            (function () {\n                var [a, b, ...[c, d, ...rest]] = array;\n            }());\n        ');

        scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(1);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.be.equal('array');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');

        (0, _chai.expect)(scope.variables).to.have.length(6);
        var expectedVariableNames = ['arguments', 'a', 'b', 'c', 'd', 'rest'];
        for (var index = 0; index < expectedVariableNames.length; index++) {
            (0, _chai.expect)(scope.variables[index].name).to.be.equal(expectedVariableNames[index]);
        }

        (0, _chai.expect)(scope.references).to.have.length(6);
        var expectedReferenceNames = ['a', 'b', 'c', 'd', 'rest'];
        for (var _index = 0; _index < expectedReferenceNames.length; _index++) {
            (0, _chai.expect)(scope.references[_index].identifier.name).to.be.equal(expectedReferenceNames[_index]);
            (0, _chai.expect)(scope.references[_index].isWrite()).to.be.true;
            (0, _chai.expect)(scope.references[_index].partial).to.be.true;
        }
        (0, _chai.expect)(scope.references[5].identifier.name).to.be.equal('array');
        (0, _chai.expect)(scope.references[5].isWrite()).to.be.false;
    });

    it('ObjectPattern in var', function () {
        var ast = _esprima2.default.parse('\n            (function () {\n                var {\n                    shorthand,\n                    key: value,\n                    hello: {\n                        world\n                    }\n                } = object;\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(1);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.be.equal('object');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(4);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('shorthand');
        (0, _chai.expect)(scope.variables[2].name).to.be.equal('value');
        (0, _chai.expect)(scope.variables[3].name).to.be.equal('world');
        (0, _chai.expect)(scope.references).to.have.length(4);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('shorthand');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[0].partial).to.be.true;
        (0, _chai.expect)(scope.references[0].resolved).to.be.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('value');
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[1].partial).to.be.true;
        (0, _chai.expect)(scope.references[1].resolved).to.be.equal(scope.variables[2]);
        (0, _chai.expect)(scope.references[2].identifier.name).to.be.equal('world');
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[2].partial).to.be.true;
        (0, _chai.expect)(scope.references[2].resolved).to.be.equal(scope.variables[3]);
        (0, _chai.expect)(scope.references[3].identifier.name).to.be.equal('object');
        (0, _chai.expect)(scope.references[3].isWrite()).to.be.false;
    });

    it('complex pattern in var', function () {
        var ast = _esprima2.default.parse('\n            (function () {\n                var {\n                    shorthand,\n                    key: [ a, b, c, d, e ],\n                    hello: {\n                        world\n                    }\n                } = object;\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(1);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.be.equal('object');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(8);
        var expectedVariableNames = ['arguments', 'shorthand', 'a', 'b', 'c', 'd', 'e', 'world'];
        for (var index = 0; index < expectedVariableNames.length; index++) {
            (0, _chai.expect)(scope.variables[index].name).to.be.equal(expectedVariableNames[index]);
        }
        (0, _chai.expect)(scope.references).to.have.length(8);
        var expectedReferenceNames = ['shorthand', 'a', 'b', 'c', 'd', 'e', 'world'];
        for (var _index2 = 0; _index2 < expectedReferenceNames.length; _index2++) {
            (0, _chai.expect)(scope.references[_index2].identifier.name).to.be.equal(expectedReferenceNames[_index2]);
            (0, _chai.expect)(scope.references[_index2].isWrite()).to.be.true;
            (0, _chai.expect)(scope.references[_index2].partial).to.be.true;
        }
        (0, _chai.expect)(scope.references[7].identifier.name).to.be.equal('object');
        (0, _chai.expect)(scope.references[7].isWrite()).to.be.false;
    });

    it('ArrayPattern in AssignmentExpression', function () {
        var ast = _esprima2.default.parse('\n            (function () {\n                [a, b, c] = array;\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(4);
        (0, _chai.expect)(scope.implicit.left.map(function (_ref) {
            var identifier = _ref.identifier;
            return identifier.name;
        })).to.deep.equal(['a', 'b', 'c', 'array']);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.references).to.have.length(4);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('a');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[0].partial).to.be.true;
        (0, _chai.expect)(scope.references[0].resolved).to.be.null;
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('b');
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[1].partial).to.be.true;
        (0, _chai.expect)(scope.references[1].resolved).to.be.null;
        (0, _chai.expect)(scope.references[2].identifier.name).to.be.equal('c');
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[2].partial).to.be.true;
        (0, _chai.expect)(scope.references[2].resolved).to.be.null;
        (0, _chai.expect)(scope.references[3].identifier.name).to.be.equal('array');
        (0, _chai.expect)(scope.references[3].isWrite()).to.be.false;
    });

    it('ArrayPattern with MemberExpression in AssignmentExpression', function () {
        var ast = _esprima2.default.parse('\n            (function () {\n                var obj;\n                [obj.a, obj.b, obj.c] = array;\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(1);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.equal('array');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(2);
        (0, _chai.expect)(scope.variables[0].name).to.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.equal('obj');
        (0, _chai.expect)(scope.references).to.have.length(4);
        (0, _chai.expect)(scope.references[0].identifier.name).to.equal('obj');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[0].isRead()).to.be.true;
        (0, _chai.expect)(scope.references[0].resolved).to.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[1].identifier.name).to.equal('obj');
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[1].isRead()).to.be.true;
        (0, _chai.expect)(scope.references[1].resolved).to.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[2].identifier.name).to.equal('obj');
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[2].isRead()).to.be.true;
        (0, _chai.expect)(scope.references[2].resolved).to.equal(scope.variables[1]);
        (0, _chai.expect)(scope.references[3].identifier.name).to.equal('array');
        (0, _chai.expect)(scope.references[3].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[3].isRead()).to.be.true;
    });

    it('SpreadElement in AssignmentExpression', function () {
        var ast = _esprima2.default.parse('\n            (function () {\n                [a, b, ...rest] = array;\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(4);
        (0, _chai.expect)(scope.implicit.left.map(function (_ref2) {
            var identifier = _ref2.identifier;
            return identifier.name;
        })).to.deep.equal(['a', 'b', 'rest', 'array']);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.references).to.have.length(4);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('a');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[0].partial).to.be.true;
        (0, _chai.expect)(scope.references[0].resolved).to.be.null;
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('b');
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[1].partial).to.be.true;
        (0, _chai.expect)(scope.references[1].resolved).to.be.null;
        (0, _chai.expect)(scope.references[2].identifier.name).to.be.equal('rest');
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[2].partial).to.be.true;
        (0, _chai.expect)(scope.references[2].resolved).to.be.null;
        (0, _chai.expect)(scope.references[3].identifier.name).to.be.equal('array');
        (0, _chai.expect)(scope.references[3].isWrite()).to.be.false;

        ast = _esprima2.default.parse('\n            (function () {\n                [a, b, ...[c, d, ...rest]] = array;\n            }());\n        ');

        scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(6);
        (0, _chai.expect)(scope.implicit.left.map(function (_ref3) {
            var identifier = _ref3.identifier;
            return identifier.name;
        })).to.deep.equal(['a', 'b', 'c', 'd', 'rest', 'array']);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');

        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');

        (0, _chai.expect)(scope.references).to.have.length(6);
        var expectedReferenceNames = ['a', 'b', 'c', 'd', 'rest'];
        for (var index = 0; index < expectedReferenceNames.length; index++) {
            (0, _chai.expect)(scope.references[index].identifier.name).to.be.equal(expectedReferenceNames[index]);
            (0, _chai.expect)(scope.references[index].isWrite()).to.be.true;
            (0, _chai.expect)(scope.references[index].partial).to.be.true;
            (0, _chai.expect)(scope.references[index].resolved).to.be.null;
        }
        (0, _chai.expect)(scope.references[5].identifier.name).to.be.equal('array');
        (0, _chai.expect)(scope.references[5].isWrite()).to.be.false;
    });

    it('SpreadElement with MemberExpression in AssignmentExpression', function () {
        var ast = _esprima2.default.parse('\n            (function () {\n                [a, b, ...obj.rest] = array;\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(4);
        (0, _chai.expect)(scope.implicit.left.map(function (_ref4) {
            var identifier = _ref4.identifier;
            return identifier.name;
        })).to.deep.equal(['a', 'b', 'obj', 'array']);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.equal('arguments');
        (0, _chai.expect)(scope.references).to.have.length(4);
        (0, _chai.expect)(scope.references[0].identifier.name).to.equal('a');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[0].partial).to.be.true;
        (0, _chai.expect)(scope.references[0].resolved).to.be.null;
        (0, _chai.expect)(scope.references[1].identifier.name).to.equal('b');
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[1].partial).to.be.true;
        (0, _chai.expect)(scope.references[1].resolved).to.be.null;
        (0, _chai.expect)(scope.references[2].identifier.name).to.equal('obj');
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.false;
        (0, _chai.expect)(scope.references[3].identifier.name).to.equal('array');
        (0, _chai.expect)(scope.references[3].isWrite()).to.be.false;
    });

    it('ObjectPattern in AssignmentExpression', function () {
        var ast = _esprima2.default.parse('\n            (function () {\n                ({\n                    shorthand,\n                    key: value,\n                    hello: {\n                        world\n                    }\n                }) = object;\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(4);
        (0, _chai.expect)(scope.implicit.left.map(function (_ref5) {
            var identifier = _ref5.identifier;
            return identifier.name;
        })).to.deep.equal(['shorthand', 'value', 'world', 'object']);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.references).to.have.length(4);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('shorthand');
        (0, _chai.expect)(scope.references[0].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[0].partial).to.be.true;
        (0, _chai.expect)(scope.references[0].resolved).to.null;
        (0, _chai.expect)(scope.references[1].identifier.name).to.be.equal('value');
        (0, _chai.expect)(scope.references[1].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[1].partial).to.be.true;
        (0, _chai.expect)(scope.references[1].resolved).to.null;
        (0, _chai.expect)(scope.references[2].identifier.name).to.be.equal('world');
        (0, _chai.expect)(scope.references[2].isWrite()).to.be.true;
        (0, _chai.expect)(scope.references[2].partial).to.be.true;
        (0, _chai.expect)(scope.references[2].resolved).to.null;
        (0, _chai.expect)(scope.references[3].identifier.name).to.be.equal('object');
        (0, _chai.expect)(scope.references[3].isWrite()).to.be.false;
    });

    it('complex pattern in AssignmentExpression', function () {
        var ast = _esprima2.default.parse('\n            (function () {\n                ({\n                    shorthand,\n                    key: [ a, b, c, d, e ],\n                    hello: {\n                        world\n                    }\n                }) = object;\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);
        (0, _chai.expect)(scope.implicit.left).to.have.length(8);
        (0, _chai.expect)(scope.implicit.left.map(function (_ref6) {
            var identifier = _ref6.identifier;
            return identifier.name;
        })).to.deep.equal(['shorthand', 'a', 'b', 'c', 'd', 'e', 'world', 'object']);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(1);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.references).to.have.length(8);
        var expectedReferenceNames = ['shorthand', 'a', 'b', 'c', 'd', 'e', 'world'];
        for (var index = 0; index < expectedReferenceNames.length; index++) {
            (0, _chai.expect)(scope.references[index].identifier.name).to.be.equal(expectedReferenceNames[index]);
            (0, _chai.expect)(scope.references[index].isWrite()).to.be.true;
            (0, _chai.expect)(scope.references[index].partial).to.be.true;
        }
        (0, _chai.expect)(scope.references[7].identifier.name).to.be.equal('object');
        (0, _chai.expect)(scope.references[7].isWrite()).to.be.false;
    });

    it('ArrayPattern in parameters', function () {
        var ast = _esprima2.default.parse('\n            (function ([a, b, c]) {\n            }(array));\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('array');
        (0, _chai.expect)(scope.implicit.left).to.have.length(1);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.be.equal('array');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(4);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('a');
        (0, _chai.expect)(scope.variables[2].name).to.be.equal('b');
        (0, _chai.expect)(scope.variables[3].name).to.be.equal('c');
        (0, _chai.expect)(scope.references).to.have.length(0);
    });

    it('SpreadElement in parameters', function () {
        var ast = _esprima2.default.parse('\n            (function ([a, b, ...rest], ...rest2) {\n            }(array));\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('array');
        (0, _chai.expect)(scope.implicit.left).to.have.length(1);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.be.equal('array');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(5);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('a');
        (0, _chai.expect)(scope.variables[2].name).to.be.equal('b');
        (0, _chai.expect)(scope.variables[3].name).to.be.equal('rest');
        (0, _chai.expect)(scope.variables[3].defs[0].rest).to.be.false;
        (0, _chai.expect)(scope.variables[4].name).to.be.equal('rest2');
        (0, _chai.expect)(scope.variables[4].defs[0].rest).to.be.true;
        (0, _chai.expect)(scope.references).to.have.length(0);

        // ast = espree.parse(`
        //     (function ([a, b, ...[c, d, ...rest]]) {
        //     }(array));
        // `);

        // scopeManager = analyze(ast, {ecmaVersion: 6});
        // expect(scopeManager.scopes).to.have.length(2);

        // scope = scopeManager.scopes[0];
        // expect(scope.type).to.be.equal('global');
        // expect(scope.variables).to.have.length(0);
        // expect(scope.references).to.have.length(0);
        // expect(scope.implicit.left).to.have.length(1);
        // expect(scope.implicit.left[0].identifier.name).to.be.equal('array');

        // scope = scopeManager.scopes[1];
        // expect(scope.type).to.be.equal('function');

        // expect(scope.variables).to.have.length(6);
        // const expectedVariableNames = [
        //     'arguments'
        //     'a'
        //     'b'
        //     'c'
        //     'd'
        //     'rest'
        // ];
        // for (let index = 0; index < expectedVariableNames.length; index++) {
        //     expect(scope.variables[index].name).to.be.equal(expectedVariableNames[index]);
        // }

        // expect(scope.references).to.have.length(6);
        // const expectedReferenceNames = [
        //         'a'
        //         'b'
        //         'c'
        //         'd'
        //         'rest'
        //     ]
        // for (let index = 0; index < expectedReferenceNames.length; index++) {
        //     expect(scope.references[index].identifier.name).to.be.equal(expectedReferenceNames[index]);
        //     expect(scope.references[index].isWrite()).to.be.true
        //     expect(scope.references[index].partial).to.be.true
        // }
        // expect(scope.references[5].identifier.name).to.be.equal('array');
        // expect(scope.references[5].isWrite()).to.be.false;
    });

    it('ObjectPattern in parameters', function () {
        var ast = _esprima2.default.parse('\n            (function ({\n                    shorthand,\n                    key: value,\n                    hello: {\n                        world\n                    }\n                }) {\n            }(object));\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('object');
        (0, _chai.expect)(scope.implicit.left).to.have.length(1);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.be.equal('object');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(4);
        (0, _chai.expect)(scope.variables[0].name).to.be.equal('arguments');
        (0, _chai.expect)(scope.variables[1].name).to.be.equal('shorthand');
        (0, _chai.expect)(scope.variables[2].name).to.be.equal('value');
        (0, _chai.expect)(scope.variables[3].name).to.be.equal('world');
        (0, _chai.expect)(scope.references).to.have.length(0);
    });

    it('complex pattern in parameters', function () {
        var ast = _esprima2.default.parse('\n            (function ({\n                    shorthand,\n                    key: [ a, b, c, d, e ],\n                    hello: {\n                        world\n                    }\n                }) {\n            }(object));\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(1);
        (0, _chai.expect)(scope.references[0].identifier.name).to.be.equal('object');
        (0, _chai.expect)(scope.implicit.left).to.have.length(1);
        (0, _chai.expect)(scope.implicit.left[0].identifier.name).to.be.equal('object');

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(8);
        var expectedVariableNames = ['arguments', 'shorthand', 'a', 'b', 'c', 'd', 'e', 'world'];
        for (var index = 0; index < expectedVariableNames.length; index++) {
            (0, _chai.expect)(scope.variables[index].name).to.be.equal(expectedVariableNames[index]);
        }
        (0, _chai.expect)(scope.references).to.have.length(0);
    });

    it('default values and patterns in var', function () {
        var ast = (0, _espree2.default)('\n            (function () {\n                var [a, b, c, d = 20 ] = array;\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(5);
        var expectedVariableNames = ['arguments', 'a', 'b', 'c', 'd'];
        for (var index = 0; index < expectedVariableNames.length; index++) {
            (0, _chai.expect)(scope.variables[index].name).to.be.equal(expectedVariableNames[index]);
        }
        (0, _chai.expect)(scope.references).to.have.length(6);
        var expectedReferenceNames = ['a', 'b', 'c', 'd', // assign 20
        'd', // assign array
        'array'];
        for (var _index3 = 0; _index3 < expectedReferenceNames.length; _index3++) {
            (0, _chai.expect)(scope.references[_index3].identifier.name).to.be.equal(expectedReferenceNames[_index3]);
        }
    });

    it('default values containing references and patterns in var', function () {
        var ast = (0, _espree2.default)('\n            (function () {\n                var [a, b, c, d = e ] = array;\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(5);
        var expectedVariableNames = ['arguments', 'a', 'b', 'c', 'd'];
        for (var index = 0; index < expectedVariableNames.length; index++) {
            (0, _chai.expect)(scope.variables[index].name).to.be.equal(expectedVariableNames[index]);
        }
        (0, _chai.expect)(scope.references).to.have.length(7);
        var expectedReferenceNames = ['a', // assign array
        'b', // assign array
        'c', // assign array
        'd', // assign e
        'd', // assign array
        'e', 'array'];
        for (var _index4 = 0; _index4 < expectedReferenceNames.length; _index4++) {
            (0, _chai.expect)(scope.references[_index4].identifier.name).to.be.equal(expectedReferenceNames[_index4]);
        }
    });

    it('nested default values containing references and patterns in var', function () {
        var ast = (0, _espree2.default)('\n            (function () {\n                var [a, b, [c, d = e] = f ] = array;\n            }());\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(2);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.equal('global');
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.equal('function');
        (0, _chai.expect)(scope.variables).to.have.length(5);
        var expectedVariableNames = ['arguments', 'a', 'b', 'c', 'd'];
        for (var index = 0; index < expectedVariableNames.length; index++) {
            (0, _chai.expect)(scope.variables[index].name).to.equal(expectedVariableNames[index]);
        }
        (0, _chai.expect)(scope.references).to.have.length(10);
        var expectedReferenceNames = ['a', // assign array
        'b', // assign array
        'c', // assign f
        'c', // assign array
        'd', // assign f
        'd', // assign e
        'd', // assign array
        'e', 'f', 'array'];
        for (var _index5 = 0; _index5 < expectedReferenceNames.length; _index5++) {
            (0, _chai.expect)(scope.references[_index5].identifier.name).to.equal(expectedReferenceNames[_index5]);
        }
    });
});

// vim: set sw=4 ts=4 et tw=80 :
//# sourceMappingURL=data:application/json;charset=utf8;base64,
