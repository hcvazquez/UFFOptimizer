'use strict';

var _chai = require('chai');

var _esprima = require('../third_party/esprima');

var _ = require('..');

describe('ES6 catch', function () {
    it('takes binding pattern', function () {
        var ast = (0, _esprima.parse)('\n            try {\n            } catch ({ a, b, c, d }) {\n                let e = 20;\n                a;\n                b;\n                let c = 30;\n                c;\n                d;\n            }\n        ');

        var scopeManager = (0, _.analyze)(ast, { ecmaVersion: 6 });
        (0, _chai.expect)(scopeManager.scopes).to.have.length(4);

        var scope = scopeManager.scopes[0];
        (0, _chai.expect)(scope.type).to.be.equal('global');
        (0, _chai.expect)(scope.block.type).to.be.equal('Program');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);

        scope = scopeManager.scopes[1];
        (0, _chai.expect)(scope.type).to.be.equal('block');
        (0, _chai.expect)(scope.block.type).to.be.equal('BlockStatement');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(0);
        (0, _chai.expect)(scope.references).to.have.length(0);

        scope = scopeManager.scopes[2];
        (0, _chai.expect)(scope.type).to.be.equal('catch');
        (0, _chai.expect)(scope.block.type).to.be.equal('CatchClause');
        (0, _chai.expect)(scope.isStrict).to.be.false;

        // FIXME After Esprima's bug is fixed, I'll add tests #33
        // https://github.com/estools/escope/issues/33#issuecomment-64135832
        //
        // expect(scope.variables).to.have.length(4);
        // expect(scope.variables[0].name).to.be.equal('a');
        // expect(scope.variables[1].name).to.be.equal('b');
        // expect(scope.variables[2].name).to.be.equal('c');
        // expect(scope.variables[3].name).to.be.equal('d');
        // expect(scope.references).to.have.length(0);

        scope = scopeManager.scopes[3];
        (0, _chai.expect)(scope.type).to.be.equal('block');
        (0, _chai.expect)(scope.block.type).to.be.equal('BlockStatement');
        (0, _chai.expect)(scope.isStrict).to.be.false;
        (0, _chai.expect)(scope.variables).to.have.length(2);
        (0, _chai.expect)(scope.variables.map(function (variable) {
            return variable.name;
        })).to.be.eql(['e', 'c']);
        (0, _chai.expect)(scope.references.map(function (ref) {
            return ref.identifier.name;
        })).to.be.eql(['e', 'a', 'b', 'c', 'c', 'd']);
    });
});

// vim: set sw=4 ts=4 et tw=80 :
// -*- coding: utf-8 -*-
//  Copyright (C) 2014 Yusuke Suzuki <utatane.tea@gmail.com>
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//# sourceMappingURL=data:application/json;charset=utf8;base64,
